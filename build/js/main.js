function CountdownTimer(t,e,i){this.initialize.apply(this,arguments)}function countdown(){var t=new Date("2017/10/15 00:00:00"),e=new CountdownTimer("countdown",t,'<span class="number-wrapper"><span class="number end">Акция закончилась</span></span>');e.countDown()}function get_name_browser(){var t=navigator.userAgent;t.search(/.NET/)>0&&($(".range-slider__scale").addClass("ie_range"),$(".inp_range_2").addClass("ie_range"),$(".page_global").css("font-family","Open Sans"),$(".page_success").css("font-family","Open Sans")),$("document").ready(function(){function e(){var e=$(".range-slider__scale").val(),i=$(".range-slider__scale").attr("min"),s=$(".range-slider__scale").attr("max"),n=$(".range-slider__scale").width(),o=n/(s-i)*e/n*100-100/(s-i)*i;t.search(/.NET/)<0&&0==$(".range-slider__scale").hasClass("test_input")&&$(".range-slider__scale").css("background","linear-gradient(to right, #084b93 0%, #084b93 "+o+"%, #707070 "+o+"%, #707070 100%)"),t.search(/.NET/)<0&&1==$(".range-slider__scale").hasClass("test_input")&&$(".range-slider__scale").css("background","linear-gradient(to right, #fff 0%, #fff "+o+"%, #ccc "+o+"%, #ccc 100%)"),$(".bc_1").val(e),$(".bc_1").change(function(){$(".range-slider__scale").val($(".bc_1").val())})}function i(){var e=$(".inp_range_2").val(),i=$(".inp_range_2").attr("min"),s=$(".inp_range_2").attr("max"),n=$(".inp_range_2").width(),o=n/(s-i)*e/n*100-100/(s-i)*i;t.search(/.NET/)<0&&0==$(".inp_range_2").hasClass("test_input")&&$(".inp_range_2").css("background","linear-gradient(to right, #002357 0%, #002357 "+o+"%, #ccc "+o+"%, #ccc 100%)"),t.search(/.NET/)<0&&1==$(".inp_range_2").hasClass("test_input")&&$(".inp_range_2").css("background","linear-gradient(to right, #fff 0%, #fff "+o+"%, #ccc "+o+"%, #ccc 100%)"),$(".bc_2").val(e),$(".bc_2").change(function(){$(".inp_range_2").val($(".bc_2").val())})}$(".bc_1").bind("click touch",function(){$(".bc_1").val("")}),$(".bc_2").bind("click touch",function(){$(".bc_2").val("")}),$(document).click(function(t){$(t.target).closest(".bc_1").length||(e(),t.stopPropagation())}),$(document).click(function(t){$(t.target).closest(".bc_2").length||(i(),t.stopPropagation())}),e(),i(),$(".bc_1").change(e),$(".bc_2").change(i),$(".range-slider__scale").bind("mousemove click touchmove touchend",e),$(".inp_range_2").bind("mousemove click touchmove touchend",i)})}function validate(t){t.value=t.value.replace(/[^\d,.]*!/g,"").replace(/([,.])[,.]+/g,"$1").replace(/^[^\d]*(\d+([.,]\d{0,5})?).*$/g,"$1")}if(function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function i(t){var e=!!t&&"length"in t&&t.length,i=ot.type(t);return"function"!==i&&!ot.isWindow(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}function s(t,e,i){if(ot.isFunction(e))return ot.grep(t,function(t,s){return!!e.call(t,s,t)!==i});if(e.nodeType)return ot.grep(t,function(t){return t===e!==i});if("string"==typeof e){if(mt.test(e))return ot.filter(e,t,i);e=ot.filter(e,t)}return ot.grep(t,function(t){return J.call(e,t)>-1!==i})}function n(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e={};return ot.each(t.match(wt)||[],function(t,i){e[i]=!0}),e}function r(){G.removeEventListener("DOMContentLoaded",r),t.removeEventListener("load",r),ot.ready()}function a(){this.expando=ot.expando+a.uid++}function l(t,e,i){var s;if(void 0===i&&1===t.nodeType)if(s="data-"+e.replace(St,"-$&").toLowerCase(),i=t.getAttribute(s),"string"==typeof i){try{i="true"===i||"false"!==i&&("null"===i?null:+i+""===i?+i:Et.test(i)?ot.parseJSON(i):i)}catch(n){}kt.set(t,e,i)}else i=void 0;return i}function h(t,e,i,s){var n,o=1,r=20,a=s?function(){return s.cur()}:function(){return ot.css(t,e,"")},l=a(),h=i&&i[3]||(ot.cssNumber[e]?"":"px"),c=(ot.cssNumber[e]||"px"!==h&&+l)&&Nt.exec(ot.css(t,e));if(c&&c[3]!==h){h=h||c[3],i=i||[],c=+l||1;do o=o||".5",c/=o,ot.style(t,e,c+h);while(o!==(o=a()/l)&&1!==o&&--r)}return i&&(c=+c||+l||0,n=i[1]?c+(i[1]+1)*i[2]:+i[2],s&&(s.unit=h,s.start=c,s.end=n)),n}function c(t,e){var i="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&ot.nodeName(t,e)?ot.merge([t],i):i}function p(t,e){for(var i=0,s=t.length;i<s;i++)Tt.set(t[i],"globalEval",!e||Tt.get(e[i],"globalEval"))}function u(t,e,i,s,n){for(var o,r,a,l,h,u,d=e.createDocumentFragment(),f=[],m=0,g=t.length;m<g;m++)if(o=t[m],o||0===o)if("object"===ot.type(o))ot.merge(f,o.nodeType?[o]:o);else if(Lt.test(o)){for(r=r||d.appendChild(e.createElement("div")),a=(It.exec(o)||["",""])[1].toLowerCase(),l=Pt[a]||Pt._default,r.innerHTML=l[1]+ot.htmlPrefilter(o)+l[2],u=l[0];u--;)r=r.lastChild;ot.merge(f,r.childNodes),r=d.firstChild,r.textContent=""}else f.push(e.createTextNode(o));for(d.textContent="",m=0;o=f[m++];)if(s&&ot.inArray(o,s)>-1)n&&n.push(o);else if(h=ot.contains(o.ownerDocument,o),r=c(d.appendChild(o),"script"),h&&p(r),i)for(u=0;o=r[u++];)Ft.test(o.type||"")&&i.push(o);return d}function d(){return!0}function f(){return!1}function m(){try{return G.activeElement}catch(t){}}function g(t,e,i,s,n,o){var r,a;if("object"==typeof e){"string"!=typeof i&&(s=s||i,i=void 0);for(a in e)g(t,a,i,s,e[a],o);return t}if(null==s&&null==n?(n=i,s=i=void 0):null==n&&("string"==typeof i?(n=s,s=void 0):(n=s,s=i,i=void 0)),n===!1)n=f;else if(!n)return t;return 1===o&&(r=n,n=function(t){return ot().off(t),r.apply(this,arguments)},n.guid=r.guid||(r.guid=ot.guid++)),t.each(function(){ot.event.add(this,e,n,s,i)})}function v(t,e){return ot.nodeName(t,"table")&&ot.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function _(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function y(t){var e=Bt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function b(t,e){var i,s,n,o,r,a,l,h;if(1===e.nodeType){if(Tt.hasData(t)&&(o=Tt.access(t),r=Tt.set(e,o),h=o.events)){delete r.handle,r.events={};for(n in h)for(i=0,s=h[n].length;i<s;i++)ot.event.add(e,n,h[n][i])}kt.hasData(t)&&(a=kt.access(t),l=ot.extend({},a),kt.set(e,l))}}function w(t,e){var i=e.nodeName.toLowerCase();"input"===i&&Ot.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function x(t,e,i,s){e=Z.apply([],e);var n,o,r,a,l,h,p=0,d=t.length,f=d-1,m=e[0],g=ot.isFunction(m);if(g||d>1&&"string"==typeof m&&!st.checkClone&&Wt.test(m))return t.each(function(n){var o=t.eq(n);g&&(e[0]=m.call(this,n,o.html())),x(o,e,i,s)});if(d&&(n=u(e,t[0].ownerDocument,!1,t,s),o=n.firstChild,1===n.childNodes.length&&(n=o),o||s)){for(r=ot.map(c(n,"script"),_),a=r.length;p<d;p++)l=n,p!==f&&(l=ot.clone(l,!0,!0),a&&ot.merge(r,c(l,"script"))),i.call(t[p],l,p);if(a)for(h=r[r.length-1].ownerDocument,ot.map(r,y),p=0;p<a;p++)l=r[p],Ft.test(l.type||"")&&!Tt.access(l,"globalEval")&&ot.contains(h,l)&&(l.src?ot._evalUrl&&ot._evalUrl(l.src):ot.globalEval(l.textContent.replace(Ut,"")))}return t}function $(t,e,i){for(var s,n=e?ot.filter(e,t):t,o=0;null!=(s=n[o]);o++)i||1!==s.nodeType||ot.cleanData(c(s)),s.parentNode&&(i&&ot.contains(s.ownerDocument,s)&&p(c(s,"script")),s.parentNode.removeChild(s));return t}function C(t,e){var i=ot(e.createElement(t)).appendTo(e.body),s=ot.css(i[0],"display");return i.detach(),s}function T(t){var e=G,i=Xt[t];return i||(i=C(t,e),"none"!==i&&i||(Vt=(Vt||ot("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Vt[0].contentDocument,e.write(),e.close(),i=C(t,e),Vt.detach()),Xt[t]=i),i}function k(t,e,i){var s,n,o,r,a=t.style;return i=i||Yt(t),r=i?i.getPropertyValue(e)||i[e]:void 0,""!==r&&void 0!==r||ot.contains(t.ownerDocument,t)||(r=ot.style(t,e)),i&&!st.pixelMarginRight()&&Gt.test(r)&&Qt.test(e)&&(s=a.width,n=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=s,a.minWidth=n,a.maxWidth=o),void 0!==r?r+"":r}function E(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function S(t){if(t in se)return t;for(var e=t[0].toUpperCase()+t.slice(1),i=ie.length;i--;)if(t=ie[i]+e,t in se)return t}function D(t,e,i){var s=Nt.exec(e);return s?Math.max(0,s[2]-(i||0))+(s[3]||"px"):e}function N(t,e,i,s,n){for(var o=i===(s?"border":"content")?4:"width"===e?1:0,r=0;o<4;o+=2)"margin"===i&&(r+=ot.css(t,i+At[o],!0,n)),s?("content"===i&&(r-=ot.css(t,"padding"+At[o],!0,n)),"margin"!==i&&(r-=ot.css(t,"border"+At[o]+"Width",!0,n))):(r+=ot.css(t,"padding"+At[o],!0,n),"padding"!==i&&(r+=ot.css(t,"border"+At[o]+"Width",!0,n)));return r}function A(t,e,i){var s=!0,n="width"===e?t.offsetWidth:t.offsetHeight,o=Yt(t),r="border-box"===ot.css(t,"boxSizing",!1,o);if(n<=0||null==n){if(n=k(t,e,o),(n<0||null==n)&&(n=t.style[e]),Gt.test(n))return n;s=r&&(st.boxSizingReliable()||n===t.style[e]),n=parseFloat(n)||0}return n+N(t,e,i||(r?"border":"content"),s,o)+"px"}function j(t,e){for(var i,s,n,o=[],r=0,a=t.length;r<a;r++)s=t[r],s.style&&(o[r]=Tt.get(s,"olddisplay"),i=s.style.display,e?(o[r]||"none"!==i||(s.style.display=""),""===s.style.display&&jt(s)&&(o[r]=Tt.access(s,"olddisplay",T(s.nodeName)))):(n=jt(s),"none"===i&&n||Tt.set(s,"olddisplay",n?i:ot.css(s,"display"))));for(r=0;r<a;r++)s=t[r],s.style&&(e&&"none"!==s.style.display&&""!==s.style.display||(s.style.display=e?o[r]||"":"none"));return t}function O(t,e,i,s,n){return new O.prototype.init(t,e,i,s,n)}function I(){return t.setTimeout(function(){ne=void 0}),ne=ot.now()}function F(t,e){var i,s=0,n={height:t};for(e=e?1:0;s<4;s+=2-e)i=At[s],n["margin"+i]=n["padding"+i]=t;return e&&(n.opacity=n.width=t),n}function P(t,e,i){for(var s,n=(M.tweeners[e]||[]).concat(M.tweeners["*"]),o=0,r=n.length;o<r;o++)if(s=n[o].call(i,e,t))return s}function L(t,e,i){var s,n,o,r,a,l,h,c,p=this,u={},d=t.style,f=t.nodeType&&jt(t),m=Tt.get(t,"fxshow");i.queue||(a=ot._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,ot.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(i.overflow=[d.overflow,d.overflowX,d.overflowY],h=ot.css(t,"display"),c="none"===h?Tt.get(t,"olddisplay")||T(t.nodeName):h,"inline"===c&&"none"===ot.css(t,"float")&&(d.display="inline-block")),i.overflow&&(d.overflow="hidden",p.always(function(){d.overflow=i.overflow[0],d.overflowX=i.overflow[1],d.overflowY=i.overflow[2]}));for(s in e)if(n=e[s],re.exec(n)){if(delete e[s],o=o||"toggle"===n,n===(f?"hide":"show")){if("show"!==n||!m||void 0===m[s])continue;f=!0}u[s]=m&&m[s]||ot.style(t,s)}else h=void 0;if(ot.isEmptyObject(u))"inline"===("none"===h?T(t.nodeName):h)&&(d.display=h);else{m?"hidden"in m&&(f=m.hidden):m=Tt.access(t,"fxshow",{}),o&&(m.hidden=!f),f?ot(t).show():p.done(function(){ot(t).hide()}),p.done(function(){var e;Tt.remove(t,"fxshow");for(e in u)ot.style(t,e,u[e])});for(s in u)r=P(f?m[s]:0,s,p),s in m||(m[s]=r.start,f&&(r.end=r.start,r.start="width"===s||"height"===s?1:0))}}function R(t,e){var i,s,n,o,r;for(i in t)if(s=ot.camelCase(i),n=e[s],o=t[i],ot.isArray(o)&&(n=o[1],o=t[i]=o[0]),i!==s&&(t[s]=o,delete t[i]),r=ot.cssHooks[s],r&&"expand"in r){o=r.expand(o),delete t[s];for(i in o)i in t||(t[i]=o[i],e[i]=n)}else e[s]=n}function M(t,e,i){var s,n,o=0,r=M.prefilters.length,a=ot.Deferred().always(function(){delete l.elem}),l=function(){if(n)return!1;for(var e=ne||I(),i=Math.max(0,h.startTime+h.duration-e),s=i/h.duration||0,o=1-s,r=0,l=h.tweens.length;r<l;r++)h.tweens[r].run(o);return a.notifyWith(t,[h,o,i]),o<1&&l?i:(a.resolveWith(t,[h]),!1)},h=a.promise({elem:t,props:ot.extend({},e),opts:ot.extend(!0,{specialEasing:{},easing:ot.easing._default},i),originalProperties:e,originalOptions:i,startTime:ne||I(),duration:i.duration,tweens:[],createTween:function(e,i){var s=ot.Tween(t,h.opts,e,i,h.opts.specialEasing[e]||h.opts.easing);return h.tweens.push(s),s},stop:function(e){var i=0,s=e?h.tweens.length:0;if(n)return this;for(n=!0;i<s;i++)h.tweens[i].run(1);return e?(a.notifyWith(t,[h,1,0]),a.resolveWith(t,[h,e])):a.rejectWith(t,[h,e]),this}}),c=h.props;for(R(c,h.opts.specialEasing);o<r;o++)if(s=M.prefilters[o].call(h,t,c,h.opts))return ot.isFunction(s.stop)&&(ot._queueHooks(h.elem,h.opts.queue).stop=ot.proxy(s.stop,s)),s;return ot.map(c,P,h),ot.isFunction(h.opts.start)&&h.opts.start.call(t,h),ot.fx.timer(ot.extend(l,{elem:t,anim:h,queue:h.opts.queue})),h.progress(h.opts.progress).done(h.opts.done,h.opts.complete).fail(h.opts.fail).always(h.opts.always)}function H(t){return t.getAttribute&&t.getAttribute("class")||""}function q(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var s,n=0,o=e.toLowerCase().match(wt)||[];if(ot.isFunction(i))for(;s=o[n++];)"+"===s[0]?(s=s.slice(1)||"*",(t[s]=t[s]||[]).unshift(i)):(t[s]=t[s]||[]).push(i)}}function z(t,e,i,s){function n(a){var l;return o[a]=!0,ot.each(t[a]||[],function(t,a){var h=a(e,i,s);return"string"!=typeof h||r||o[h]?r?!(l=h):void 0:(e.dataTypes.unshift(h),n(h),!1)}),l}var o={},r=t===ke;return n(e.dataTypes[0])||!o["*"]&&n("*")}function W(t,e){var i,s,n=ot.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((n[i]?t:s||(s={}))[i]=e[i]);return s&&ot.extend(!0,t,s),t}function B(t,e,i){for(var s,n,o,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===s&&(s=t.mimeType||e.getResponseHeader("Content-Type"));if(s)for(n in a)if(a[n]&&a[n].test(s)){l.unshift(n);break}if(l[0]in i)o=l[0];else{for(n in i){if(!l[0]||t.converters[n+" "+l[0]]){o=n;break}r||(r=n)}o=o||r}if(o)return o!==l[0]&&l.unshift(o),i[o]}function U(t,e,i,s){var n,o,r,a,l,h={},c=t.dataTypes.slice();if(c[1])for(r in t.converters)h[r.toLowerCase()]=t.converters[r];for(o=c.shift();o;)if(t.responseFields[o]&&(i[t.responseFields[o]]=e),!l&&s&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(r=h[l+" "+o]||h["* "+o],!r)for(n in h)if(a=n.split(" "),a[1]===o&&(r=h[l+" "+a[0]]||h["* "+a[0]])){r===!0?r=h[n]:h[n]!==!0&&(o=a[0],c.unshift(a[1]));break}if(r!==!0)if(r&&t["throws"])e=r(e);else try{e=r(e)}catch(p){return{state:"parsererror",error:r?p:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}function V(t,e,i,s){var n;if(ot.isArray(e))ot.each(e,function(e,n){i||Ne.test(t)?s(t,n):V(t+"["+("object"==typeof n&&null!=n?e:"")+"]",n,i,s)});else if(i||"object"!==ot.type(e))s(t,e);else for(n in e)V(t+"["+n+"]",e[n],i,s)}function X(t){return ot.isWindow(t)?t:9===t.nodeType&&t.defaultView}var Q=[],G=t.document,Y=Q.slice,Z=Q.concat,K=Q.push,J=Q.indexOf,tt={},et=tt.toString,it=tt.hasOwnProperty,st={},nt="2.2.4",ot=function(t,e){return new ot.fn.init(t,e)},rt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,at=/^-ms-/,lt=/-([\da-z])/gi,ht=function(t,e){return e.toUpperCase()};ot.fn=ot.prototype={jquery:nt,constructor:ot,selector:"",length:0,toArray:function(){return Y.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:Y.call(this)},pushStack:function(t){var e=ot.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return ot.each(this,t)},map:function(t){return this.pushStack(ot.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(Y.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:K,sort:Q.sort,splice:Q.splice},ot.extend=ot.fn.extend=function(){var t,e,i,s,n,o,r=arguments[0]||{},a=1,l=arguments.length,h=!1;for("boolean"==typeof r&&(h=r,r=arguments[a]||{},a++),"object"==typeof r||ot.isFunction(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=r[e],s=t[e],r!==s&&(h&&s&&(ot.isPlainObject(s)||(n=ot.isArray(s)))?(n?(n=!1,o=i&&ot.isArray(i)?i:[]):o=i&&ot.isPlainObject(i)?i:{},r[e]=ot.extend(h,o,s)):void 0!==s&&(r[e]=s));return r},ot.extend({expando:"jQuery"+(nt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===ot.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=t&&t.toString();return!ot.isArray(t)&&e-parseFloat(e)+1>=0},isPlainObject:function(t){var e;if("object"!==ot.type(t)||t.nodeType||ot.isWindow(t))return!1;if(t.constructor&&!it.call(t,"constructor")&&!it.call(t.constructor.prototype||{},"isPrototypeOf"))return!1;for(e in t);return void 0===e||it.call(t,e)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?tt[et.call(t)]||"object":typeof t},globalEval:function(t){var e,i=eval;t=ot.trim(t),t&&(1===t.indexOf("use strict")?(e=G.createElement("script"),e.text=t,G.head.appendChild(e).parentNode.removeChild(e)):i(t))},camelCase:function(t){return t.replace(at,"ms-").replace(lt,ht)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var s,n=0;if(i(t))for(s=t.length;n<s&&e.call(t[n],n,t[n])!==!1;n++);else for(n in t)if(e.call(t[n],n,t[n])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(rt,"")},makeArray:function(t,e){var s=e||[];return null!=t&&(i(Object(t))?ot.merge(s,"string"==typeof t?[t]:t):K.call(s,t)),s},inArray:function(t,e,i){return null==e?-1:J.call(e,t,i)},merge:function(t,e){for(var i=+e.length,s=0,n=t.length;s<i;s++)t[n++]=e[s];return t.length=n,t},grep:function(t,e,i){for(var s,n=[],o=0,r=t.length,a=!i;o<r;o++)s=!e(t[o],o),s!==a&&n.push(t[o]);return n},map:function(t,e,s){var n,o,r=0,a=[];if(i(t))for(n=t.length;r<n;r++)o=e(t[r],r,s),null!=o&&a.push(o);else for(r in t)o=e(t[r],r,s),null!=o&&a.push(o);return Z.apply([],a)},guid:1,proxy:function(t,e){var i,s,n;if("string"==typeof e&&(i=t[e],e=t,t=i),ot.isFunction(t))return s=Y.call(arguments,2),n=function(){return t.apply(e||this,s.concat(Y.call(arguments)))},n.guid=t.guid=t.guid||ot.guid++,n},now:Date.now,support:st}),"function"==typeof Symbol&&(ot.fn[Symbol.iterator]=Q[Symbol.iterator]),ot.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){tt["[object "+e+"]"]=e.toLowerCase()});var ct=function(t){function e(t,e,i,s){var n,o,r,a,l,h,p,d,f=e&&e.ownerDocument,m=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==m&&9!==m&&11!==m)return i;if(!s&&((e?e.ownerDocument||e:H)!==j&&A(e),e=e||j,I)){if(11!==m&&(h=vt.exec(t)))if(n=h[1]){if(9===m){if(!(r=e.getElementById(n)))return i;if(r.id===n)return i.push(r),i}else if(f&&(r=f.getElementById(n))&&R(e,r)&&r.id===n)return i.push(r),i}else{if(h[2])return K.apply(i,e.getElementsByTagName(t)),i;if((n=h[3])&&w.getElementsByClassName&&e.getElementsByClassName)return K.apply(i,e.getElementsByClassName(n)),i}if(w.qsa&&!U[t+" "]&&(!F||!F.test(t))){if(1!==m)f=e,d=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(yt,"\\$&"):e.setAttribute("id",a=M),p=T(t),o=p.length,l=ut.test(a)?"#"+a:"[id='"+a+"']";o--;)p[o]=l+" "+u(p[o]);d=p.join(","),f=_t.test(t)&&c(e.parentNode)||e}if(d)try{return K.apply(i,f.querySelectorAll(d)),i}catch(g){}finally{a===M&&e.removeAttribute("id")}}}return E(t.replace(at,"$1"),e,i,s)}function i(){function t(i,s){return e.push(i+" ")>x.cacheLength&&delete t[e.shift()],t[i+" "]=s}var e=[];return t}function s(t){return t[M]=!0,t}function n(t){var e=j.createElement("div");try{return!!t(e)}catch(i){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var i=t.split("|"),s=i.length;s--;)x.attrHandle[i[s]]=e}function r(t,e){var i=e&&t,s=i&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||X)-(~t.sourceIndex||X);if(s)return s;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function a(t){return function(e){var i=e.nodeName.toLowerCase();return"input"===i&&e.type===t}}function l(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function h(t){return s(function(e){return e=+e,s(function(i,s){for(var n,o=t([],i.length,e),r=o.length;r--;)i[n=o[r]]&&(i[n]=!(s[n]=i[n]))})})}function c(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function p(){}function u(t){for(var e=0,i=t.length,s="";e<i;e++)s+=t[e].value;return s}function d(t,e,i){var s=e.dir,n=i&&"parentNode"===s,o=z++;return e.first?function(e,i,o){for(;e=e[s];)if(1===e.nodeType||n)return t(e,i,o)}:function(e,i,r){var a,l,h,c=[q,o];if(r){for(;e=e[s];)if((1===e.nodeType||n)&&t(e,i,r))return!0}else for(;e=e[s];)if(1===e.nodeType||n){if(h=e[M]||(e[M]={}),l=h[e.uniqueID]||(h[e.uniqueID]={}),(a=l[s])&&a[0]===q&&a[1]===o)return c[2]=a[2];if(l[s]=c,c[2]=t(e,i,r))return!0}}}function f(t){return t.length>1?function(e,i,s){for(var n=t.length;n--;)if(!t[n](e,i,s))return!1;return!0}:t[0]}function m(t,i,s){for(var n=0,o=i.length;n<o;n++)e(t,i[n],s);return s}function g(t,e,i,s,n){for(var o,r=[],a=0,l=t.length,h=null!=e;a<l;a++)(o=t[a])&&(i&&!i(o,s,n)||(r.push(o),h&&e.push(a)));return r}function v(t,e,i,n,o,r){return n&&!n[M]&&(n=v(n)),o&&!o[M]&&(o=v(o,r)),s(function(s,r,a,l){var h,c,p,u=[],d=[],f=r.length,v=s||m(e||"*",a.nodeType?[a]:a,[]),_=!t||!s&&e?v:g(v,u,t,a,l),y=i?o||(s?t:f||n)?[]:r:_;if(i&&i(_,y,a,l),n)for(h=g(y,d),n(h,[],a,l),c=h.length;c--;)(p=h[c])&&(y[d[c]]=!(_[d[c]]=p));if(s){if(o||t){if(o){for(h=[],c=y.length;c--;)(p=y[c])&&h.push(_[c]=p);o(null,y=[],h,l)}for(c=y.length;c--;)(p=y[c])&&(h=o?tt(s,p):u[c])>-1&&(s[h]=!(r[h]=p))}}else y=g(y===r?y.splice(f,y.length):y),o?o(null,r,y,l):K.apply(r,y)})}function _(t){for(var e,i,s,n=t.length,o=x.relative[t[0].type],r=o||x.relative[" "],a=o?1:0,l=d(function(t){return t===e},r,!0),h=d(function(t){return tt(e,t)>-1},r,!0),c=[function(t,i,s){var n=!o&&(s||i!==S)||((e=i).nodeType?l(t,i,s):h(t,i,s));return e=null,n}];a<n;a++)if(i=x.relative[t[a].type])c=[d(f(c),i)];else{if(i=x.filter[t[a].type].apply(null,t[a].matches),i[M]){for(s=++a;s<n&&!x.relative[t[s].type];s++);return v(a>1&&f(c),a>1&&u(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(at,"$1"),i,a<s&&_(t.slice(a,s)),s<n&&_(t=t.slice(s)),s<n&&u(t))}c.push(i)}return f(c)}function y(t,i){var n=i.length>0,o=t.length>0,r=function(s,r,a,l,h){var c,p,u,d=0,f="0",m=s&&[],v=[],_=S,y=s||o&&x.find.TAG("*",h),b=q+=null==_?1:Math.random()||.1,w=y.length;for(h&&(S=r===j||r||h);f!==w&&null!=(c=y[f]);f++){if(o&&c){for(p=0,r||c.ownerDocument===j||(A(c),a=!I);u=t[p++];)if(u(c,r||j,a)){l.push(c);break}h&&(q=b)}n&&((c=!u&&c)&&d--,s&&m.push(c))}if(d+=f,n&&f!==d){for(p=0;u=i[p++];)u(m,v,r,a);if(s){if(d>0)for(;f--;)m[f]||v[f]||(v[f]=Y.call(l));v=g(v)}K.apply(l,v),h&&!s&&v.length>0&&d+i.length>1&&e.uniqueSort(l)}return h&&(q=b,S=_),m};return n?s(r):r}var b,w,x,$,C,T,k,E,S,D,N,A,j,O,I,F,P,L,R,M="sizzle"+1*new Date,H=t.document,q=0,z=0,W=i(),B=i(),U=i(),V=function(t,e){return t===e&&(N=!0),0},X=1<<31,Q={}.hasOwnProperty,G=[],Y=G.pop,Z=G.push,K=G.push,J=G.slice,tt=function(t,e){for(var i=0,s=t.length;i<s;i++)if(t[i]===e)return i;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",it="[\\x20\\t\\r\\n\\f]",st="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",nt="\\["+it+"*("+st+")(?:"+it+"*([*^$|!~]?=)"+it+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+st+"))|)"+it+"*\\]",ot=":("+st+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+nt+")*)|.*)\\)|)",rt=new RegExp(it+"+","g"),at=new RegExp("^"+it+"+|((?:^|[^\\\\])(?:\\\\.)*)"+it+"+$","g"),lt=new RegExp("^"+it+"*,"+it+"*"),ht=new RegExp("^"+it+"*([>+~]|"+it+")"+it+"*"),ct=new RegExp("="+it+"*([^\\]'\"]*?)"+it+"*\\]","g"),pt=new RegExp(ot),ut=new RegExp("^"+st+"$"),dt={ID:new RegExp("^#("+st+")"),CLASS:new RegExp("^\\.("+st+")"),TAG:new RegExp("^("+st+"|[*])"),ATTR:new RegExp("^"+nt),PSEUDO:new RegExp("^"+ot),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+it+"*(even|odd|(([+-]|)(\\d*)n|)"+it+"*(?:([+-]|)"+it+"*(\\d+)|))"+it+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+it+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+it+"*((?:-\\d)?\\d*)"+it+"*\\)|)(?=[^-]|$)","i")},ft=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,gt=/^[^{]+\{\s*\[native \w/,vt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_t=/[+~]/,yt=/'|\\/g,bt=new RegExp("\\\\([\\da-f]{1,6}"+it+"?|("+it+")|.)","ig"),wt=function(t,e,i){var s="0x"+e-65536;return s!==s||i?e:s<0?String.fromCharCode(s+65536):String.fromCharCode(s>>10|55296,1023&s|56320)},xt=function(){A()};try{K.apply(G=J.call(H.childNodes),H.childNodes),G[H.childNodes.length].nodeType}catch($t){K={apply:G.length?function(t,e){Z.apply(t,J.call(e))}:function(t,e){for(var i=t.length,s=0;t[i++]=e[s++];);t.length=i-1}}}w=e.support={},C=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},A=e.setDocument=function(t){var e,i,s=t?t.ownerDocument||t:H;return s!==j&&9===s.nodeType&&s.documentElement?(j=s,O=j.documentElement,I=!C(j),(i=j.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",xt,!1):i.attachEvent&&i.attachEvent("onunload",xt)),w.attributes=n(function(t){return t.className="i",!t.getAttribute("className")}),w.getElementsByTagName=n(function(t){return t.appendChild(j.createComment("")),!t.getElementsByTagName("*").length}),w.getElementsByClassName=gt.test(j.getElementsByClassName),w.getById=n(function(t){return O.appendChild(t).id=M,!j.getElementsByName||!j.getElementsByName(M).length}),w.getById?(x.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&I){var i=e.getElementById(t);return i?[i]:[]}},x.filter.ID=function(t){var e=t.replace(bt,wt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(bt,wt);return function(t){var i="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}}),x.find.TAG=w.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):w.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,s=[],n=0,o=e.getElementsByTagName(t);if("*"===t){for(;i=o[n++];)1===i.nodeType&&s.push(i);return s}return o},x.find.CLASS=w.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&I)return e.getElementsByClassName(t)},P=[],F=[],(w.qsa=gt.test(j.querySelectorAll))&&(n(function(t){O.appendChild(t).innerHTML="<a id='"+M+"'></a><select id='"+M+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&F.push("[*^$]="+it+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||F.push("\\["+it+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+M+"-]").length||F.push("~="),t.querySelectorAll(":checked").length||F.push(":checked"),t.querySelectorAll("a#"+M+"+*").length||F.push(".#.+[+~]")}),n(function(t){var e=j.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&F.push("name"+it+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||F.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),F.push(",.*:")})),(w.matchesSelector=gt.test(L=O.matches||O.webkitMatchesSelector||O.mozMatchesSelector||O.oMatchesSelector||O.msMatchesSelector))&&n(function(t){w.disconnectedMatch=L.call(t,"div"),L.call(t,"[s!='']:x"),P.push("!=",ot)}),F=F.length&&new RegExp(F.join("|")),P=P.length&&new RegExp(P.join("|")),e=gt.test(O.compareDocumentPosition),R=e||gt.test(O.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,s=e&&e.parentNode;return t===s||!(!s||1!==s.nodeType||!(i.contains?i.contains(s):t.compareDocumentPosition&&16&t.compareDocumentPosition(s)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},V=e?function(t,e){if(t===e)return N=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i?i:(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&i||!w.sortDetached&&e.compareDocumentPosition(t)===i?t===j||t.ownerDocument===H&&R(H,t)?-1:e===j||e.ownerDocument===H&&R(H,e)?1:D?tt(D,t)-tt(D,e):0:4&i?-1:1)}:function(t,e){if(t===e)return N=!0,0;var i,s=0,n=t.parentNode,o=e.parentNode,a=[t],l=[e];if(!n||!o)return t===j?-1:e===j?1:n?-1:o?1:D?tt(D,t)-tt(D,e):0;if(n===o)return r(t,e);for(i=t;i=i.parentNode;)a.unshift(i);for(i=e;i=i.parentNode;)l.unshift(i);for(;a[s]===l[s];)s++;return s?r(a[s],l[s]):a[s]===H?-1:l[s]===H?1:0},j):j},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==j&&A(t),i=i.replace(ct,"='$1']"),w.matchesSelector&&I&&!U[i+" "]&&(!P||!P.test(i))&&(!F||!F.test(i)))try{var s=L.call(t,i);if(s||w.disconnectedMatch||t.document&&11!==t.document.nodeType)return s}catch(n){}return e(i,j,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==j&&A(t),R(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==j&&A(t);var i=x.attrHandle[e.toLowerCase()],s=i&&Q.call(x.attrHandle,e.toLowerCase())?i(t,e,!I):void 0;return void 0!==s?s:w.attributes||!I?t.getAttribute(e):(s=t.getAttributeNode(e))&&s.specified?s.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],s=0,n=0;if(N=!w.detectDuplicates,D=!w.sortStable&&t.slice(0),t.sort(V),N){for(;e=t[n++];)e===t[n]&&(s=i.push(n));for(;s--;)t.splice(i[s],1)}return D=null,t},$=e.getText=function(t){var e,i="",s=0,n=t.nodeType;if(n){if(1===n||9===n||11===n){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=$(t)}else if(3===n||4===n)return t.nodeValue}else for(;e=t[s++];)i+=$(e);return i},x=e.selectors={cacheLength:50,createPseudo:s,match:dt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(bt,wt),t[3]=(t[3]||t[4]||t[5]||"").replace(bt,wt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return dt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&pt.test(i)&&(e=T(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(bt,wt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+it+")"+t+"("+it+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,i,s){return function(n){var o=e.attr(n,t);return null==o?"!="===i:!i||(o+="","="===i?o===s:"!="===i?o!==s:"^="===i?s&&0===o.indexOf(s):"*="===i?s&&o.indexOf(s)>-1:"$="===i?s&&o.slice(-s.length)===s:"~="===i?(" "+o.replace(rt," ")+" ").indexOf(s)>-1:"|="===i&&(o===s||o.slice(0,s.length+1)===s+"-"))}},CHILD:function(t,e,i,s,n){var o="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===e;return 1===s&&0===n?function(t){return!!t.parentNode}:function(e,i,l){var h,c,p,u,d,f,m=o!==r?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),_=!l&&!a,y=!1;if(g){if(o){for(;m;){for(u=e;u=u[m];)if(a?u.nodeName.toLowerCase()===v:1===u.nodeType)return!1;f=m="only"===t&&!f&&"nextSibling"}return!0}if(f=[r?g.firstChild:g.lastChild],r&&_){for(u=g,p=u[M]||(u[M]={}),c=p[u.uniqueID]||(p[u.uniqueID]={}),h=c[t]||[],d=h[0]===q&&h[1],y=d&&h[2],u=d&&g.childNodes[d];u=++d&&u&&u[m]||(y=d=0)||f.pop();)if(1===u.nodeType&&++y&&u===e){c[t]=[q,d,y];break}}else if(_&&(u=e,p=u[M]||(u[M]={}),
c=p[u.uniqueID]||(p[u.uniqueID]={}),h=c[t]||[],d=h[0]===q&&h[1],y=d),y===!1)for(;(u=++d&&u&&u[m]||(y=d=0)||f.pop())&&((a?u.nodeName.toLowerCase()!==v:1!==u.nodeType)||!++y||(_&&(p=u[M]||(u[M]={}),c=p[u.uniqueID]||(p[u.uniqueID]={}),c[t]=[q,y]),u!==e)););return y-=n,y===s||y%s===0&&y/s>=0}}},PSEUDO:function(t,i){var n,o=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[M]?o(i):o.length>1?(n=[t,t,"",i],x.setFilters.hasOwnProperty(t.toLowerCase())?s(function(t,e){for(var s,n=o(t,i),r=n.length;r--;)s=tt(t,n[r]),t[s]=!(e[s]=n[r])}):function(t){return o(t,0,n)}):o}},pseudos:{not:s(function(t){var e=[],i=[],n=k(t.replace(at,"$1"));return n[M]?s(function(t,e,i,s){for(var o,r=n(t,null,s,[]),a=t.length;a--;)(o=r[a])&&(t[a]=!(e[a]=o))}):function(t,s,o){return e[0]=t,n(e,null,o,i),e[0]=null,!i.pop()}}),has:s(function(t){return function(i){return e(t,i).length>0}}),contains:s(function(t){return t=t.replace(bt,wt),function(e){return(e.textContent||e.innerText||$(e)).indexOf(t)>-1}}),lang:s(function(t){return ut.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(bt,wt).toLowerCase(),function(e){var i;do if(i=I?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return i=i.toLowerCase(),i===t||0===i.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===O},focus:function(t){return t===j.activeElement&&(!j.hasFocus||j.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return ft.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:h(function(){return[0]}),last:h(function(t,e){return[e-1]}),eq:h(function(t,e,i){return[i<0?i+e:i]}),even:h(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:h(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:h(function(t,e,i){for(var s=i<0?i+e:i;--s>=0;)t.push(s);return t}),gt:h(function(t,e,i){for(var s=i<0?i+e:i;++s<e;)t.push(s);return t})}},x.pseudos.nth=x.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})x.pseudos[b]=l(b);return p.prototype=x.filters=x.pseudos,x.setFilters=new p,T=e.tokenize=function(t,i){var s,n,o,r,a,l,h,c=B[t+" "];if(c)return i?0:c.slice(0);for(a=t,l=[],h=x.preFilter;a;){s&&!(n=lt.exec(a))||(n&&(a=a.slice(n[0].length)||a),l.push(o=[])),s=!1,(n=ht.exec(a))&&(s=n.shift(),o.push({value:s,type:n[0].replace(at," ")}),a=a.slice(s.length));for(r in x.filter)!(n=dt[r].exec(a))||h[r]&&!(n=h[r](n))||(s=n.shift(),o.push({value:s,type:r,matches:n}),a=a.slice(s.length));if(!s)break}return i?a.length:a?e.error(t):B(t,l).slice(0)},k=e.compile=function(t,e){var i,s=[],n=[],o=U[t+" "];if(!o){for(e||(e=T(t)),i=e.length;i--;)o=_(e[i]),o[M]?s.push(o):n.push(o);o=U(t,y(n,s)),o.selector=t}return o},E=e.select=function(t,e,i,s){var n,o,r,a,l,h="function"==typeof t&&t,p=!s&&T(t=h.selector||t);if(i=i||[],1===p.length){if(o=p[0]=p[0].slice(0),o.length>2&&"ID"===(r=o[0]).type&&w.getById&&9===e.nodeType&&I&&x.relative[o[1].type]){if(e=(x.find.ID(r.matches[0].replace(bt,wt),e)||[])[0],!e)return i;h&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(n=dt.needsContext.test(t)?0:o.length;n--&&(r=o[n],!x.relative[a=r.type]);)if((l=x.find[a])&&(s=l(r.matches[0].replace(bt,wt),_t.test(o[0].type)&&c(e.parentNode)||e))){if(o.splice(n,1),t=s.length&&u(o),!t)return K.apply(i,s),i;break}}return(h||k(t,p))(s,e,!I,i,!e||_t.test(t)&&c(e.parentNode)||e),i},w.sortStable=M.split("").sort(V).join("")===M,w.detectDuplicates=!!N,A(),w.sortDetached=n(function(t){return 1&t.compareDocumentPosition(j.createElement("div"))}),n(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),w.attributes&&n(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),n(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,i){var s;if(!i)return t[e]===!0?e.toLowerCase():(s=t.getAttributeNode(e))&&s.specified?s.value:null}),e}(t);ot.find=ct,ot.expr=ct.selectors,ot.expr[":"]=ot.expr.pseudos,ot.uniqueSort=ot.unique=ct.uniqueSort,ot.text=ct.getText,ot.isXMLDoc=ct.isXML,ot.contains=ct.contains;var pt=function(t,e,i){for(var s=[],n=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(n&&ot(t).is(i))break;s.push(t)}return s},ut=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},dt=ot.expr.match.needsContext,ft=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,mt=/^.[^:#\[\.,]*$/;ot.filter=function(t,e,i){var s=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===s.nodeType?ot.find.matchesSelector(s,t)?[s]:[]:ot.find.matches(t,ot.grep(e,function(t){return 1===t.nodeType}))},ot.fn.extend({find:function(t){var e,i=this.length,s=[],n=this;if("string"!=typeof t)return this.pushStack(ot(t).filter(function(){for(e=0;e<i;e++)if(ot.contains(n[e],this))return!0}));for(e=0;e<i;e++)ot.find(t,n[e],s);return s=this.pushStack(i>1?ot.unique(s):s),s.selector=this.selector?this.selector+" "+t:t,s},filter:function(t){return this.pushStack(s(this,t||[],!1))},not:function(t){return this.pushStack(s(this,t||[],!0))},is:function(t){return!!s(this,"string"==typeof t&&dt.test(t)?ot(t):t||[],!1).length}});var gt,vt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,_t=ot.fn.init=function(t,e,i){var s,n;if(!t)return this;if(i=i||gt,"string"==typeof t){if(s="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:vt.exec(t),!s||!s[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(s[1]){if(e=e instanceof ot?e[0]:e,ot.merge(this,ot.parseHTML(s[1],e&&e.nodeType?e.ownerDocument||e:G,!0)),ft.test(s[1])&&ot.isPlainObject(e))for(s in e)ot.isFunction(this[s])?this[s](e[s]):this.attr(s,e[s]);return this}return n=G.getElementById(s[2]),n&&n.parentNode&&(this.length=1,this[0]=n),this.context=G,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):ot.isFunction(t)?void 0!==i.ready?i.ready(t):t(ot):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),ot.makeArray(t,this))};_t.prototype=ot.fn,gt=ot(G);var yt=/^(?:parents|prev(?:Until|All))/,bt={children:!0,contents:!0,next:!0,prev:!0};ot.fn.extend({has:function(t){var e=ot(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(ot.contains(this,e[t]))return!0})},closest:function(t,e){for(var i,s=0,n=this.length,o=[],r=dt.test(t)||"string"!=typeof t?ot(t,e||this.context):0;s<n;s++)for(i=this[s];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?r.index(i)>-1:1===i.nodeType&&ot.find.matchesSelector(i,t))){o.push(i);break}return this.pushStack(o.length>1?ot.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?J.call(ot(t),this[0]):J.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(ot.uniqueSort(ot.merge(this.get(),ot(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),ot.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return pt(t,"parentNode")},parentsUntil:function(t,e,i){return pt(t,"parentNode",i)},next:function(t){return n(t,"nextSibling")},prev:function(t){return n(t,"previousSibling")},nextAll:function(t){return pt(t,"nextSibling")},prevAll:function(t){return pt(t,"previousSibling")},nextUntil:function(t,e,i){return pt(t,"nextSibling",i)},prevUntil:function(t,e,i){return pt(t,"previousSibling",i)},siblings:function(t){return ut((t.parentNode||{}).firstChild,t)},children:function(t){return ut(t.firstChild)},contents:function(t){return t.contentDocument||ot.merge([],t.childNodes)}},function(t,e){ot.fn[t]=function(i,s){var n=ot.map(this,e,i);return"Until"!==t.slice(-5)&&(s=i),s&&"string"==typeof s&&(n=ot.filter(s,n)),this.length>1&&(bt[t]||ot.uniqueSort(n),yt.test(t)&&n.reverse()),this.pushStack(n)}});var wt=/\S+/g;ot.Callbacks=function(t){t="string"==typeof t?o(t):ot.extend({},t);var e,i,s,n,r=[],a=[],l=-1,h=function(){for(n=t.once,s=e=!0;a.length;l=-1)for(i=a.shift();++l<r.length;)r[l].apply(i[0],i[1])===!1&&t.stopOnFalse&&(l=r.length,i=!1);t.memory||(i=!1),e=!1,n&&(r=i?[]:"")},c={add:function(){return r&&(i&&!e&&(l=r.length-1,a.push(i)),function s(e){ot.each(e,function(e,i){ot.isFunction(i)?t.unique&&c.has(i)||r.push(i):i&&i.length&&"string"!==ot.type(i)&&s(i)})}(arguments),i&&!e&&h()),this},remove:function(){return ot.each(arguments,function(t,e){for(var i;(i=ot.inArray(e,r,i))>-1;)r.splice(i,1),i<=l&&l--}),this},has:function(t){return t?ot.inArray(t,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return n=a=[],r=i="",this},disabled:function(){return!r},lock:function(){return n=a=[],i||(r=i=""),this},locked:function(){return!!n},fireWith:function(t,i){return n||(i=i||[],i=[t,i.slice?i.slice():i],a.push(i),e||h()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!s}};return c},ot.extend({Deferred:function(t){var e=[["resolve","done",ot.Callbacks("once memory"),"resolved"],["reject","fail",ot.Callbacks("once memory"),"rejected"],["notify","progress",ot.Callbacks("memory")]],i="pending",s={state:function(){return i},always:function(){return n.done(arguments).fail(arguments),this},then:function(){var t=arguments;return ot.Deferred(function(i){ot.each(e,function(e,o){var r=ot.isFunction(t[e])&&t[e];n[o[1]](function(){var t=r&&r.apply(this,arguments);t&&ot.isFunction(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[o[0]+"With"](this===s?i.promise():this,r?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?ot.extend(t,s):s}},n={};return s.pipe=s.then,ot.each(e,function(t,o){var r=o[2],a=o[3];s[o[1]]=r.add,a&&r.add(function(){i=a},e[1^t][2].disable,e[2][2].lock),n[o[0]]=function(){return n[o[0]+"With"](this===n?s:this,arguments),this},n[o[0]+"With"]=r.fireWith}),s.promise(n),t&&t.call(n,n),n},when:function(t){var e,i,s,n=0,o=Y.call(arguments),r=o.length,a=1!==r||t&&ot.isFunction(t.promise)?r:0,l=1===a?t:ot.Deferred(),h=function(t,i,s){return function(n){i[t]=this,s[t]=arguments.length>1?Y.call(arguments):n,s===e?l.notifyWith(i,s):--a||l.resolveWith(i,s)}};if(r>1)for(e=new Array(r),i=new Array(r),s=new Array(r);n<r;n++)o[n]&&ot.isFunction(o[n].promise)?o[n].promise().progress(h(n,i,e)).done(h(n,s,o)).fail(l.reject):--a;return a||l.resolveWith(s,o),l.promise()}});var xt;ot.fn.ready=function(t){return ot.ready.promise().done(t),this},ot.extend({isReady:!1,readyWait:1,holdReady:function(t){t?ot.readyWait++:ot.ready(!0)},ready:function(t){(t===!0?--ot.readyWait:ot.isReady)||(ot.isReady=!0,t!==!0&&--ot.readyWait>0||(xt.resolveWith(G,[ot]),ot.fn.triggerHandler&&(ot(G).triggerHandler("ready"),ot(G).off("ready"))))}}),ot.ready.promise=function(e){return xt||(xt=ot.Deferred(),"complete"===G.readyState||"loading"!==G.readyState&&!G.documentElement.doScroll?t.setTimeout(ot.ready):(G.addEventListener("DOMContentLoaded",r),t.addEventListener("load",r))),xt.promise(e)},ot.ready.promise();var $t=function(t,e,i,s,n,o,r){var a=0,l=t.length,h=null==i;if("object"===ot.type(i)){n=!0;for(a in i)$t(t,e,a,i[a],!0,o,r)}else if(void 0!==s&&(n=!0,ot.isFunction(s)||(r=!0),h&&(r?(e.call(t,s),e=null):(h=e,e=function(t,e,i){return h.call(ot(t),i)})),e))for(;a<l;a++)e(t[a],i,r?s:s.call(t[a],a,e(t[a],i)));return n?t:h?e.call(t):l?e(t[0],i):o},Ct=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};a.uid=1,a.prototype={register:function(t,e){var i=e||{};return t.nodeType?t[this.expando]=i:Object.defineProperty(t,this.expando,{value:i,writable:!0,configurable:!0}),t[this.expando]},cache:function(t){if(!Ct(t))return{};var e=t[this.expando];return e||(e={},Ct(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var s,n=this.cache(t);if("string"==typeof e)n[e]=i;else for(s in e)n[s]=e[s];return n},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][e]},access:function(t,e,i){var s;return void 0===e||e&&"string"==typeof e&&void 0===i?(s=this.get(t,e),void 0!==s?s:this.get(t,ot.camelCase(e))):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,s,n,o=t[this.expando];if(void 0!==o){if(void 0===e)this.register(t);else{ot.isArray(e)?s=e.concat(e.map(ot.camelCase)):(n=ot.camelCase(e),e in o?s=[e,n]:(s=n,s=s in o?[s]:s.match(wt)||[])),i=s.length;for(;i--;)delete o[s[i]]}(void 0===e||ot.isEmptyObject(o))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!ot.isEmptyObject(e)}};var Tt=new a,kt=new a,Et=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,St=/[A-Z]/g;ot.extend({hasData:function(t){return kt.hasData(t)||Tt.hasData(t)},data:function(t,e,i){return kt.access(t,e,i)},removeData:function(t,e){kt.remove(t,e)},_data:function(t,e,i){return Tt.access(t,e,i)},_removeData:function(t,e){Tt.remove(t,e)}}),ot.fn.extend({data:function(t,e){var i,s,n,o=this[0],r=o&&o.attributes;if(void 0===t){if(this.length&&(n=kt.get(o),1===o.nodeType&&!Tt.get(o,"hasDataAttrs"))){for(i=r.length;i--;)r[i]&&(s=r[i].name,0===s.indexOf("data-")&&(s=ot.camelCase(s.slice(5)),l(o,s,n[s])));Tt.set(o,"hasDataAttrs",!0)}return n}return"object"==typeof t?this.each(function(){kt.set(this,t)}):$t(this,function(e){var i,s;if(o&&void 0===e){if(i=kt.get(o,t)||kt.get(o,t.replace(St,"-$&").toLowerCase()),void 0!==i)return i;if(s=ot.camelCase(t),i=kt.get(o,s),void 0!==i)return i;if(i=l(o,s,void 0),void 0!==i)return i}else s=ot.camelCase(t),this.each(function(){var i=kt.get(this,s);kt.set(this,s,e),t.indexOf("-")>-1&&void 0!==i&&kt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){kt.remove(this,t)})}}),ot.extend({queue:function(t,e,i){var s;if(t)return e=(e||"fx")+"queue",s=Tt.get(t,e),i&&(!s||ot.isArray(i)?s=Tt.access(t,e,ot.makeArray(i)):s.push(i)),s||[]},dequeue:function(t,e){e=e||"fx";var i=ot.queue(t,e),s=i.length,n=i.shift(),o=ot._queueHooks(t,e),r=function(){ot.dequeue(t,e)};"inprogress"===n&&(n=i.shift(),s--),n&&("fx"===e&&i.unshift("inprogress"),delete o.stop,n.call(t,r,o)),!s&&o&&o.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return Tt.get(t,i)||Tt.access(t,i,{empty:ot.Callbacks("once memory").add(function(){Tt.remove(t,[e+"queue",i])})})}}),ot.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?ot.queue(this[0],t):void 0===e?this:this.each(function(){var i=ot.queue(this,t,e);ot._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&ot.dequeue(this,t)})},dequeue:function(t){return this.each(function(){ot.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,s=1,n=ot.Deferred(),o=this,r=this.length,a=function(){--s||n.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)i=Tt.get(o[r],t+"queueHooks"),i&&i.empty&&(s++,i.empty.add(a));return a(),n.promise(e)}});var Dt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Nt=new RegExp("^(?:([+-])=|)("+Dt+")([a-z%]*)$","i"),At=["Top","Right","Bottom","Left"],jt=function(t,e){return t=e||t,"none"===ot.css(t,"display")||!ot.contains(t.ownerDocument,t)},Ot=/^(?:checkbox|radio)$/i,It=/<([\w:-]+)/,Ft=/^$|\/(?:java|ecma)script/i,Pt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Pt.optgroup=Pt.option,Pt.tbody=Pt.tfoot=Pt.colgroup=Pt.caption=Pt.thead,Pt.th=Pt.td;var Lt=/<|&#?\w+;/;!function(){var t=G.createDocumentFragment(),e=t.appendChild(G.createElement("div")),i=G.createElement("input");i.setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),e.appendChild(i),st.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",st.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Rt=/^key/,Mt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ht=/^([^.]*)(?:\.(.+)|)/;ot.event={global:{},add:function(t,e,i,s,n){var o,r,a,l,h,c,p,u,d,f,m,g=Tt.get(t);if(g)for(i.handler&&(o=i,i=o.handler,n=o.selector),i.guid||(i.guid=ot.guid++),(l=g.events)||(l=g.events={}),(r=g.handle)||(r=g.handle=function(e){return"undefined"!=typeof ot&&ot.event.triggered!==e.type?ot.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(wt)||[""],h=e.length;h--;)a=Ht.exec(e[h])||[],d=m=a[1],f=(a[2]||"").split(".").sort(),d&&(p=ot.event.special[d]||{},d=(n?p.delegateType:p.bindType)||d,p=ot.event.special[d]||{},c=ot.extend({type:d,origType:m,data:s,handler:i,guid:i.guid,selector:n,needsContext:n&&ot.expr.match.needsContext.test(n),namespace:f.join(".")},o),(u=l[d])||(u=l[d]=[],u.delegateCount=0,p.setup&&p.setup.call(t,s,f,r)!==!1||t.addEventListener&&t.addEventListener(d,r)),p.add&&(p.add.call(t,c),c.handler.guid||(c.handler.guid=i.guid)),n?u.splice(u.delegateCount++,0,c):u.push(c),ot.event.global[d]=!0)},remove:function(t,e,i,s,n){var o,r,a,l,h,c,p,u,d,f,m,g=Tt.hasData(t)&&Tt.get(t);if(g&&(l=g.events)){for(e=(e||"").match(wt)||[""],h=e.length;h--;)if(a=Ht.exec(e[h])||[],d=m=a[1],f=(a[2]||"").split(".").sort(),d){for(p=ot.event.special[d]||{},d=(s?p.delegateType:p.bindType)||d,u=l[d]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=u.length;o--;)c=u[o],!n&&m!==c.origType||i&&i.guid!==c.guid||a&&!a.test(c.namespace)||s&&s!==c.selector&&("**"!==s||!c.selector)||(u.splice(o,1),c.selector&&u.delegateCount--,p.remove&&p.remove.call(t,c));r&&!u.length&&(p.teardown&&p.teardown.call(t,f,g.handle)!==!1||ot.removeEvent(t,d,g.handle),delete l[d])}else for(d in l)ot.event.remove(t,d+e[h],i,s,!0);ot.isEmptyObject(l)&&Tt.remove(t,"handle events")}},dispatch:function(t){t=ot.event.fix(t);var e,i,s,n,o,r=[],a=Y.call(arguments),l=(Tt.get(this,"events")||{})[t.type]||[],h=ot.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!h.preDispatch||h.preDispatch.call(this,t)!==!1){for(r=ot.event.handlers.call(this,t,l),e=0;(n=r[e++])&&!t.isPropagationStopped();)for(t.currentTarget=n.elem,i=0;(o=n.handlers[i++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(o.namespace)||(t.handleObj=o,t.data=o.data,s=((ot.event.special[o.origType]||{}).handle||o.handler).apply(n.elem,a),void 0!==s&&(t.result=s)===!1&&(t.preventDefault(),t.stopPropagation()));return h.postDispatch&&h.postDispatch.call(this,t),t.result}},handlers:function(t,e){var i,s,n,o,r=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==t.type)){for(s=[],i=0;i<a;i++)o=e[i],n=o.selector+" ",void 0===s[n]&&(s[n]=o.needsContext?ot(n,this).index(l)>-1:ot.find(n,this,null,[l]).length),s[n]&&s.push(o);s.length&&r.push({elem:l,handlers:s})}return a<e.length&&r.push({elem:this,handlers:e.slice(a)}),r},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var i,s,n,o=e.button;return null==t.pageX&&null!=e.clientX&&(i=t.target.ownerDocument||G,s=i.documentElement,n=i.body,t.pageX=e.clientX+(s&&s.scrollLeft||n&&n.scrollLeft||0)-(s&&s.clientLeft||n&&n.clientLeft||0),t.pageY=e.clientY+(s&&s.scrollTop||n&&n.scrollTop||0)-(s&&s.clientTop||n&&n.clientTop||0)),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},fix:function(t){if(t[ot.expando])return t;var e,i,s,n=t.type,o=t,r=this.fixHooks[n];for(r||(this.fixHooks[n]=r=Mt.test(n)?this.mouseHooks:Rt.test(n)?this.keyHooks:{}),s=r.props?this.props.concat(r.props):this.props,t=new ot.Event(o),e=s.length;e--;)i=s[e],t[i]=o[i];return t.target||(t.target=G),3===t.target.nodeType&&(t.target=t.target.parentNode),r.filter?r.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==m()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===m()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&ot.nodeName(this,"input"))return this.click(),!1},_default:function(t){return ot.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},ot.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},ot.Event=function(t,e){return this instanceof ot.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?d:f):this.type=t,e&&ot.extend(this,e),this.timeStamp=t&&t.timeStamp||ot.now(),void(this[ot.expando]=!0)):new ot.Event(t,e)},ot.Event.prototype={constructor:ot.Event,isDefaultPrevented:f,isPropagationStopped:f,isImmediatePropagationStopped:f,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=d,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=d,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=d,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},ot.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){ot.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,s=this,n=t.relatedTarget,o=t.handleObj;return n&&(n===s||ot.contains(s,n))||(t.type=o.origType,i=o.handler.apply(this,arguments),t.type=e),i}}}),ot.fn.extend({on:function(t,e,i,s){return g(this,t,e,i,s)},one:function(t,e,i,s){return g(this,t,e,i,s,1)},off:function(t,e,i){var s,n;if(t&&t.preventDefault&&t.handleObj)return s=t.handleObj,ot(t.delegateTarget).off(s.namespace?s.origType+"."+s.namespace:s.origType,s.selector,s.handler),this;if("object"==typeof t){for(n in t)this.off(n,e,t[n]);return this}return e!==!1&&"function"!=typeof e||(i=e,e=void 0),i===!1&&(i=f),this.each(function(){ot.event.remove(this,t,i,e)})}});var qt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,zt=/<script|<style|<link/i,Wt=/checked\s*(?:[^=]|=\s*.checked.)/i,Bt=/^true\/(.*)/,Ut=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ot.extend({htmlPrefilter:function(t){return t.replace(qt,"<$1></$2>")},clone:function(t,e,i){var s,n,o,r,a=t.cloneNode(!0),l=ot.contains(t.ownerDocument,t);if(!(st.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||ot.isXMLDoc(t)))for(r=c(a),o=c(t),s=0,n=o.length;s<n;s++)w(o[s],r[s]);if(e)if(i)for(o=o||c(t),r=r||c(a),s=0,n=o.length;s<n;s++)b(o[s],r[s]);else b(t,a);return r=c(a,"script"),r.length>0&&p(r,!l&&c(t,"script")),a},cleanData:function(t){for(var e,i,s,n=ot.event.special,o=0;void 0!==(i=t[o]);o++)if(Ct(i)){if(e=i[Tt.expando]){if(e.events)for(s in e.events)n[s]?ot.event.remove(i,s):ot.removeEvent(i,s,e.handle);i[Tt.expando]=void 0}i[kt.expando]&&(i[kt.expando]=void 0)}}}),ot.fn.extend({domManip:x,detach:function(t){return $(this,t,!0)},remove:function(t){return $(this,t)},text:function(t){return $t(this,function(t){return void 0===t?ot.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return x(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=v(this,t);e.appendChild(t)}})},prepend:function(){return x(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=v(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return x(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return x(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(ot.cleanData(c(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return ot.clone(this,t,e)})},html:function(t){return $t(this,function(t){var e=this[0]||{},i=0,s=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!zt.test(t)&&!Pt[(It.exec(t)||["",""])[1].toLowerCase()]){t=ot.htmlPrefilter(t);try{for(;i<s;i++)e=this[i]||{},1===e.nodeType&&(ot.cleanData(c(e,!1)),e.innerHTML=t);e=0}catch(n){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return x(this,arguments,function(e){var i=this.parentNode;ot.inArray(this,t)<0&&(ot.cleanData(c(this)),i&&i.replaceChild(e,this))},t)}}),ot.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){ot.fn[t]=function(t){for(var i,s=[],n=ot(t),o=n.length-1,r=0;r<=o;r++)i=r===o?this:this.clone(!0),ot(n[r])[e](i),K.apply(s,i.get());return this.pushStack(s)}});var Vt,Xt={HTML:"block",BODY:"block"},Qt=/^margin/,Gt=new RegExp("^("+Dt+")(?!px)[a-z%]+$","i"),Yt=function(e){var i=e.ownerDocument.defaultView;return i&&i.opener||(i=t),i.getComputedStyle(e)},Zt=function(t,e,i,s){var n,o,r={};for(o in e)r[o]=t.style[o],t.style[o]=e[o];n=i.apply(t,s||[]);for(o in e)t.style[o]=r[o];return n},Kt=G.documentElement;!function(){function e(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Kt.appendChild(r);var e=t.getComputedStyle(a);i="1%"!==e.top,o="2px"===e.marginLeft,s="4px"===e.width,a.style.marginRight="50%",n="4px"===e.marginRight,Kt.removeChild(r)}var i,s,n,o,r=G.createElement("div"),a=G.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",st.clearCloneStyle="content-box"===a.style.backgroundClip,r.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",r.appendChild(a),ot.extend(st,{pixelPosition:function(){return e(),i},boxSizingReliable:function(){return null==s&&e(),s},pixelMarginRight:function(){return null==s&&e(),n},reliableMarginLeft:function(){return null==s&&e(),o},reliableMarginRight:function(){var e,i=a.appendChild(G.createElement("div"));return i.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",a.style.width="1px",Kt.appendChild(r),e=!parseFloat(t.getComputedStyle(i).marginRight),Kt.removeChild(r),a.removeChild(i),e}}))}();var Jt=/^(none|table(?!-c[ea]).+)/,te={position:"absolute",visibility:"hidden",display:"block"},ee={letterSpacing:"0",fontWeight:"400"},ie=["Webkit","O","Moz","ms"],se=G.createElement("div").style;ot.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=k(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,i,s){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var n,o,r,a=ot.camelCase(e),l=t.style;return e=ot.cssProps[a]||(ot.cssProps[a]=S(a)||a),r=ot.cssHooks[e]||ot.cssHooks[a],void 0===i?r&&"get"in r&&void 0!==(n=r.get(t,!1,s))?n:l[e]:(o=typeof i,"string"===o&&(n=Nt.exec(i))&&n[1]&&(i=h(t,e,n),o="number"),null!=i&&i===i&&("number"===o&&(i+=n&&n[3]||(ot.cssNumber[a]?"":"px")),st.clearCloneStyle||""!==i||0!==e.indexOf("background")||(l[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,s))||(l[e]=i)),void 0)}},css:function(t,e,i,s){var n,o,r,a=ot.camelCase(e);return e=ot.cssProps[a]||(ot.cssProps[a]=S(a)||a),r=ot.cssHooks[e]||ot.cssHooks[a],r&&"get"in r&&(n=r.get(t,!0,i)),void 0===n&&(n=k(t,e,s)),"normal"===n&&e in ee&&(n=ee[e]),""===i||i?(o=parseFloat(n),i===!0||isFinite(o)?o||0:n):n}}),ot.each(["height","width"],function(t,e){ot.cssHooks[e]={get:function(t,i,s){if(i)return Jt.test(ot.css(t,"display"))&&0===t.offsetWidth?Zt(t,te,function(){return A(t,e,s)}):A(t,e,s)},set:function(t,i,s){var n,o=s&&Yt(t),r=s&&N(t,e,s,"border-box"===ot.css(t,"boxSizing",!1,o),o);return r&&(n=Nt.exec(i))&&"px"!==(n[3]||"px")&&(t.style[e]=i,i=ot.css(t,e)),D(t,i,r)}}}),ot.cssHooks.marginLeft=E(st.reliableMarginLeft,function(t,e){if(e)return(parseFloat(k(t,"marginLeft"))||t.getBoundingClientRect().left-Zt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),ot.cssHooks.marginRight=E(st.reliableMarginRight,function(t,e){if(e)return Zt(t,{display:"inline-block"},k,[t,"marginRight"])}),ot.each({margin:"",padding:"",border:"Width"},function(t,e){ot.cssHooks[t+e]={expand:function(i){for(var s=0,n={},o="string"==typeof i?i.split(" "):[i];s<4;s++)n[t+At[s]+e]=o[s]||o[s-2]||o[0];return n}},Qt.test(t)||(ot.cssHooks[t+e].set=D)}),ot.fn.extend({css:function(t,e){return $t(this,function(t,e,i){var s,n,o={},r=0;if(ot.isArray(e)){for(s=Yt(t),n=e.length;r<n;r++)o[e[r]]=ot.css(t,e[r],!1,s);return o}return void 0!==i?ot.style(t,e,i):ot.css(t,e)},t,e,arguments.length>1)},show:function(){return j(this,!0)},hide:function(){return j(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){jt(this)?ot(this).show():ot(this).hide()})}}),ot.Tween=O,O.prototype={constructor:O,init:function(t,e,i,s,n,o){this.elem=t,this.prop=i,this.easing=n||ot.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=s,this.unit=o||(ot.cssNumber[i]?"":"px")},cur:function(){var t=O.propHooks[this.prop];return t&&t.get?t.get(this):O.propHooks._default.get(this)},run:function(t){var e,i=O.propHooks[this.prop];return this.options.duration?this.pos=e=ot.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):O.propHooks._default.set(this),this}},O.prototype.init.prototype=O.prototype,O.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=ot.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){ot.fx.step[t.prop]?ot.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[ot.cssProps[t.prop]]&&!ot.cssHooks[t.prop]?t.elem[t.prop]=t.now:ot.style(t.elem,t.prop,t.now+t.unit)}}},O.propHooks.scrollTop=O.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},ot.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},ot.fx=O.prototype.init,ot.fx.step={};var ne,oe,re=/^(?:toggle|show|hide)$/,ae=/queueHooks$/;ot.Animation=ot.extend(M,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);
return h(i.elem,t,Nt.exec(e),i),i}]},tweener:function(t,e){ot.isFunction(t)?(e=t,t=["*"]):t=t.match(wt);for(var i,s=0,n=t.length;s<n;s++)i=t[s],M.tweeners[i]=M.tweeners[i]||[],M.tweeners[i].unshift(e)},prefilters:[L],prefilter:function(t,e){e?M.prefilters.unshift(t):M.prefilters.push(t)}}),ot.speed=function(t,e,i){var s=t&&"object"==typeof t?ot.extend({},t):{complete:i||!i&&e||ot.isFunction(t)&&t,duration:t,easing:i&&e||e&&!ot.isFunction(e)&&e};return s.duration=ot.fx.off?0:"number"==typeof s.duration?s.duration:s.duration in ot.fx.speeds?ot.fx.speeds[s.duration]:ot.fx.speeds._default,null!=s.queue&&s.queue!==!0||(s.queue="fx"),s.old=s.complete,s.complete=function(){ot.isFunction(s.old)&&s.old.call(this),s.queue&&ot.dequeue(this,s.queue)},s},ot.fn.extend({fadeTo:function(t,e,i,s){return this.filter(jt).css("opacity",0).show().end().animate({opacity:e},t,i,s)},animate:function(t,e,i,s){var n=ot.isEmptyObject(t),o=ot.speed(e,i,s),r=function(){var e=M(this,ot.extend({},t),o);(n||Tt.get(this,"finish"))&&e.stop(!0)};return r.finish=r,n||o.queue===!1?this.each(r):this.queue(o.queue,r)},stop:function(t,e,i){var s=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,n=null!=t&&t+"queueHooks",o=ot.timers,r=Tt.get(this);if(n)r[n]&&r[n].stop&&s(r[n]);else for(n in r)r[n]&&r[n].stop&&ae.test(n)&&s(r[n]);for(n=o.length;n--;)o[n].elem!==this||null!=t&&o[n].queue!==t||(o[n].anim.stop(i),e=!1,o.splice(n,1));!e&&i||ot.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,i=Tt.get(this),s=i[t+"queue"],n=i[t+"queueHooks"],o=ot.timers,r=s?s.length:0;for(i.finish=!0,ot.queue(this,t,[]),n&&n.stop&&n.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)s[e]&&s[e].finish&&s[e].finish.call(this);delete i.finish})}}),ot.each(["toggle","show","hide"],function(t,e){var i=ot.fn[e];ot.fn[e]=function(t,s,n){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(F(e,!0),t,s,n)}}),ot.each({slideDown:F("show"),slideUp:F("hide"),slideToggle:F("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){ot.fn[t]=function(t,i,s){return this.animate(e,t,i,s)}}),ot.timers=[],ot.fx.tick=function(){var t,e=0,i=ot.timers;for(ne=ot.now();e<i.length;e++)t=i[e],t()||i[e]!==t||i.splice(e--,1);i.length||ot.fx.stop(),ne=void 0},ot.fx.timer=function(t){ot.timers.push(t),t()?ot.fx.start():ot.timers.pop()},ot.fx.interval=13,ot.fx.start=function(){oe||(oe=t.setInterval(ot.fx.tick,ot.fx.interval))},ot.fx.stop=function(){t.clearInterval(oe),oe=null},ot.fx.speeds={slow:600,fast:200,_default:400},ot.fn.delay=function(e,i){return e=ot.fx?ot.fx.speeds[e]||e:e,i=i||"fx",this.queue(i,function(i,s){var n=t.setTimeout(i,e);s.stop=function(){t.clearTimeout(n)}})},function(){var t=G.createElement("input"),e=G.createElement("select"),i=e.appendChild(G.createElement("option"));t.type="checkbox",st.checkOn=""!==t.value,st.optSelected=i.selected,e.disabled=!0,st.optDisabled=!i.disabled,t=G.createElement("input"),t.value="t",t.type="radio",st.radioValue="t"===t.value}();var le,he=ot.expr.attrHandle;ot.fn.extend({attr:function(t,e){return $t(this,ot.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){ot.removeAttr(this,t)})}}),ot.extend({attr:function(t,e,i){var s,n,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof t.getAttribute?ot.prop(t,e,i):(1===o&&ot.isXMLDoc(t)||(e=e.toLowerCase(),n=ot.attrHooks[e]||(ot.expr.match.bool.test(e)?le:void 0)),void 0!==i?null===i?void ot.removeAttr(t,e):n&&"set"in n&&void 0!==(s=n.set(t,i,e))?s:(t.setAttribute(e,i+""),i):n&&"get"in n&&null!==(s=n.get(t,e))?s:(s=ot.find.attr(t,e),null==s?void 0:s))},attrHooks:{type:{set:function(t,e){if(!st.radioValue&&"radio"===e&&ot.nodeName(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,s,n=0,o=e&&e.match(wt);if(o&&1===t.nodeType)for(;i=o[n++];)s=ot.propFix[i]||i,ot.expr.match.bool.test(i)&&(t[s]=!1),t.removeAttribute(i)}}),le={set:function(t,e,i){return e===!1?ot.removeAttr(t,i):t.setAttribute(i,i),i}},ot.each(ot.expr.match.bool.source.match(/\w+/g),function(t,e){var i=he[e]||ot.find.attr;he[e]=function(t,e,s){var n,o;return s||(o=he[e],he[e]=n,n=null!=i(t,e,s)?e.toLowerCase():null,he[e]=o),n}});var ce=/^(?:input|select|textarea|button)$/i,pe=/^(?:a|area)$/i;ot.fn.extend({prop:function(t,e){return $t(this,ot.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[ot.propFix[t]||t]})}}),ot.extend({prop:function(t,e,i){var s,n,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ot.isXMLDoc(t)||(e=ot.propFix[e]||e,n=ot.propHooks[e]),void 0!==i?n&&"set"in n&&void 0!==(s=n.set(t,i,e))?s:t[e]=i:n&&"get"in n&&null!==(s=n.get(t,e))?s:t[e]},propHooks:{tabIndex:{get:function(t){var e=ot.find.attr(t,"tabindex");return e?parseInt(e,10):ce.test(t.nodeName)||pe.test(t.nodeName)&&t.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),st.optSelected||(ot.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),ot.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ot.propFix[this.toLowerCase()]=this});var ue=/[\t\r\n\f]/g;ot.fn.extend({addClass:function(t){var e,i,s,n,o,r,a,l=0;if(ot.isFunction(t))return this.each(function(e){ot(this).addClass(t.call(this,e,H(this)))});if("string"==typeof t&&t)for(e=t.match(wt)||[];i=this[l++];)if(n=H(i),s=1===i.nodeType&&(" "+n+" ").replace(ue," ")){for(r=0;o=e[r++];)s.indexOf(" "+o+" ")<0&&(s+=o+" ");a=ot.trim(s),n!==a&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,s,n,o,r,a,l=0;if(ot.isFunction(t))return this.each(function(e){ot(this).removeClass(t.call(this,e,H(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(wt)||[];i=this[l++];)if(n=H(i),s=1===i.nodeType&&(" "+n+" ").replace(ue," ")){for(r=0;o=e[r++];)for(;s.indexOf(" "+o+" ")>-1;)s=s.replace(" "+o+" "," ");a=ot.trim(s),n!==a&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):ot.isFunction(t)?this.each(function(i){ot(this).toggleClass(t.call(this,i,H(this),e),e)}):this.each(function(){var e,s,n,o;if("string"===i)for(s=0,n=ot(this),o=t.match(wt)||[];e=o[s++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==t&&"boolean"!==i||(e=H(this),e&&Tt.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":Tt.get(this,"__className__")||""))})},hasClass:function(t){var e,i,s=0;for(e=" "+t+" ";i=this[s++];)if(1===i.nodeType&&(" "+H(i)+" ").replace(ue," ").indexOf(e)>-1)return!0;return!1}});var de=/\r/g,fe=/[\x20\t\r\n\f]+/g;ot.fn.extend({val:function(t){var e,i,s,n=this[0];{if(arguments.length)return s=ot.isFunction(t),this.each(function(i){var n;1===this.nodeType&&(n=s?t.call(this,i,ot(this).val()):t,null==n?n="":"number"==typeof n?n+="":ot.isArray(n)&&(n=ot.map(n,function(t){return null==t?"":t+""})),e=ot.valHooks[this.type]||ot.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,n,"value")||(this.value=n))});if(n)return e=ot.valHooks[n.type]||ot.valHooks[n.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(i=e.get(n,"value"))?i:(i=n.value,"string"==typeof i?i.replace(de,""):null==i?"":i)}}}),ot.extend({valHooks:{option:{get:function(t){var e=ot.find.attr(t,"value");return null!=e?e:ot.trim(ot.text(t)).replace(fe," ")}},select:{get:function(t){for(var e,i,s=t.options,n=t.selectedIndex,o="select-one"===t.type||n<0,r=o?null:[],a=o?n+1:s.length,l=n<0?a:o?n:0;l<a;l++)if(i=s[l],(i.selected||l===n)&&(st.optDisabled?!i.disabled:null===i.getAttribute("disabled"))&&(!i.parentNode.disabled||!ot.nodeName(i.parentNode,"optgroup"))){if(e=ot(i).val(),o)return e;r.push(e)}return r},set:function(t,e){for(var i,s,n=t.options,o=ot.makeArray(e),r=n.length;r--;)s=n[r],(s.selected=ot.inArray(ot.valHooks.option.get(s),o)>-1)&&(i=!0);return i||(t.selectedIndex=-1),o}}}}),ot.each(["radio","checkbox"],function(){ot.valHooks[this]={set:function(t,e){if(ot.isArray(e))return t.checked=ot.inArray(ot(t).val(),e)>-1}},st.checkOn||(ot.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var me=/^(?:focusinfocus|focusoutblur)$/;ot.extend(ot.event,{trigger:function(e,i,s,n){var o,r,a,l,h,c,p,u=[s||G],d=it.call(e,"type")?e.type:e,f=it.call(e,"namespace")?e.namespace.split("."):[];if(r=a=s=s||G,3!==s.nodeType&&8!==s.nodeType&&!me.test(d+ot.event.triggered)&&(d.indexOf(".")>-1&&(f=d.split("."),d=f.shift(),f.sort()),h=d.indexOf(":")<0&&"on"+d,e=e[ot.expando]?e:new ot.Event(d,"object"==typeof e&&e),e.isTrigger=n?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=s),i=null==i?[e]:ot.makeArray(i,[e]),p=ot.event.special[d]||{},n||!p.trigger||p.trigger.apply(s,i)!==!1)){if(!n&&!p.noBubble&&!ot.isWindow(s)){for(l=p.delegateType||d,me.test(l+d)||(r=r.parentNode);r;r=r.parentNode)u.push(r),a=r;a===(s.ownerDocument||G)&&u.push(a.defaultView||a.parentWindow||t)}for(o=0;(r=u[o++])&&!e.isPropagationStopped();)e.type=o>1?l:p.bindType||d,c=(Tt.get(r,"events")||{})[e.type]&&Tt.get(r,"handle"),c&&c.apply(r,i),c=h&&r[h],c&&c.apply&&Ct(r)&&(e.result=c.apply(r,i),e.result===!1&&e.preventDefault());return e.type=d,n||e.isDefaultPrevented()||p._default&&p._default.apply(u.pop(),i)!==!1||!Ct(s)||h&&ot.isFunction(s[d])&&!ot.isWindow(s)&&(a=s[h],a&&(s[h]=null),ot.event.triggered=d,s[d](),ot.event.triggered=void 0,a&&(s[h]=a)),e.result}},simulate:function(t,e,i){var s=ot.extend(new ot.Event,i,{type:t,isSimulated:!0});ot.event.trigger(s,null,e)}}),ot.fn.extend({trigger:function(t,e){return this.each(function(){ot.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return ot.event.trigger(t,e,i,!0)}}),ot.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){ot.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),ot.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),st.focusin="onfocusin"in t,st.focusin||ot.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){ot.event.simulate(e,t.target,ot.event.fix(t))};ot.event.special[e]={setup:function(){var s=this.ownerDocument||this,n=Tt.access(s,e);n||s.addEventListener(t,i,!0),Tt.access(s,e,(n||0)+1)},teardown:function(){var s=this.ownerDocument||this,n=Tt.access(s,e)-1;n?Tt.access(s,e,n):(s.removeEventListener(t,i,!0),Tt.remove(s,e))}}});var ge=t.location,ve=ot.now(),_e=/\?/;ot.parseJSON=function(t){return JSON.parse(t+"")},ot.parseXML=function(e){var i;if(!e||"string"!=typeof e)return null;try{i=(new t.DOMParser).parseFromString(e,"text/xml")}catch(s){i=void 0}return i&&!i.getElementsByTagName("parsererror").length||ot.error("Invalid XML: "+e),i};var ye=/#.*$/,be=/([?&])_=[^&]*/,we=/^(.*?):[ \t]*([^\r\n]*)$/gm,xe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,$e=/^(?:GET|HEAD)$/,Ce=/^\/\//,Te={},ke={},Ee="*/".concat("*"),Se=G.createElement("a");Se.href=ge.href,ot.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ge.href,type:"GET",isLocal:xe.test(ge.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ee,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ot.parseJSON,"text xml":ot.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?W(W(t,ot.ajaxSettings),e):W(ot.ajaxSettings,t)},ajaxPrefilter:q(Te),ajaxTransport:q(ke),ajax:function(e,i){function s(e,i,s,a){var h,p,_,y,w,$=i;2!==b&&(b=2,l&&t.clearTimeout(l),n=void 0,r=a||"",x.readyState=e>0?4:0,h=e>=200&&e<300||304===e,s&&(y=B(u,x,s)),y=U(u,y,x,h),h?(u.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(ot.lastModified[o]=w),w=x.getResponseHeader("etag"),w&&(ot.etag[o]=w)),204===e||"HEAD"===u.type?$="nocontent":304===e?$="notmodified":($=y.state,p=y.data,_=y.error,h=!_)):(_=$,!e&&$||($="error",e<0&&(e=0))),x.status=e,x.statusText=(i||$)+"",h?m.resolveWith(d,[p,$,x]):m.rejectWith(d,[x,$,_]),x.statusCode(v),v=void 0,c&&f.trigger(h?"ajaxSuccess":"ajaxError",[x,u,h?p:_]),g.fireWith(d,[x,$]),c&&(f.trigger("ajaxComplete",[x,u]),--ot.active||ot.event.trigger("ajaxStop")))}"object"==typeof e&&(i=e,e=void 0),i=i||{};var n,o,r,a,l,h,c,p,u=ot.ajaxSetup({},i),d=u.context||u,f=u.context&&(d.nodeType||d.jquery)?ot(d):ot.event,m=ot.Deferred(),g=ot.Callbacks("once memory"),v=u.statusCode||{},_={},y={},b=0,w="canceled",x={readyState:0,getResponseHeader:function(t){var e;if(2===b){if(!a)for(a={};e=we.exec(r);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===b?r:null},setRequestHeader:function(t,e){var i=t.toLowerCase();return b||(t=y[i]=y[i]||t,_[t]=e),this},overrideMimeType:function(t){return b||(u.mimeType=t),this},statusCode:function(t){var e;if(t)if(b<2)for(e in t)v[e]=[v[e],t[e]];else x.always(t[x.status]);return this},abort:function(t){var e=t||w;return n&&n.abort(e),s(0,e),this}};if(m.promise(x).complete=g.add,x.success=x.done,x.error=x.fail,u.url=((e||u.url||ge.href)+"").replace(ye,"").replace(Ce,ge.protocol+"//"),u.type=i.method||i.type||u.method||u.type,u.dataTypes=ot.trim(u.dataType||"*").toLowerCase().match(wt)||[""],null==u.crossDomain){h=G.createElement("a");try{h.href=u.url,h.href=h.href,u.crossDomain=Se.protocol+"//"+Se.host!=h.protocol+"//"+h.host}catch($){u.crossDomain=!0}}if(u.data&&u.processData&&"string"!=typeof u.data&&(u.data=ot.param(u.data,u.traditional)),z(Te,u,i,x),2===b)return x;c=ot.event&&u.global,c&&0===ot.active++&&ot.event.trigger("ajaxStart"),u.type=u.type.toUpperCase(),u.hasContent=!$e.test(u.type),o=u.url,u.hasContent||(u.data&&(o=u.url+=(_e.test(o)?"&":"?")+u.data,delete u.data),u.cache===!1&&(u.url=be.test(o)?o.replace(be,"$1_="+ve++):o+(_e.test(o)?"&":"?")+"_="+ve++)),u.ifModified&&(ot.lastModified[o]&&x.setRequestHeader("If-Modified-Since",ot.lastModified[o]),ot.etag[o]&&x.setRequestHeader("If-None-Match",ot.etag[o])),(u.data&&u.hasContent&&u.contentType!==!1||i.contentType)&&x.setRequestHeader("Content-Type",u.contentType),x.setRequestHeader("Accept",u.dataTypes[0]&&u.accepts[u.dataTypes[0]]?u.accepts[u.dataTypes[0]]+("*"!==u.dataTypes[0]?", "+Ee+"; q=0.01":""):u.accepts["*"]);for(p in u.headers)x.setRequestHeader(p,u.headers[p]);if(u.beforeSend&&(u.beforeSend.call(d,x,u)===!1||2===b))return x.abort();w="abort";for(p in{success:1,error:1,complete:1})x[p](u[p]);if(n=z(ke,u,i,x)){if(x.readyState=1,c&&f.trigger("ajaxSend",[x,u]),2===b)return x;u.async&&u.timeout>0&&(l=t.setTimeout(function(){x.abort("timeout")},u.timeout));try{b=1,n.send(_,s)}catch($){if(!(b<2))throw $;s(-1,$)}}else s(-1,"No Transport");return x},getJSON:function(t,e,i){return ot.get(t,e,i,"json")},getScript:function(t,e){return ot.get(t,void 0,e,"script")}}),ot.each(["get","post"],function(t,e){ot[e]=function(t,i,s,n){return ot.isFunction(i)&&(n=n||s,s=i,i=void 0),ot.ajax(ot.extend({url:t,type:e,dataType:n,data:i,success:s},ot.isPlainObject(t)&&t))}}),ot._evalUrl=function(t){return ot.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},ot.fn.extend({wrapAll:function(t){var e;return ot.isFunction(t)?this.each(function(e){ot(this).wrapAll(t.call(this,e))}):(this[0]&&(e=ot(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return ot.isFunction(t)?this.each(function(e){ot(this).wrapInner(t.call(this,e))}):this.each(function(){var e=ot(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=ot.isFunction(t);return this.each(function(i){ot(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(){return this.parent().each(function(){ot.nodeName(this,"body")||ot(this).replaceWith(this.childNodes)}).end()}}),ot.expr.filters.hidden=function(t){return!ot.expr.filters.visible(t)},ot.expr.filters.visible=function(t){return t.offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0};var De=/%20/g,Ne=/\[\]$/,Ae=/\r?\n/g,je=/^(?:submit|button|image|reset|file)$/i,Oe=/^(?:input|select|textarea|keygen)/i;ot.param=function(t,e){var i,s=[],n=function(t,e){e=ot.isFunction(e)?e():null==e?"":e,s[s.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=ot.ajaxSettings&&ot.ajaxSettings.traditional),ot.isArray(t)||t.jquery&&!ot.isPlainObject(t))ot.each(t,function(){n(this.name,this.value)});else for(i in t)V(i,t[i],e,n);return s.join("&").replace(De,"+")},ot.fn.extend({serialize:function(){return ot.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=ot.prop(this,"elements");return t?ot.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!ot(this).is(":disabled")&&Oe.test(this.nodeName)&&!je.test(t)&&(this.checked||!Ot.test(t))}).map(function(t,e){var i=ot(this).val();return null==i?null:ot.isArray(i)?ot.map(i,function(t){return{name:e.name,value:t.replace(Ae,"\r\n")}}):{name:e.name,value:i.replace(Ae,"\r\n")}}).get()}}),ot.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(e){}};var Ie={0:200,1223:204},Fe=ot.ajaxSettings.xhr();st.cors=!!Fe&&"withCredentials"in Fe,st.ajax=Fe=!!Fe,ot.ajaxTransport(function(e){var i,s;if(st.cors||Fe&&!e.crossDomain)return{send:function(n,o){var r,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(r in e.xhrFields)a[r]=e.xhrFields[r];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)a.setRequestHeader(r,n[r]);i=function(t){return function(){i&&(i=s=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ie[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=i(),s=a.onerror=i("error"),void 0!==a.onabort?a.onabort=s:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){i&&s()})},i=i("abort");try{a.send(e.hasContent&&e.data||null)}catch(l){if(i)throw l}},abort:function(){i&&i()}}}),ot.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return ot.globalEval(t),t}}}),ot.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),ot.ajaxTransport("script",function(t){if(t.crossDomain){var e,i;return{send:function(s,n){e=ot("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&n("error"===t.type?404:200,t.type)}),G.head.appendChild(e[0])},abort:function(){i&&i()}}}});var Pe=[],Le=/(=)\?(?=&|$)|\?\?/;ot.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Pe.pop()||ot.expando+"_"+ve++;return this[t]=!0,t}}),ot.ajaxPrefilter("json jsonp",function(e,i,s){var n,o,r,a=e.jsonp!==!1&&(Le.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Le.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return n=e.jsonpCallback=ot.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Le,"$1"+n):e.jsonp!==!1&&(e.url+=(_e.test(e.url)?"&":"?")+e.jsonp+"="+n),e.converters["script json"]=function(){return r||ot.error(n+" was not called"),r[0]},e.dataTypes[0]="json",o=t[n],t[n]=function(){r=arguments},s.always(function(){void 0===o?ot(t).removeProp(n):t[n]=o,e[n]&&(e.jsonpCallback=i.jsonpCallback,Pe.push(n)),r&&ot.isFunction(o)&&o(r[0]),r=o=void 0}),"script"}),ot.parseHTML=function(t,e,i){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(i=e,e=!1),e=e||G;var s=ft.exec(t),n=!i&&[];return s?[e.createElement(s[1])]:(s=u([t],e,n),n&&n.length&&ot(n).remove(),ot.merge([],s.childNodes))};var Re=ot.fn.load;ot.fn.load=function(t,e,i){if("string"!=typeof t&&Re)return Re.apply(this,arguments);var s,n,o,r=this,a=t.indexOf(" ");return a>-1&&(s=ot.trim(t.slice(a)),t=t.slice(0,a)),ot.isFunction(e)?(i=e,e=void 0):e&&"object"==typeof e&&(n="POST"),r.length>0&&ot.ajax({url:t,type:n||"GET",dataType:"html",data:e}).done(function(t){o=arguments,r.html(s?ot("<div>").append(ot.parseHTML(t)).find(s):t)}).always(i&&function(t,e){r.each(function(){i.apply(this,o||[t.responseText,e,t])})}),this},ot.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){ot.fn[e]=function(t){return this.on(e,t)}}),ot.expr.filters.animated=function(t){return ot.grep(ot.timers,function(e){return t===e.elem}).length},ot.offset={setOffset:function(t,e,i){var s,n,o,r,a,l,h,c=ot.css(t,"position"),p=ot(t),u={};"static"===c&&(t.style.position="relative"),a=p.offset(),o=ot.css(t,"top"),l=ot.css(t,"left"),h=("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1,h?(s=p.position(),r=s.top,n=s.left):(r=parseFloat(o)||0,n=parseFloat(l)||0),ot.isFunction(e)&&(e=e.call(t,i,ot.extend({},a))),null!=e.top&&(u.top=e.top-a.top+r),null!=e.left&&(u.left=e.left-a.left+n),"using"in e?e.using.call(t,u):p.css(u)}},ot.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){ot.offset.setOffset(this,t,e)});var e,i,s=this[0],n={top:0,left:0},o=s&&s.ownerDocument;if(o)return e=o.documentElement,ot.contains(e,s)?(n=s.getBoundingClientRect(),i=X(o),{top:n.top+i.pageYOffset-e.clientTop,left:n.left+i.pageXOffset-e.clientLeft}):n},position:function(){if(this[0]){var t,e,i=this[0],s={top:0,left:0};return"fixed"===ot.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),ot.nodeName(t[0],"html")||(s=t.offset()),s.top+=ot.css(t[0],"borderTopWidth",!0),s.left+=ot.css(t[0],"borderLeftWidth",!0)),{top:e.top-s.top-ot.css(i,"marginTop",!0),left:e.left-s.left-ot.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===ot.css(t,"position");)t=t.offsetParent;return t||Kt})}}),ot.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var i="pageYOffset"===e;ot.fn[t]=function(s){return $t(this,function(t,s,n){var o=X(t);return void 0===n?o?o[e]:t[s]:void(o?o.scrollTo(i?o.pageXOffset:n,i?n:o.pageYOffset):t[s]=n)},t,s,arguments.length)}}),ot.each(["top","left"],function(t,e){ot.cssHooks[e]=E(st.pixelPosition,function(t,i){if(i)return i=k(t,e),Gt.test(i)?ot(t).position()[e]+"px":i})}),ot.each({Height:"height",Width:"width"},function(t,e){ot.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,s){ot.fn[s]=function(s,n){var o=arguments.length&&(i||"boolean"!=typeof s),r=i||(s===!0||n===!0?"margin":"border");return $t(this,function(e,i,s){var n;return ot.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(n=e.documentElement,Math.max(e.body["scroll"+t],n["scroll"+t],e.body["offset"+t],n["offset"+t],n["client"+t])):void 0===s?ot.css(e,i,r):ot.style(e,i,s,r)},e,o?s:void 0,o,null)}})}),ot.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,s){return this.on(e,t,i,s)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},size:function(){return this.length}}),ot.fn.andSelf=ot.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ot});var Me=t.jQuery,He=t.$;return ot.noConflict=function(e){return t.$===ot&&(t.$=He),e&&t.jQuery===ot&&(t.jQuery=Me),ot},e||(t.jQuery=t.$=ot),ot}),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),n=i.data("bs.alert");n||i.data("bs.alert",n=new s(this)),"string"==typeof e&&n[e].call(i)})}var i='[data-dismiss="alert"]',s=function(e){t(e).on("click",i,this.close)};s.VERSION="3.3.7",s.TRANSITION_DURATION=150,s.prototype.close=function(e){function i(){r.detach().trigger("closed.bs.alert").remove()}var n=t(this),o=n.attr("data-target");o||(o=n.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,""));var r=t("#"===o?[]:o);e&&e.preventDefault(),r.length||(r=n.closest(".alert")),r.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(r.removeClass("in"),t.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",i).emulateTransitionEnd(s.TRANSITION_DURATION):i())};var n=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=s,t.fn.alert.noConflict=function(){return t.fn.alert=n,this},t(document).on("click.bs.alert.data-api",i,s.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var s=t(this),n=s.data("bs.button"),o="object"==typeof e&&e;n||s.data("bs.button",n=new i(this,o)),"toggle"==e?n.toggle():e&&n.setState(e)})}var i=function(e,s){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,s),this.isLoading=!1};i.VERSION="3.3.7",i.DEFAULTS={loadingText:"loading..."},i.prototype.setState=function(e){var i="disabled",s=this.$element,n=s.is("input")?"val":"html",o=s.data();e+="Text",null==o.resetText&&s.data("resetText",s[n]()),setTimeout(t.proxy(function(){s[n](null==o[e]?this.options[e]:o[e]),"loadingText"==e?(this.isLoading=!0,s.addClass(i).attr(i,i).prop(i,!0)):this.isLoading&&(this.isLoading=!1,s.removeClass(i).removeAttr(i).prop(i,!1))},this),0)},i.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var i=this.$element.find("input");"radio"==i.prop("type")?(i.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==i.prop("type")&&(i.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),i.prop("checked",this.$element.hasClass("active")),t&&i.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var s=t.fn.button;t.fn.button=e,t.fn.button.Constructor=i,t.fn.button.noConflict=function(){return t.fn.button=s,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(i){var s=t(i.target).closest(".btn");e.call(s,"toggle"),t(i.target).is('input[type="radio"], input[type="checkbox"]')||(i.preventDefault(),s.is("input,button")?s.trigger("focus"):s.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var s=t(this),n=s.data("bs.carousel"),o=t.extend({},i.DEFAULTS,s.data(),"object"==typeof e&&e),r="string"==typeof e?e:o.slide;n||s.data("bs.carousel",n=new i(this,o)),"number"==typeof e?n.to(e):r?n[r]():o.interval&&n.pause().cycle()})}var i=function(e,i){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=i,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};i.VERSION="3.3.7",i.TRANSITION_DURATION=600,i.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},i.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},i.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},i.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},i.prototype.getItemForDirection=function(t,e){var i=this.getItemIndex(e),s="prev"==t&&0===i||"next"==t&&i==this.$items.length-1;if(s&&!this.options.wrap)return e;var n="prev"==t?-1:1,o=(i+n)%this.$items.length;return this.$items.eq(o)},i.prototype.to=function(t){var e=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):i==t?this.pause().cycle():this.slide(t>i?"next":"prev",this.$items.eq(t))},i.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},i.prototype.next=function(){if(!this.sliding)return this.slide("next")},i.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},i.prototype.slide=function(e,s){var n=this.$element.find(".item.active"),o=s||this.getItemForDirection(e,n),r=this.interval,a="next"==e?"left":"right",l=this;if(o.hasClass("active"))return this.sliding=!1;var h=o[0],c=t.Event("slide.bs.carousel",{relatedTarget:h,direction:a});if(this.$element.trigger(c),!c.isDefaultPrevented()){if(this.sliding=!0,r&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var p=t(this.$indicators.children()[this.getItemIndex(o)]);p&&p.addClass("active")}var u=t.Event("slid.bs.carousel",{relatedTarget:h,direction:a});return t.support.transition&&this.$element.hasClass("slide")?(o.addClass(e),o[0].offsetWidth,n.addClass(a),o.addClass(a),n.one("bsTransitionEnd",function(){o.removeClass([e,a].join(" ")).addClass("active"),n.removeClass(["active",a].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(u)},0)}).emulateTransitionEnd(i.TRANSITION_DURATION)):(n.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger(u)),r&&this.cycle(),this}};var s=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=i,t.fn.carousel.noConflict=function(){return t.fn.carousel=s,this};var n=function(i){var s,n=t(this),o=t(n.attr("data-target")||(s=n.attr("href"))&&s.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var r=t.extend({},o.data(),n.data()),a=n.attr("data-slide-to");a&&(r.interval=!1),e.call(o,r),a&&o.data("bs.carousel").to(a),i.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",n).on("click.bs.carousel.data-api","[data-slide-to]",n),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var i=t(this);e.call(i,i.data())})})}(jQuery),+function(t){"use strict";function e(e){var i=e.attr("data-target");i||(i=e.attr("href"),i=i&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,""));var s=i&&t(i);return s&&s.length?s:e.parent()}function i(i){i&&3===i.which||(t(n).remove(),t(o).each(function(){var s=t(this),n=e(s),o={
relatedTarget:this};n.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&t.contains(n[0],i.target)||(n.trigger(i=t.Event("hide.bs.dropdown",o)),i.isDefaultPrevented()||(s.attr("aria-expanded","false"),n.removeClass("open").trigger(t.Event("hidden.bs.dropdown",o)))))}))}function s(e){return this.each(function(){var i=t(this),s=i.data("bs.dropdown");s||i.data("bs.dropdown",s=new r(this)),"string"==typeof e&&s[e].call(i)})}var n=".dropdown-backdrop",o='[data-toggle="dropdown"]',r=function(e){t(e).on("click.bs.dropdown",this.toggle)};r.VERSION="3.3.7",r.prototype.toggle=function(s){var n=t(this);if(!n.is(".disabled, :disabled")){var o=e(n),r=o.hasClass("open");if(i(),!r){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",i);var a={relatedTarget:this};if(o.trigger(s=t.Event("show.bs.dropdown",a)),s.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true"),o.toggleClass("open").trigger(t.Event("shown.bs.dropdown",a))}return!1}},r.prototype.keydown=function(i){if(/(38|40|27|32)/.test(i.which)&&!/input|textarea/i.test(i.target.tagName)){var s=t(this);if(i.preventDefault(),i.stopPropagation(),!s.is(".disabled, :disabled")){var n=e(s),r=n.hasClass("open");if(!r&&27!=i.which||r&&27==i.which)return 27==i.which&&n.find(o).trigger("focus"),s.trigger("click");var a=" li:not(.disabled):visible a",l=n.find(".dropdown-menu"+a);if(l.length){var h=l.index(i.target);38==i.which&&h>0&&h--,40==i.which&&h<l.length-1&&h++,~h||(h=0),l.eq(h).trigger("focus")}}}};var a=t.fn.dropdown;t.fn.dropdown=s,t.fn.dropdown.Constructor=r,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=a,this},t(document).on("click.bs.dropdown.data-api",i).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",o,r.prototype.toggle).on("keydown.bs.dropdown.data-api",o,r.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",r.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e,s){return this.each(function(){var n=t(this),o=n.data("bs.modal"),r=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);o||n.data("bs.modal",o=new i(this,r)),"string"==typeof e?o[e](s):r.show&&o.show(s)})}var i=function(e,i){this.options=i,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};i.VERSION="3.3.7",i.TRANSITION_DURATION=300,i.BACKDROP_TRANSITION_DURATION=150,i.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},i.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},i.prototype.show=function(e){var s=this,n=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(n),this.isShown||n.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){s.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(s.$element)&&(s.ignoreBackdropClick=!0)})}),this.backdrop(function(){var n=t.support.transition&&s.$element.hasClass("fade");s.$element.parent().length||s.$element.appendTo(s.$body),s.$element.show().scrollTop(0),s.adjustDialog(),n&&s.$element[0].offsetWidth,s.$element.addClass("in"),s.enforceFocus();var o=t.Event("shown.bs.modal",{relatedTarget:e});n?s.$dialog.one("bsTransitionEnd",function(){s.$element.trigger("focus").trigger(o)}).emulateTransitionEnd(i.TRANSITION_DURATION):s.$element.trigger("focus").trigger(o)}))},i.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(i.TRANSITION_DURATION):this.hideModal())},i.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},i.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},i.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},i.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},i.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},i.prototype.backdrop=function(e){var s=this,n=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=t.support.transition&&n;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+n).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),o&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;o?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var r=function(){s.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",r).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):r()}else e&&e()},i.prototype.handleUpdate=function(){this.adjustDialog()},i.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},i.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},i.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},i.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},i.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},i.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var s=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=i,t.fn.modal.noConflict=function(){return t.fn.modal=s,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(i){var s=t(this),n=s.attr("href"),o=t(s.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,"")),r=o.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(n)&&n},o.data(),s.data());s.is("a")&&i.preventDefault(),o.one("show.bs.modal",function(t){t.isDefaultPrevented()||o.one("hidden.bs.modal",function(){s.is(":visible")&&s.trigger("focus")})}),e.call(o,r,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var s=t(this),n=s.data("bs.tooltip"),o="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||s.data("bs.tooltip",n=new i(this,o)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};i.VERSION="3.3.7",i.TRANSITION_DURATION=150,i.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},i.prototype.init=function(e,i,s){if(this.enabled=!0,this.type=e,this.$element=t(i),this.options=this.getOptions(s),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var n=this.options.trigger.split(" "),o=n.length;o--;){var r=n[o];if("click"==r)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=r){var a="hover"==r?"mouseenter":"focusin",l="hover"==r?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},i.prototype.getDelegateOptions=function(){var e={},i=this.getDefaults();return this._options&&t.each(this._options,function(t,s){i[t]!=s&&(e[t]=s)}),e},i.prototype.enter=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusin"==e.type?"focus":"hover"]=!0),i.tip().hasClass("in")||"in"==i.hoverState?void(i.hoverState="in"):(clearTimeout(i.timeout),i.hoverState="in",i.options.delay&&i.options.delay.show?void(i.timeout=setTimeout(function(){"in"==i.hoverState&&i.show()},i.options.delay.show)):i.show())},i.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},i.prototype.leave=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusout"==e.type?"focus":"hover"]=!1),!i.isInStateTrue())return clearTimeout(i.timeout),i.hoverState="out",i.options.delay&&i.options.delay.hide?void(i.timeout=setTimeout(function(){"out"==i.hoverState&&i.hide()},i.options.delay.hide)):i.hide()},i.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var s=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!s)return;var n=this,o=this.tip(),r=this.getUID(this.type);this.setContent(),o.attr("id",r),this.$element.attr("aria-describedby",r),this.options.animation&&o.addClass("fade");var a="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,h=l.test(a);h&&(a=a.replace(l,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(a).data("bs."+this.type,this),this.options.container?o.appendTo(this.options.container):o.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var c=this.getPosition(),p=o[0].offsetWidth,u=o[0].offsetHeight;if(h){var d=a,f=this.getPosition(this.$viewport);a="bottom"==a&&c.bottom+u>f.bottom?"top":"top"==a&&c.top-u<f.top?"bottom":"right"==a&&c.right+p>f.width?"left":"left"==a&&c.left-p<f.left?"right":a,o.removeClass(d).addClass(a)}var m=this.getCalculatedOffset(a,c,p,u);this.applyPlacement(m,a);var g=function(){var t=n.hoverState;n.$element.trigger("shown.bs."+n.type),n.hoverState=null,"out"==t&&n.leave(n)};t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",g).emulateTransitionEnd(i.TRANSITION_DURATION):g()}},i.prototype.applyPlacement=function(e,i){var s=this.tip(),n=s[0].offsetWidth,o=s[0].offsetHeight,r=parseInt(s.css("margin-top"),10),a=parseInt(s.css("margin-left"),10);isNaN(r)&&(r=0),isNaN(a)&&(a=0),e.top+=r,e.left+=a,t.offset.setOffset(s[0],t.extend({using:function(t){s.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),s.addClass("in");var l=s[0].offsetWidth,h=s[0].offsetHeight;"top"==i&&h!=o&&(e.top=e.top+o-h);var c=this.getViewportAdjustedDelta(i,e,l,h);c.left?e.left+=c.left:e.top+=c.top;var p=/top|bottom/.test(i),u=p?2*c.left-n+l:2*c.top-o+h,d=p?"offsetWidth":"offsetHeight";s.offset(e),this.replaceArrow(u,s[0][d],p)},i.prototype.replaceArrow=function(t,e,i){this.arrow().css(i?"left":"top",50*(1-t/e)+"%").css(i?"top":"left","")},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},i.prototype.hide=function(e){function s(){"in"!=n.hoverState&&o.detach(),n.$element&&n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type),e&&e()}var n=this,o=t(this.$tip),r=t.Event("hide.bs."+this.type);if(this.$element.trigger(r),!r.isDefaultPrevented())return o.removeClass("in"),t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",s).emulateTransitionEnd(i.TRANSITION_DURATION):s(),this.hoverState=null,this},i.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},i.prototype.hasContent=function(){return this.getTitle()},i.prototype.getPosition=function(e){e=e||this.$element;var i=e[0],s="BODY"==i.tagName,n=i.getBoundingClientRect();null==n.width&&(n=t.extend({},n,{width:n.right-n.left,height:n.bottom-n.top}));var o=window.SVGElement&&i instanceof window.SVGElement,r=s?{top:0,left:0}:o?null:e.offset(),a={scroll:s?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},l=s?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},n,a,l,r)},i.prototype.getCalculatedOffset=function(t,e,i,s){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-i/2}:"top"==t?{top:e.top-s,left:e.left+e.width/2-i/2}:"left"==t?{top:e.top+e.height/2-s/2,left:e.left-i}:{top:e.top+e.height/2-s/2,left:e.left+e.width}},i.prototype.getViewportAdjustedDelta=function(t,e,i,s){var n={top:0,left:0};if(!this.$viewport)return n;var o=this.options.viewport&&this.options.viewport.padding||0,r=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=e.top-o-r.scroll,l=e.top+o-r.scroll+s;a<r.top?n.top=r.top-a:l>r.top+r.height&&(n.top=r.top+r.height-l)}else{var h=e.left-o,c=e.left+o+i;h<r.left?n.left=r.left-h:c>r.right&&(n.left=r.left+r.width-c)}return n},i.prototype.getTitle=function(){var t,e=this.$element,i=this.options;return t=e.attr("data-original-title")||("function"==typeof i.title?i.title.call(e[0]):i.title)},i.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},i.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},i.prototype.enable=function(){this.enabled=!0},i.prototype.disable=function(){this.enabled=!1},i.prototype.toggleEnabled=function(){this.enabled=!this.enabled},i.prototype.toggle=function(e){var i=this;e&&(i=t(e.currentTarget).data("bs."+this.type),i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i))),e?(i.inState.click=!i.inState.click,i.isInStateTrue()?i.enter(i):i.leave(i)):i.tip().hasClass("in")?i.leave(i):i.enter(i)},i.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})};var s=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=i,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=s,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var s=t(this),n=s.data("bs.popover"),o="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||s.data("bs.popover",n=new i(this,o)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");i.VERSION="3.3.7",i.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),i.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),i.prototype.constructor=i,i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),i=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof i?"html":"append":"text"](i),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},i.prototype.hasContent=function(){return this.getTitle()||this.getContent()},i.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var s=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=i,t.fn.popover.noConflict=function(){return t.fn.popover=s,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var s=t(this),n=s.data("bs.tab");n||s.data("bs.tab",n=new i(this)),"string"==typeof e&&n[e]()})}var i=function(e){this.element=t(e)};i.VERSION="3.3.7",i.TRANSITION_DURATION=150,i.prototype.show=function(){var e=this.element,i=e.closest("ul:not(.dropdown-menu)"),s=e.data("target");if(s||(s=e.attr("href"),s=s&&s.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var n=i.find(".active:last a"),o=t.Event("hide.bs.tab",{relatedTarget:e[0]}),r=t.Event("show.bs.tab",{relatedTarget:n[0]});if(n.trigger(o),e.trigger(r),!r.isDefaultPrevented()&&!o.isDefaultPrevented()){var a=t(s);this.activate(e.closest("li"),i),this.activate(a,a.parent(),function(){n.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:n[0]})})}}},i.prototype.activate=function(e,s,n){function o(){r.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),a?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),n&&n()}var r=s.find("> .active"),a=n&&t.support.transition&&(r.length&&r.hasClass("fade")||!!s.find("> .fade").length);r.length&&a?r.one("bsTransitionEnd",o).emulateTransitionEnd(i.TRANSITION_DURATION):o(),r.removeClass("in")};var s=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=i,t.fn.tab.noConflict=function(){return t.fn.tab=s,this};var n=function(i){i.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',n).on("click.bs.tab.data-api",'[data-toggle="pill"]',n)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var s=t(this),n=s.data("bs.affix"),o="object"==typeof e&&e;n||s.data("bs.affix",n=new i(this,o)),"string"==typeof e&&n[e]()})}var i=function(e,s){this.options=t.extend({},i.DEFAULTS,s),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};i.VERSION="3.3.7",i.RESET="affix affix-top affix-bottom",i.DEFAULTS={offset:0,target:window},i.prototype.getState=function(t,e,i,s){var n=this.$target.scrollTop(),o=this.$element.offset(),r=this.$target.height();if(null!=i&&"top"==this.affixed)return n<i&&"top";if("bottom"==this.affixed)return null!=i?!(n+this.unpin<=o.top)&&"bottom":!(n+r<=t-s)&&"bottom";var a=null==this.affixed,l=a?n:o.top,h=a?r:e;return null!=i&&n<=i?"top":null!=s&&l+h>=t-s&&"bottom"},i.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(i.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},i.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},i.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),s=this.options.offset,n=s.top,o=s.bottom,r=Math.max(t(document).height(),t(document.body).height());"object"!=typeof s&&(o=n=s),"function"==typeof n&&(n=s.top(this.$element)),"function"==typeof o&&(o=s.bottom(this.$element));var a=this.getState(r,e,n,o);if(this.affixed!=a){null!=this.unpin&&this.$element.css("top","");var l="affix"+(a?"-"+a:""),h=t.Event(l+".bs.affix");if(this.$element.trigger(h),h.isDefaultPrevented())return;this.affixed=a,this.unpin="bottom"==a?this.getPinnedOffset():null,this.$element.removeClass(i.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==a&&this.$element.offset({top:r-e-o})}};var s=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=i,t.fn.affix.noConflict=function(){return t.fn.affix=s,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var i=t(this),s=i.data();s.offset=s.offset||{},null!=s.offsetBottom&&(s.offset.bottom=s.offsetBottom),null!=s.offsetTop&&(s.offset.top=s.offsetTop),e.call(i,s)})})}(jQuery),+function(t){"use strict";function e(e){var i,s=e.attr("data-target")||(i=e.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return t(s)}function i(e){return this.each(function(){var i=t(this),n=i.data("bs.collapse"),o=t.extend({},s.DEFAULTS,i.data(),"object"==typeof e&&e);!n&&o.toggle&&/show|hide/.test(e)&&(o.toggle=!1),n||i.data("bs.collapse",n=new s(this,o)),"string"==typeof e&&n[e]()})}var s=function(e,i){this.$element=t(e),this.options=t.extend({},s.DEFAULTS,i),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};s.VERSION="3.3.7",s.TRANSITION_DURATION=350,s.DEFAULTS={toggle:!0},s.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},s.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,n=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(n&&n.length&&(e=n.data("bs.collapse"),e&&e.transitioning))){var o=t.Event("show.bs.collapse");if(this.$element.trigger(o),!o.isDefaultPrevented()){n&&n.length&&(i.call(n,"hide"),e||n.data("bs.collapse",null));var r=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[r](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[r](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var l=t.camelCase(["scroll",r].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(s.TRANSITION_DURATION)[r](this.$element[0][l])}}}},s.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var n=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[i](0).one("bsTransitionEnd",t.proxy(n,this)).emulateTransitionEnd(s.TRANSITION_DURATION):n.call(this)}}},s.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},s.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(i,s){var n=t(s);this.addAriaAndCollapsedClass(e(n),n)},this)).end()},s.prototype.addAriaAndCollapsedClass=function(t,e){var i=t.hasClass("in");t.attr("aria-expanded",i),e.toggleClass("collapsed",!i).attr("aria-expanded",i)};var n=t.fn.collapse;t.fn.collapse=i,t.fn.collapse.Constructor=s,t.fn.collapse.noConflict=function(){return t.fn.collapse=n,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(s){var n=t(this);n.attr("data-target")||s.preventDefault();var o=e(n),r=o.data("bs.collapse"),a=r?"toggle":n.data();i.call(o,a)})}(jQuery),+function(t){"use strict";function e(i,s){this.$body=t(document.body),this.$scrollElement=t(t(i).is(document.body)?window:i),this.options=t.extend({},e.DEFAULTS,s),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function i(i){return this.each(function(){var s=t(this),n=s.data("bs.scrollspy"),o="object"==typeof i&&i;n||s.data("bs.scrollspy",n=new e(this,o)),"string"==typeof i&&n[i]()})}e.VERSION="3.3.7",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,i="offset",s=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(i="position",s=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),n=e.data("target")||e.attr("href"),o=/^#./.test(n)&&t(n);return o&&o.length&&o.is(":visible")&&[[o[i]().top+s,n]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,i=this.getScrollHeight(),s=this.options.offset+i-this.$scrollElement.height(),n=this.offsets,o=this.targets,r=this.activeTarget;if(this.scrollHeight!=i&&this.refresh(),e>=s)return r!=(t=o[o.length-1])&&this.activate(t);if(r&&e<n[0])return this.activeTarget=null,this.clear();for(t=n.length;t--;)r!=o[t]&&e>=n[t]&&(void 0===n[t+1]||e<n[t+1])&&this.activate(o[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var i=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',s=t(i).parents("li").addClass("active");s.parent(".dropdown-menu").length&&(s=s.closest("li.dropdown").addClass("active")),s.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var s=t.fn.scrollspy;t.fn.scrollspy=i,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=s,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);i.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(void 0!==t.style[i])return{end:e[i]};return!1}t.fn.emulateTransitionEnd=function(e){var i=!1,s=this;t(this).one("bsTransitionEnd",function(){i=!0});var n=function(){i||t(s).trigger(t.support.transition.end)};return setTimeout(n,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(t){"function"==typeof define&&define.amd?define(["jquery"],function(e){return t(e,document,window,navigator)}):"object"==typeof exports?t(require("jquery"),document,window,navigator):t(jQuery,document,window,navigator)}(function(t,e,i,s,n){"use strict";var o=0,r=function(){var e,i=s.userAgent,n=/msie\s\d+/i;return i.search(n)>0&&(e=n.exec(i).toString(),e=e.split(" ")[1],e<9)&&(t("html").addClass("lt-ie9"),!0)}();Function.prototype.bind||(Function.prototype.bind=function(t){var e=this,i=[].slice;if("function"!=typeof e)throw new TypeError;var s=i.call(arguments,1),n=function(){if(this instanceof n){var o=function(){};o.prototype=e.prototype;var r=new o,a=e.apply(r,s.concat(i.call(arguments)));return Object(a)===a?a:r}return e.apply(t,s.concat(i.call(arguments)))};return n}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t,e){var i;if(null==this)throw new TypeError('"this" is null or not defined');var s=Object(this),n=s.length>>>0;if(0===n)return-1;var o=+e||0;if(Math.abs(o)===1/0&&(o=0),o>=n)return-1;for(i=Math.max(o>=0?o:n-Math.abs(o),0);i<n;){if(i in s&&s[i]===t)return i;i++}return-1});var a='<span class="irs"><span class="irs-line" tabindex="0"><span class="irs-line-left"></span><span class="irs-line-mid"></span><span class="irs-line-right"></span></span><span class="irs-min">0</span><span class="irs-max">1</span><span class="irs-from">0</span><span class="irs-to">0</span><span class="irs-single">0</span></span><span class="irs-grid"></span><span class="irs-bar"></span>',l='<span class="irs-bar-edge"></span><span class="irs-shadow shadow-single"></span><span class="irs-slider single"></span>',h='<span class="irs-shadow shadow-from"></span><span class="irs-shadow shadow-to"></span><span class="irs-slider from"></span><span class="irs-slider to"></span>',c='<span class="irs-disable-mask"></span>',p=function(s,o,r){this.VERSION="2.2.0",this.input=s,this.plugin_count=r,this.current_plugin=0,this.calc_count=0,this.update_tm=0,this.old_from=0,this.old_to=0,this.old_min_interval=null,this.raf_id=null,this.dragging=!1,this.force_redraw=!1,this.no_diapason=!1,this.has_tab_index=!0,this.is_key=!1,this.is_update=!1,this.is_start=!0,this.is_finish=!1,this.is_active=!1,this.is_resize=!1,this.is_click=!1,o=o||{},this.$cache={win:t(i),body:t(e.body),input:t(s),cont:null,rs:null,min:null,max:null,from:null,to:null,single:null,bar:null,line:null,s_single:null,s_from:null,s_to:null,shad_single:null,shad_from:null,shad_to:null,edge:null,grid:null,grid_labels:[]},this.coords={x_gap:0,x_pointer:0,w_rs:0,w_rs_old:0,w_handle:0,p_gap:0,p_gap_left:0,p_gap_right:0,p_step:0,p_pointer:0,
p_handle:0,p_single_fake:0,p_single_real:0,p_from_fake:0,p_from_real:0,p_to_fake:0,p_to_real:0,p_bar_x:0,p_bar_w:0,grid_gap:0,big_num:0,big:[],big_w:[],big_p:[],big_x:[]},this.labels={w_min:0,w_max:0,w_from:0,w_to:0,w_single:0,p_min:0,p_max:0,p_from_fake:0,p_from_left:0,p_to_fake:0,p_to_left:0,p_single_fake:0,p_single_left:0};var a,l,h,c=this.$cache.input,p=c.prop("value");a={type:"single",min:10,max:100,from:null,to:null,step:1,min_interval:0,max_interval:0,drag_interval:!1,values:[],p_values:[],from_fixed:!1,from_min:null,from_max:null,from_shadow:!1,to_fixed:!1,to_min:null,to_max:null,to_shadow:!1,prettify_enabled:!0,prettify_separator:" ",prettify:null,force_edges:!1,keyboard:!0,grid:!1,grid_margin:!0,grid_num:4,grid_snap:!1,hide_min_max:!1,hide_from_to:!1,prefix:"",postfix:"",max_postfix:"",decorate_both:!0,values_separator:" — ",input_values_separator:";",disable:!1,block:!1,extra_classes:"",scope:null,onStart:null,onChange:null,onFinish:null,onUpdate:null},"INPUT"!==c[0].nodeName&&console&&console.warn&&console.warn("Base element should be <input>!",c[0]),l={type:c.data("type"),min:c.data("min"),max:c.data("max"),from:c.data("from"),to:c.data("to"),step:c.data("step"),min_interval:c.data("minInterval"),max_interval:c.data("maxInterval"),drag_interval:c.data("dragInterval"),values:c.data("values"),from_fixed:c.data("fromFixed"),from_min:c.data("fromMin"),from_max:c.data("fromMax"),from_shadow:c.data("fromShadow"),to_fixed:c.data("toFixed"),to_min:c.data("toMin"),to_max:c.data("toMax"),to_shadow:c.data("toShadow"),prettify_enabled:c.data("prettifyEnabled"),prettify_separator:c.data("prettifySeparator"),force_edges:c.data("forceEdges"),keyboard:c.data("keyboard"),grid:c.data("grid"),grid_margin:c.data("gridMargin"),grid_num:c.data("gridNum"),grid_snap:c.data("gridSnap"),hide_min_max:c.data("hideMinMax"),hide_from_to:c.data("hideFromTo"),prefix:c.data("prefix"),postfix:c.data("postfix"),max_postfix:c.data("maxPostfix"),decorate_both:c.data("decorateBoth"),values_separator:c.data("valuesSeparator"),input_values_separator:c.data("inputValuesSeparator"),disable:c.data("disable"),block:c.data("block"),extra_classes:c.data("extraClasses")},l.values=l.values&&l.values.split(",");for(h in l)l.hasOwnProperty(h)&&(l[h]!==n&&""!==l[h]||delete l[h]);p!==n&&""!==p&&(p=p.split(l.input_values_separator||o.input_values_separator||";"),p[0]&&p[0]==+p[0]&&(p[0]=+p[0]),p[1]&&p[1]==+p[1]&&(p[1]=+p[1]),o&&o.values&&o.values.length?(a.from=p[0]&&o.values.indexOf(p[0]),a.to=p[1]&&o.values.indexOf(p[1])):(a.from=p[0]&&+p[0],a.to=p[1]&&+p[1])),t.extend(a,o),t.extend(a,l),this.options=a,this.update_check={},this.validate(),this.result={input:this.$cache.input,slider:null,min:this.options.min,max:this.options.max,from:this.options.from,from_percent:0,from_value:null,to:this.options.to,to_percent:0,to_value:null},this.init()};p.prototype={init:function(t){this.no_diapason=!1,this.coords.p_step=this.convertToPercent(this.options.step,!0),this.target="base",this.toggleInput(),this.append(),this.setMinMax(),t?(this.force_redraw=!0,this.calc(!0),this.callOnUpdate()):(this.force_redraw=!0,this.calc(!0),this.callOnStart()),this.updateScene()},append:function(){var t='<span class="irs js-irs-'+this.plugin_count+" "+this.options.extra_classes+'"></span>';this.$cache.input.before(t),this.$cache.input.prop("readonly",!0),this.$cache.cont=this.$cache.input.prev(),this.result.slider=this.$cache.cont,this.$cache.cont.html(a),this.$cache.rs=this.$cache.cont.find(".irs"),this.$cache.min=this.$cache.cont.find(".irs-min"),this.$cache.max=this.$cache.cont.find(".irs-max"),this.$cache.from=this.$cache.cont.find(".irs-from"),this.$cache.to=this.$cache.cont.find(".irs-to"),this.$cache.single=this.$cache.cont.find(".irs-single"),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.line=this.$cache.cont.find(".irs-line"),this.$cache.grid=this.$cache.cont.find(".irs-grid"),"single"===this.options.type?(this.$cache.cont.append(l),this.$cache.edge=this.$cache.cont.find(".irs-bar-edge"),this.$cache.s_single=this.$cache.cont.find(".single"),this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.shad_single=this.$cache.cont.find(".shadow-single")):(this.$cache.cont.append(h),this.$cache.s_from=this.$cache.cont.find(".from"),this.$cache.s_to=this.$cache.cont.find(".to"),this.$cache.shad_from=this.$cache.cont.find(".shadow-from"),this.$cache.shad_to=this.$cache.cont.find(".shadow-to"),this.setTopHandler()),this.options.hide_from_to&&(this.$cache.from[0].style.display="none",this.$cache.to[0].style.display="none",this.$cache.single[0].style.display="none"),this.appendGrid(),this.options.disable?(this.appendDisableMask(),this.$cache.input[0].disabled=!0):(this.$cache.input[0].disabled=!1,this.removeDisableMask(),this.bindEvents()),this.options.disable||(this.options.block?this.appendDisableMask():this.removeDisableMask()),this.options.drag_interval&&(this.$cache.bar[0].style.cursor="ew-resize")},setTopHandler:function(){var t=this.options.min,e=this.options.max,i=this.options.from,s=this.options.to;i>t&&s===e?this.$cache.s_from.addClass("type_last"):s<e&&this.$cache.s_to.addClass("type_last")},changeLevel:function(t){switch(t){case"single":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_single_fake),this.$cache.s_single.addClass("state_hover");break;case"from":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.$cache.s_from.addClass("state_hover"),this.$cache.s_from.addClass("type_last"),this.$cache.s_to.removeClass("type_last");break;case"to":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_to_fake),this.$cache.s_to.addClass("state_hover"),this.$cache.s_to.addClass("type_last"),this.$cache.s_from.removeClass("type_last");break;case"both":this.coords.p_gap_left=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.coords.p_gap_right=this.toFixed(this.coords.p_to_fake-this.coords.p_pointer),this.$cache.s_to.removeClass("type_last"),this.$cache.s_from.removeClass("type_last")}},appendDisableMask:function(){this.$cache.cont.append(c),this.$cache.cont.addClass("irs-disabled")},removeDisableMask:function(){this.$cache.cont.remove(".irs-disable-mask"),this.$cache.cont.removeClass("irs-disabled")},remove:function(){this.$cache.cont.remove(),this.$cache.cont=null,this.$cache.line.off("keydown.irs_"+this.plugin_count),this.$cache.body.off("touchmove.irs_"+this.plugin_count),this.$cache.body.off("mousemove.irs_"+this.plugin_count),this.$cache.win.off("touchend.irs_"+this.plugin_count),this.$cache.win.off("mouseup.irs_"+this.plugin_count),r&&(this.$cache.body.off("mouseup.irs_"+this.plugin_count),this.$cache.body.off("mouseleave.irs_"+this.plugin_count)),this.$cache.grid_labels=[],this.coords.big=[],this.coords.big_w=[],this.coords.big_p=[],this.coords.big_x=[],cancelAnimationFrame(this.raf_id)},bindEvents:function(){this.no_diapason||(this.$cache.body.on("touchmove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.body.on("mousemove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.win.on("touchend.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.win.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.line.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("focus.irs_"+this.plugin_count,this.pointerFocus.bind(this)),this.options.drag_interval&&"double"===this.options.type?(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"both")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"both"))):(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),"single"===this.options.type?(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.shad_single.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.edge.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_single.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))):(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),this.options.keyboard&&this.$cache.line.on("keydown.irs_"+this.plugin_count,this.key.bind(this,"keyboard")),r&&(this.$cache.body.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.body.on("mouseleave.irs_"+this.plugin_count,this.pointerUp.bind(this))))},pointerFocus:function(t){if(!this.target){var e,i;i="single"===this.options.type?this.$cache.single:this.$cache.from,e=i.offset().left,e+=i.width()/2-1,this.pointerClick("single",{preventDefault:function(){},pageX:e})}},pointerMove:function(t){if(this.dragging){var e=t.pageX||t.originalEvent.touches&&t.originalEvent.touches[0].pageX;this.coords.x_pointer=e-this.coords.x_gap,this.calc()}},pointerUp:function(e){this.current_plugin===this.plugin_count&&this.is_active&&(this.is_active=!1,this.$cache.cont.find(".state_hover").removeClass("state_hover"),this.force_redraw=!0,r&&t("*").prop("unselectable",!1),this.updateScene(),this.restoreOriginalMinInterval(),(t.contains(this.$cache.cont[0],e.target)||this.dragging)&&this.callOnFinish(),this.dragging=!1)},pointerDown:function(e,i){i.preventDefault();var s=i.pageX||i.originalEvent.touches&&i.originalEvent.touches[0].pageX;2!==i.button&&("both"===e&&this.setTempMinInterval(),e||(e=this.target||"from"),this.current_plugin=this.plugin_count,this.target=e,this.is_active=!0,this.dragging=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=s-this.coords.x_gap,this.calcPointerPercent(),this.changeLevel(e),r&&t("*").prop("unselectable",!0),this.$cache.line.trigger("focus"),this.updateScene())},pointerClick:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&(this.current_plugin=this.plugin_count,this.target=t,this.is_click=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=+(i-this.coords.x_gap).toFixed(),this.force_redraw=!0,this.calc(),this.$cache.line.trigger("focus"))},key:function(t,e){if(!(this.current_plugin!==this.plugin_count||e.altKey||e.ctrlKey||e.shiftKey||e.metaKey)){switch(e.which){case 83:case 65:case 40:case 37:e.preventDefault(),this.moveByKey(!1);break;case 87:case 68:case 38:case 39:e.preventDefault(),this.moveByKey(!0)}return!0}},moveByKey:function(t){var e=this.coords.p_pointer,i=(this.options.max-this.options.min)/100;i=this.options.step/i,t?e+=i:e-=i,this.coords.x_pointer=this.toFixed(this.coords.w_rs/100*e),this.is_key=!0,this.calc()},setMinMax:function(){if(this.options){if(this.options.hide_min_max)return this.$cache.min[0].style.display="none",void(this.$cache.max[0].style.display="none");if(this.options.values.length)this.$cache.min.html(this.decorate(this.options.p_values[this.options.min])),this.$cache.max.html(this.decorate(this.options.p_values[this.options.max]));else{var t=this._prettify(this.options.min),e=this._prettify(this.options.max);this.result.min_pretty=t,this.result.max_pretty=e,this.$cache.min.html(this.decorate(t,this.options.min)),this.$cache.max.html(this.decorate(e,this.options.max))}this.labels.w_min=this.$cache.min.outerWidth(!1),this.labels.w_max=this.$cache.max.outerWidth(!1)}},setTempMinInterval:function(){var t=this.result.to-this.result.from;null===this.old_min_interval&&(this.old_min_interval=this.options.min_interval),this.options.min_interval=t},restoreOriginalMinInterval:function(){null!==this.old_min_interval&&(this.options.min_interval=this.old_min_interval,this.old_min_interval=null)},calc:function(t){if(this.options&&(this.calc_count++,(10===this.calc_count||t)&&(this.calc_count=0,this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.calcHandlePercent()),this.coords.w_rs)){this.calcPointerPercent();var e=this.getHandleX();switch("both"===this.target&&(this.coords.p_gap=0,e=this.getHandleX()),"click"===this.target&&(this.coords.p_gap=this.coords.p_handle/2,e=this.getHandleX(),this.options.drag_interval?this.target="both_one":this.target=this.chooseHandle(e)),this.target){case"base":var i=(this.options.max-this.options.min)/100,s=(this.result.from-this.options.min)/i,n=(this.result.to-this.options.min)/i;this.coords.p_single_real=this.toFixed(s),this.coords.p_from_real=this.toFixed(s),this.coords.p_to_real=this.toFixed(n),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real),this.target=null;break;case"single":if(this.options.from_fixed)break;this.coords.p_single_real=this.convertToRealPercent(e),this.coords.p_single_real=this.calcWithStep(this.coords.p_single_real),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real);break;case"from":if(this.options.from_fixed)break;this.coords.p_from_real=this.convertToRealPercent(e),this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real>this.coords.p_to_real&&(this.coords.p_from_real=this.coords.p_to_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_real=this.checkMaxInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real);break;case"to":if(this.options.to_fixed)break;this.coords.p_to_real=this.convertToRealPercent(e),this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real<this.coords.p_from_real&&(this.coords.p_to_real=this.coords.p_from_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_real=this.checkMaxInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both":if(this.options.from_fixed||this.options.to_fixed)break;e=this.toFixed(e+.001*this.coords.p_handle),this.coords.p_from_real=this.convertToRealPercent(e)-this.coords.p_gap_left,this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.convertToRealPercent(e)+this.coords.p_gap_right,this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both_one":if(this.options.from_fixed||this.options.to_fixed)break;var o=this.convertToRealPercent(e),r=this.result.from_percent,a=this.result.to_percent,l=a-r,h=l/2,c=o-h,p=o+h;c<0&&(c=0,p=c+l),p>100&&(p=100,c=p-l),this.coords.p_from_real=this.calcWithStep(c),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.calcWithStep(p),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real)}"single"===this.options.type?(this.coords.p_bar_x=this.coords.p_handle/2,this.coords.p_bar_w=this.coords.p_single_fake,this.result.from_percent=this.coords.p_single_real,this.result.from=this.convertToValue(this.coords.p_single_real),this.result.from_pretty=this._prettify(this.result.from),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from])):(this.coords.p_bar_x=this.toFixed(this.coords.p_from_fake+this.coords.p_handle/2),this.coords.p_bar_w=this.toFixed(this.coords.p_to_fake-this.coords.p_from_fake),this.result.from_percent=this.coords.p_from_real,this.result.from=this.convertToValue(this.coords.p_from_real),this.result.from_pretty=this._prettify(this.result.from),this.result.to_percent=this.coords.p_to_real,this.result.to=this.convertToValue(this.coords.p_to_real),this.result.to_pretty=this._prettify(this.result.to),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from],this.result.to_value=this.options.values[this.result.to])),this.calcMinMax(),this.calcLabels()}},calcPointerPercent:function(){return this.coords.w_rs?(this.coords.x_pointer<0||isNaN(this.coords.x_pointer)?this.coords.x_pointer=0:this.coords.x_pointer>this.coords.w_rs&&(this.coords.x_pointer=this.coords.w_rs),void(this.coords.p_pointer=this.toFixed(this.coords.x_pointer/this.coords.w_rs*100))):void(this.coords.p_pointer=0)},convertToRealPercent:function(t){var e=100-this.coords.p_handle;return t/e*100},convertToFakePercent:function(t){var e=100-this.coords.p_handle;return t/100*e},getHandleX:function(){var t=100-this.coords.p_handle,e=this.toFixed(this.coords.p_pointer-this.coords.p_gap);return e<0?e=0:e>t&&(e=t),e},calcHandlePercent:function(){"single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100)},chooseHandle:function(t){if("single"===this.options.type)return"single";var e=this.coords.p_from_real+(this.coords.p_to_real-this.coords.p_from_real)/2;return t>=e?this.options.to_fixed?"from":"to":this.options.from_fixed?"to":"from"},calcMinMax:function(){this.coords.w_rs&&(this.labels.p_min=this.labels.w_min/this.coords.w_rs*100,this.labels.p_max=this.labels.w_max/this.coords.w_rs*100)},calcLabels:function(){this.coords.w_rs&&!this.options.hide_from_to&&("single"===this.options.type?(this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=this.coords.p_single_fake+this.coords.p_handle/2-this.labels.p_single_fake/2,this.labels.p_single_left=this.checkEdges(this.labels.p_single_left,this.labels.p_single_fake)):(this.labels.w_from=this.$cache.from.outerWidth(!1),this.labels.p_from_fake=this.labels.w_from/this.coords.w_rs*100,this.labels.p_from_left=this.coords.p_from_fake+this.coords.p_handle/2-this.labels.p_from_fake/2,this.labels.p_from_left=this.toFixed(this.labels.p_from_left),this.labels.p_from_left=this.checkEdges(this.labels.p_from_left,this.labels.p_from_fake),this.labels.w_to=this.$cache.to.outerWidth(!1),this.labels.p_to_fake=this.labels.w_to/this.coords.w_rs*100,this.labels.p_to_left=this.coords.p_to_fake+this.coords.p_handle/2-this.labels.p_to_fake/2,this.labels.p_to_left=this.toFixed(this.labels.p_to_left),this.labels.p_to_left=this.checkEdges(this.labels.p_to_left,this.labels.p_to_fake),this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=(this.labels.p_from_left+this.labels.p_to_left+this.labels.p_to_fake)/2-this.labels.p_single_fake/2,this.labels.p_single_left=this.toFixed(this.labels.p_single_left),this.labels.p_single_left=this.checkEdges(this.labels.p_single_left,this.labels.p_single_fake)))},updateScene:function(){this.raf_id&&(cancelAnimationFrame(this.raf_id),this.raf_id=null),clearTimeout(this.update_tm),this.update_tm=null,this.options&&(this.drawHandles(),this.is_active?this.raf_id=requestAnimationFrame(this.updateScene.bind(this)):this.update_tm=setTimeout(this.updateScene.bind(this),300))},drawHandles:function(){this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&(this.coords.w_rs!==this.coords.w_rs_old&&(this.target="base",this.is_resize=!0),(this.coords.w_rs!==this.coords.w_rs_old||this.force_redraw)&&(this.setMinMax(),this.calc(!0),this.drawLabels(),this.options.grid&&(this.calcGridMargin(),this.calcGridLabels()),this.force_redraw=!0,this.coords.w_rs_old=this.coords.w_rs,this.drawShadow()),this.coords.w_rs&&(this.dragging||this.force_redraw||this.is_key)&&((this.old_from!==this.result.from||this.old_to!==this.result.to||this.force_redraw||this.is_key)&&(this.drawLabels(),this.$cache.bar[0].style.left=this.coords.p_bar_x+"%",this.$cache.bar[0].style.width=this.coords.p_bar_w+"%","single"===this.options.type?(this.$cache.s_single[0].style.left=this.coords.p_single_fake+"%",this.$cache.single[0].style.left=this.labels.p_single_left+"%"):(this.$cache.s_from[0].style.left=this.coords.p_from_fake+"%",this.$cache.s_to[0].style.left=this.coords.p_to_fake+"%",(this.old_from!==this.result.from||this.force_redraw)&&(this.$cache.from[0].style.left=this.labels.p_from_left+"%"),(this.old_to!==this.result.to||this.force_redraw)&&(this.$cache.to[0].style.left=this.labels.p_to_left+"%"),this.$cache.single[0].style.left=this.labels.p_single_left+"%"),this.writeToInput(),this.old_from===this.result.from&&this.old_to===this.result.to||this.is_start||(this.$cache.input.trigger("change"),this.$cache.input.trigger("input")),this.old_from=this.result.from,this.old_to=this.result.to,this.is_resize||this.is_update||this.is_start||this.is_finish||this.callOnChange(),(this.is_key||this.is_click)&&(this.is_key=!1,this.is_click=!1,this.callOnFinish()),this.is_update=!1,this.is_resize=!1,this.is_finish=!1),this.is_start=!1,this.is_key=!1,this.is_click=!1,this.force_redraw=!1))},drawLabels:function(){if(this.options){var t,e,i,s,n,o=this.options.values.length,r=this.options.p_values;if(!this.options.hide_from_to)if("single"===this.options.type)o?(t=this.decorate(r[this.result.from]),this.$cache.single.html(t)):(s=this._prettify(this.result.from),t=this.decorate(s,this.result.from),this.$cache.single.html(t)),this.calcLabels(),this.labels.p_single_left<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",this.labels.p_single_left+this.labels.p_single_fake>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible";else{o?(this.options.decorate_both?(t=this.decorate(r[this.result.from]),t+=this.options.values_separator,t+=this.decorate(r[this.result.to])):t=this.decorate(r[this.result.from]+this.options.values_separator+r[this.result.to]),e=this.decorate(r[this.result.from]),i=this.decorate(r[this.result.to]),this.$cache.single.html(t),this.$cache.from.html(e),this.$cache.to.html(i)):(s=this._prettify(this.result.from),n=this._prettify(this.result.to),this.options.decorate_both?(t=this.decorate(s,this.result.from),t+=this.options.values_separator,t+=this.decorate(n,this.result.to)):t=this.decorate(s+this.options.values_separator+n,this.result.to),e=this.decorate(s,this.result.from),i=this.decorate(n,this.result.to),this.$cache.single.html(t),this.$cache.from.html(e),this.$cache.to.html(i)),this.calcLabels();var a=Math.min(this.labels.p_single_left,this.labels.p_from_left),l=this.labels.p_single_left+this.labels.p_single_fake,h=this.labels.p_to_left+this.labels.p_to_fake,c=Math.max(l,h);this.labels.p_from_left+this.labels.p_from_fake>=this.labels.p_to_left?(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",this.result.from===this.result.to?("from"===this.target?this.$cache.from[0].style.visibility="visible":"to"===this.target?this.$cache.to[0].style.visibility="visible":this.target||(this.$cache.from[0].style.visibility="visible"),this.$cache.single[0].style.visibility="hidden",c=h):(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",c=Math.max(l,h))):(this.$cache.from[0].style.visibility="visible",this.$cache.to[0].style.visibility="visible",this.$cache.single[0].style.visibility="hidden"),a<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",c>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible"}}},drawShadow:function(){var t,e,i,s,n=this.options,o=this.$cache,r="number"==typeof n.from_min&&!isNaN(n.from_min),a="number"==typeof n.from_max&&!isNaN(n.from_max),l="number"==typeof n.to_min&&!isNaN(n.to_min),h="number"==typeof n.to_max&&!isNaN(n.to_max);"single"===n.type?n.from_shadow&&(r||a)?(t=this.convertToPercent(r?n.from_min:n.min),e=this.convertToPercent(a?n.from_max:n.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,o.shad_single[0].style.display="block",o.shad_single[0].style.left=t+"%",o.shad_single[0].style.width=e+"%"):o.shad_single[0].style.display="none":(n.from_shadow&&(r||a)?(t=this.convertToPercent(r?n.from_min:n.min),e=this.convertToPercent(a?n.from_max:n.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,o.shad_from[0].style.display="block",o.shad_from[0].style.left=t+"%",o.shad_from[0].style.width=e+"%"):o.shad_from[0].style.display="none",n.to_shadow&&(l||h)?(i=this.convertToPercent(l?n.to_min:n.min),s=this.convertToPercent(h?n.to_max:n.max)-i,i=this.toFixed(i-this.coords.p_handle/100*i),s=this.toFixed(s-this.coords.p_handle/100*s),i+=this.coords.p_handle/2,o.shad_to[0].style.display="block",o.shad_to[0].style.left=i+"%",o.shad_to[0].style.width=s+"%"):o.shad_to[0].style.display="none")},writeToInput:function(){"single"===this.options.type?(this.options.values.length?this.$cache.input.prop("value",this.result.from_value):this.$cache.input.prop("value",this.result.from),this.$cache.input.data("from",this.result.from)):(this.options.values.length?this.$cache.input.prop("value",this.result.from_value+this.options.input_values_separator+this.result.to_value):this.$cache.input.prop("value",this.result.from+this.options.input_values_separator+this.result.to),this.$cache.input.data("from",this.result.from),this.$cache.input.data("to",this.result.to))},callOnStart:function(){this.writeToInput(),this.options.onStart&&"function"==typeof this.options.onStart&&(this.options.scope?this.options.onStart.call(this.options.scope,this.result):this.options.onStart(this.result))},callOnChange:function(){this.writeToInput(),this.options.onChange&&"function"==typeof this.options.onChange&&(this.options.scope?this.options.onChange.call(this.options.scope,this.result):this.options.onChange(this.result))},callOnFinish:function(){this.writeToInput(),this.options.onFinish&&"function"==typeof this.options.onFinish&&(this.options.scope?this.options.onFinish.call(this.options.scope,this.result):this.options.onFinish(this.result))},callOnUpdate:function(){this.writeToInput(),this.options.onUpdate&&"function"==typeof this.options.onUpdate&&(this.options.scope?this.options.onUpdate.call(this.options.scope,this.result):this.options.onUpdate(this.result))},toggleInput:function(){this.$cache.input.toggleClass("irs-hidden-input"),this.has_tab_index?this.$cache.input.prop("tabindex",-1):this.$cache.input.removeProp("tabindex"),this.has_tab_index=!this.has_tab_index},convertToPercent:function(t,e){var i,s,n=this.options.max-this.options.min,o=n/100;return n?(i=e?t:t-this.options.min,s=i/o,this.toFixed(s)):(this.no_diapason=!0,0)},convertToValue:function(t){var e,i,s=this.options.min,n=this.options.max,o=s.toString().split(".")[1],r=n.toString().split(".")[1],a=0,l=0;if(0===t)return this.options.min;if(100===t)return this.options.max;o&&(e=o.length,a=e),r&&(i=r.length,a=i),e&&i&&(a=e>=i?e:i),s<0&&(l=Math.abs(s),s=+(s+l).toFixed(a),n=+(n+l).toFixed(a));var h,c=(n-s)/100*t+s,p=this.options.step.toString().split(".")[1];return p?c=+c.toFixed(p.length):(c/=this.options.step,c*=this.options.step,c=+c.toFixed(0)),l&&(c-=l),h=p?+c.toFixed(p.length):this.toFixed(c),h<this.options.min?h=this.options.min:h>this.options.max&&(h=this.options.max),h},calcWithStep:function(t){var e=Math.round(t/this.coords.p_step)*this.coords.p_step;return e>100&&(e=100),100===t&&(e=100),this.toFixed(e)},checkMinInterval:function(t,e,i){var s,n,o=this.options;return o.min_interval?(s=this.convertToValue(t),n=this.convertToValue(e),"from"===i?n-s<o.min_interval&&(s=n-o.min_interval):s-n<o.min_interval&&(s=n+o.min_interval),this.convertToPercent(s)):t},checkMaxInterval:function(t,e,i){var s,n,o=this.options;return o.max_interval?(s=this.convertToValue(t),n=this.convertToValue(e),"from"===i?n-s>o.max_interval&&(s=n-o.max_interval):s-n>o.max_interval&&(s=n+o.max_interval),this.convertToPercent(s)):t},checkDiapason:function(t,e,i){var s=this.convertToValue(t),n=this.options;return"number"!=typeof e&&(e=n.min),"number"!=typeof i&&(i=n.max),s<e&&(s=e),s>i&&(s=i),this.convertToPercent(s)},toFixed:function(t){return t=t.toFixed(20),+t},_prettify:function(t){return this.options.prettify_enabled?this.options.prettify&&"function"==typeof this.options.prettify?this.options.prettify(t):this.prettify(t):t},prettify:function(t){var e=t.toString();return e.replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g,"$1"+this.options.prettify_separator)},checkEdges:function(t,e){return this.options.force_edges?(t<0?t=0:t>100-e&&(t=100-e),this.toFixed(t)):this.toFixed(t)},validate:function(){var t,e,i=this.options,s=this.result,n=i.values,o=n.length;if("string"==typeof i.min&&(i.min=+i.min),"string"==typeof i.max&&(i.max=+i.max),"string"==typeof i.from&&(i.from=+i.from),"string"==typeof i.to&&(i.to=+i.to),
"string"==typeof i.step&&(i.step=+i.step),"string"==typeof i.from_min&&(i.from_min=+i.from_min),"string"==typeof i.from_max&&(i.from_max=+i.from_max),"string"==typeof i.to_min&&(i.to_min=+i.to_min),"string"==typeof i.to_max&&(i.to_max=+i.to_max),"string"==typeof i.grid_num&&(i.grid_num=+i.grid_num),i.max<i.min&&(i.max=i.min),o)for(i.p_values=[],i.min=0,i.max=o-1,i.step=1,i.grid_num=i.max,i.grid_snap=!0,e=0;e<o;e++)t=+n[e],isNaN(t)?t=n[e]:(n[e]=t,t=this._prettify(t)),i.p_values.push(t);("number"!=typeof i.from||isNaN(i.from))&&(i.from=i.min),("number"!=typeof i.to||isNaN(i.to))&&(i.to=i.max),"single"===i.type?(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max)):(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max),i.to<i.min&&(i.to=i.min),i.to>i.max&&(i.to=i.max),this.update_check.from&&(this.update_check.from!==i.from&&i.from>i.to&&(i.from=i.to),this.update_check.to!==i.to&&i.to<i.from&&(i.to=i.from)),i.from>i.to&&(i.from=i.to),i.to<i.from&&(i.to=i.from)),("number"!=typeof i.step||isNaN(i.step)||!i.step||i.step<0)&&(i.step=1),"number"==typeof i.from_min&&i.from<i.from_min&&(i.from=i.from_min),"number"==typeof i.from_max&&i.from>i.from_max&&(i.from=i.from_max),"number"==typeof i.to_min&&i.to<i.to_min&&(i.to=i.to_min),"number"==typeof i.to_max&&i.from>i.to_max&&(i.to=i.to_max),s&&(s.min!==i.min&&(s.min=i.min),s.max!==i.max&&(s.max=i.max),(s.from<s.min||s.from>s.max)&&(s.from=i.from),(s.to<s.min||s.to>s.max)&&(s.to=i.to)),("number"!=typeof i.min_interval||isNaN(i.min_interval)||!i.min_interval||i.min_interval<0)&&(i.min_interval=0),("number"!=typeof i.max_interval||isNaN(i.max_interval)||!i.max_interval||i.max_interval<0)&&(i.max_interval=0),i.min_interval&&i.min_interval>i.max-i.min&&(i.min_interval=i.max-i.min),i.max_interval&&i.max_interval>i.max-i.min&&(i.max_interval=i.max-i.min)},decorate:function(t,e){var i="",s=this.options;return s.prefix&&(i+=s.prefix),i+=t,s.max_postfix&&(s.values.length&&t===s.p_values[s.max]?(i+=s.max_postfix,s.postfix&&(i+=" ")):e===s.max&&(i+=s.max_postfix,s.postfix&&(i+=" "))),s.postfix&&(i+=s.postfix),i},updateFrom:function(){this.result.from=this.options.from,this.result.from_percent=this.convertToPercent(this.result.from),this.result.from_pretty=this._prettify(this.result.from),this.options.values&&(this.result.from_value=this.options.values[this.result.from])},updateTo:function(){this.result.to=this.options.to,this.result.to_percent=this.convertToPercent(this.result.to),this.result.to_pretty=this._prettify(this.result.to),this.options.values&&(this.result.to_value=this.options.values[this.result.to])},updateResult:function(){this.result.min=this.options.min,this.result.max=this.options.max,this.updateFrom(),this.updateTo()},appendGrid:function(){if(this.options.grid){var t,e,i,s,n,o=this.options,r=o.max-o.min,a=o.grid_num,l=0,h=0,c=4,p=0,u="";for(this.calcGridMargin(),o.grid_snap?r>50?(a=50/o.step,l=this.toFixed(o.step/.5)):(a=r/o.step,l=this.toFixed(o.step/(r/100))):l=this.toFixed(100/a),a>4&&(c=3),a>7&&(c=2),a>14&&(c=1),a>28&&(c=0),t=0;t<a+1;t++){for(i=c,h=this.toFixed(l*t),h>100&&(h=100),this.coords.big[t]=h,s=(h-l*(t-1))/(i+1),e=1;e<=i&&0!==h;e++)p=this.toFixed(h-s*e),u+='<span class="irs-grid-pol small" style="left: '+p+'%"></span>';u+='<span class="irs-grid-pol" style="left: '+h+'%"></span>',n=this.convertToValue(h),n=o.values.length?o.p_values[n]:this._prettify(n),u+='<span class="irs-grid-text js-grid-text-'+t+'" style="left: '+h+'%">'+n+"</span>"}this.coords.big_num=Math.ceil(a+1),this.$cache.cont.addClass("irs-with-grid"),this.$cache.grid.html(u),this.cacheGridLabels()}},cacheGridLabels:function(){var t,e,i=this.coords.big_num;for(e=0;e<i;e++)t=this.$cache.grid.find(".js-grid-text-"+e),this.$cache.grid_labels.push(t);this.calcGridLabels()},calcGridLabels:function(){var t,e,i=[],s=[],n=this.coords.big_num;for(t=0;t<n;t++)this.coords.big_w[t]=this.$cache.grid_labels[t].outerWidth(!1),this.coords.big_p[t]=this.toFixed(this.coords.big_w[t]/this.coords.w_rs*100),this.coords.big_x[t]=this.toFixed(this.coords.big_p[t]/2),i[t]=this.toFixed(this.coords.big[t]-this.coords.big_x[t]),s[t]=this.toFixed(i[t]+this.coords.big_p[t]);for(this.options.force_edges&&(i[0]<-this.coords.grid_gap&&(i[0]=-this.coords.grid_gap,s[0]=this.toFixed(i[0]+this.coords.big_p[0]),this.coords.big_x[0]=this.coords.grid_gap),s[n-1]>100+this.coords.grid_gap&&(s[n-1]=100+this.coords.grid_gap,i[n-1]=this.toFixed(s[n-1]-this.coords.big_p[n-1]),this.coords.big_x[n-1]=this.toFixed(this.coords.big_p[n-1]-this.coords.grid_gap))),this.calcGridCollision(2,i,s),this.calcGridCollision(4,i,s),t=0;t<n;t++)e=this.$cache.grid_labels[t][0],this.coords.big_x[t]!==Number.POSITIVE_INFINITY&&(e.style.marginLeft=-this.coords.big_x[t]+"%")},calcGridCollision:function(t,e,i){var s,n,o,r=this.coords.big_num;for(s=0;s<r&&(n=s+t/2,!(n>=r));s+=t)o=this.$cache.grid_labels[n][0],i[s]<=e[n]?o.style.visibility="visible":o.style.visibility="hidden"},calcGridMargin:function(){this.options.grid_margin&&(this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&("single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100),this.coords.grid_gap=this.toFixed(this.coords.p_handle/2-.1),this.$cache.grid[0].style.width=this.toFixed(100-this.coords.p_handle)+"%",this.$cache.grid[0].style.left=this.coords.grid_gap+"%"))},update:function(e){this.input&&(this.is_update=!0,this.options.from=this.result.from,this.options.to=this.result.to,this.update_check.from=this.result.from,this.update_check.to=this.result.to,this.options=t.extend(this.options,e),this.validate(),this.updateResult(e),this.toggleInput(),this.remove(),this.init(!0))},reset:function(){this.input&&(this.updateResult(),this.update())},destroy:function(){this.input&&(this.toggleInput(),this.$cache.input.prop("readonly",!1),t.data(this.input,"ionRangeSlider",null),this.remove(),this.input=null,this.options=null)}},t.fn.ionRangeSlider=function(e){return this.each(function(){t.data(this,"ionRangeSlider")||t.data(this,"ionRangeSlider",new p(this,e,(o++)))})},function(){for(var t=0,e=["ms","moz","webkit","o"],s=0;s<e.length&&!i.requestAnimationFrame;++s)i.requestAnimationFrame=i[e[s]+"RequestAnimationFrame"],i.cancelAnimationFrame=i[e[s]+"CancelAnimationFrame"]||i[e[s]+"CancelRequestAnimationFrame"];i.requestAnimationFrame||(i.requestAnimationFrame=function(e,s){var n=(new Date).getTime(),o=Math.max(0,16-(n-t)),r=i.setTimeout(function(){e(n+o)},o);return t=n+o,r}),i.cancelAnimationFrame||(i.cancelAnimationFrame=function(t){clearTimeout(t)})}()}),function(t,e,i,s){function n(e,i){this.settings=null,this.options=t.extend({},n.Defaults,i),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,i){this._handlers[i]=t.proxy(this[i],this)},this)),t.each(n.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(n.Workers,t.proxy(function(e,i){this._pipe.push({filter:i.filter,run:t.proxy(i.run,this)})},this)),this.setup(),this.initialize()}n.Defaults={items:3,loop:!1,center:!1,rewind:!1,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,fallbackEasing:"swing",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},n.Width={Default:"default",Inner:"inner",Outer:"outer"},n.Type={Event:"event",State:"state"},n.Plugins={},n.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",i=!this.settings.autoWidth,s=this.settings.rtl,n={width:"auto","margin-left":s?e:"","margin-right":s?"":e};!i&&this.$stage.children().css(n),t.css=n}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,i=null,s=this._items.length,n=!this.settings.autoWidth,o=[];for(t.items={merge:!1,width:e};s--;)i=this._mergers[s],i=this.settings.mergeFit&&Math.min(i,this.settings.items)||i,t.items.merge=i>1||t.items.merge,o[s]=n?e*i:this._items[s].width();this._widths=o}},{filter:["items","settings"],run:function(){var e=[],i=this._items,s=this.settings,n=Math.max(2*s.items,4),o=2*Math.ceil(i.length/2),r=s.loop&&i.length?s.rewind?n:Math.max(n,o):0,a="",l="";for(r/=2;r--;)e.push(this.normalize(e.length/2,!0)),a+=i[e[e.length-1]][0].outerHTML,e.push(this.normalize(i.length-1-(e.length-1)/2,!0)),l=i[e[e.length-1]][0].outerHTML+l;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,i=-1,s=0,n=0,o=[];++i<e;)s=o[i-1]||0,n=this._widths[this.relative(i)]+this.settings.margin,o.push(s+n*t);this._coordinates=o}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,i={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(i)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,i=!this.settings.autoWidth,s=this.$stage.children();if(i&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],s.eq(e).css(t.css);else i&&(t.css.width=t.items.width,s.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,i,s,n=this.settings.rtl?1:-1,o=2*this.settings.stagePadding,r=this.coordinates(this.current())+o,a=r+this.width()*n,l=[];for(i=0,s=this._coordinates.length;i<s;i++)t=this._coordinates[i-1]||0,e=Math.abs(this._coordinates[i])+o*n,(this.op(t,"<=",r)&&this.op(t,">",a)||this.op(e,"<",r)&&this.op(e,">",a))&&l.push(i);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.settings.center&&(this.$stage.children(".center").removeClass("center"),this.$stage.children().eq(this.current()).addClass("center"))}}],n.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var e,i,n;e=this.$element.find("img"),i=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:s,n=this.$element.children(i).width(),e.length&&n<=0&&this.preloadAutoWidthImages(e)}this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+' class="'+this.settings.stageClass+'"/>').wrap('<div class="'+this.settings.stageOuterClass+'"/>'),this.$element.append(this.$stage.parent()),this.replace(this.$element.children().not(this.$stage.parent())),this.$element.is(":visible")?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},n.prototype.setup=function(){var e=this.viewport(),i=this.options.responsive,s=-1,n=null;i?(t.each(i,function(t){t<=e&&t>s&&(s=Number(t))}),n=t.extend({},this.options,i[s]),"function"==typeof n.stagePadding&&(n.stagePadding=n.stagePadding()),delete n.responsive,n.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+s))):n=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:n}}),this._breakpoint=s,this.settings=n,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},n.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},n.prototype.prepare=function(e){var i=this.trigger("prepare",{content:e});return i.data||(i.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:i.data}),i.data},n.prototype.update=function(){for(var e=0,i=this._pipe.length,s=t.proxy(function(t){return this[t]},this._invalidated),n={};e<i;)(this._invalidated.all||t.grep(this._pipe[e].filter,s).length>0)&&this._pipe[e].run(n),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},n.prototype.width=function(t){switch(t=t||n.Width.Default){case n.Width.Inner:case n.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},n.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},n.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},n.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.$element.is(":visible")&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},n.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),this.settings.responsive!==!1&&this.on(e,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},n.prototype.onDragStart=function(e){var s=null;3!==e.which&&(t.support.transform?(s=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","),s={x:s[16===s.length?12:4],y:s[16===s.length?13:5]}):(s=this.$stage.position(),s={x:this.settings.rtl?s.left+this.$stage.width()-this.width()+this.settings.margin:s.left,y:s.top}),this.is("animating")&&(t.support.transform?this.animate(s.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=s,this._drag.stage.current=s,this._drag.pointer=this.pointer(e),t(i).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(i).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var s=this.difference(this._drag.pointer,this.pointer(e));t(i).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(s.x)<Math.abs(s.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},n.prototype.onDragMove=function(t){var e=null,i=null,s=null,n=this.difference(this._drag.pointer,this.pointer(t)),o=this.difference(this._drag.stage.start,n);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),i=this.coordinates(this.maximum()+1)-e,o.x=((o.x-e)%i+i)%i+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),i=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),s=this.settings.pullDrag?-1*n.x/5:0,o.x=Math.max(Math.min(o.x,e+s),i+s)),this._drag.stage.current=o,this.animate(o.x))},n.prototype.onDragEnd=function(e){var s=this.difference(this._drag.pointer,this.pointer(e)),n=this._drag.stage.current,o=s.x>0^this.settings.rtl?"left":"right";t(i).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==s.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(n.x,0!==s.x?o:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=o,(Math.abs(s.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},n.prototype.closest=function(e,i){var s=-1,n=30,o=this.width(),r=this.coordinates();return this.settings.freeDrag||t.each(r,t.proxy(function(t,a){return"left"===i&&e>a-n&&e<a+n?s=t:"right"===i&&e>a-o-n&&e<a-o+n?s=t+1:this.op(e,"<",a)&&this.op(e,">",r[t+1]||a-o)&&(s="left"===i?t+1:t),s===-1},this)),this.settings.loop||(this.op(e,">",r[this.minimum()])?s=e=this.minimum():this.op(e,"<",r[this.maximum()])&&(s=e=this.maximum())),s},n.prototype.animate=function(e){var i=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),i&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"}):i?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},n.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},n.prototype.current=function(t){if(t===s)return this._current;if(0===this._items.length)return s;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==s&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},n.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},n.prototype.reset=function(t){t=this.normalize(t),t!==s&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},n.prototype.normalize=function(t,e){var i=this._items.length,n=e?0:this._clones.length;return!this.isNumeric(t)||i<1?t=s:(t<0||t>=i+n)&&(t=((t-n/2)%i+i)%i+n/2),t},n.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},n.prototype.maximum=function(t){var e,i,s,n=this.settings,o=this._coordinates.length;if(n.loop)o=this._clones.length/2+this._items.length-1;else if(n.autoWidth||n.merge){for(e=this._items.length,i=this._items[--e].width(),s=this.$element.width();e--&&(i+=this._items[e].width()+this.settings.margin,!(i>s)););o=e+1}else o=n.center?this._items.length-1:this._items.length-n.items;return t&&(o-=this._clones.length/2),Math.max(o,0)},n.prototype.minimum=function(t){return t?0:this._clones.length/2},n.prototype.items=function(t){return t===s?this._items.slice():(t=this.normalize(t,!0),this._items[t])},n.prototype.mergers=function(t){return t===s?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},n.prototype.clones=function(e){var i=this._clones.length/2,n=i+this._items.length,o=function(t){return t%2===0?n+t/2:i-(t+1)/2};return e===s?t.map(this._clones,function(t,e){return o(e)}):t.map(this._clones,function(t,i){return t===e?o(i):null})},n.prototype.speed=function(t){return t!==s&&(this._speed=t),this._speed},n.prototype.coordinates=function(e){var i,n=1,o=e-1;return e===s?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(n=-1,o=e+1),i=this._coordinates[e],i+=(this.width()-i+(this._coordinates[o]||0))/2*n):i=this._coordinates[o]||0,i=Math.ceil(i))},n.prototype.duration=function(t,e,i){return 0===i?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(i||this.settings.smartSpeed)},n.prototype.to=function(t,e){var i=this.current(),s=null,n=t-this.relative(i),o=(n>0)-(n<0),r=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(n)>r/2&&(n+=o*-1*r),t=i+n,s=((t-a)%r+r)%r+a,s!==t&&s-n<=l&&s-n>0&&(i=s-n,t=s,this.reset(i))):this.settings.rewind?(l+=1,t=(t%l+l)%l):t=Math.max(a,Math.min(l,t)),this.speed(this.duration(i,t,e)),this.current(t),this.$element.is(":visible")&&this.update()},n.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},n.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},n.prototype.onTransitionEnd=function(t){return(t===s||(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)===this.$stage.get(0)))&&(this.leave("animating"),void this.trigger("translated"))},n.prototype.viewport=function(){var s;return this.options.responsiveBaseElement!==e?s=t(this.options.responsiveBaseElement).width():e.innerWidth?s=e.innerWidth:i.documentElement&&i.documentElement.clientWidth?s=i.documentElement.clientWidth:console.warn("Can not detect viewport width."),s},n.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},n.prototype.add=function(e,i){var n=this.relative(this._current);i=i===s?this._items.length:this.normalize(i,!0),e=e instanceof jQuery?e:t(e),this.trigger("add",{content:e,position:i}),e=this.prepare(e),0===this._items.length||i===this._items.length?(0===this._items.length&&this.$stage.append(e),0!==this._items.length&&this._items[i-1].after(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[i].before(e),this._items.splice(i,0,e),this._mergers.splice(i,0,1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[n]&&this.reset(this._items[n].index()),this.invalidate("items"),this.trigger("added",{content:e,position:i})},n.prototype.remove=function(t){t=this.normalize(t,!0),t!==s&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},n.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,i){this.enter("pre-loading"),i=t(i),t(new Image).one("load",t.proxy(function(t){i.attr("src",t.target.src),i.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",i.attr("src")||i.attr("data-src")||i.attr("data-src-retina"))},this))},n.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(i).off(".owl.core"),this.settings.responsive!==!1&&(e.clearTimeout(this.resizeTimer),this.off(e,"resize",this._handlers.onThrottledResize));for(var s in this._plugins)this._plugins[s].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},n.prototype.op=function(t,e,i){var s=this.settings.rtl;switch(e){case"<":return s?t>i:t<i;case">":return s?t<i:t>i;case">=":return s?t<=i:t>=i;case"<=":return s?t>=i:t<=i}},n.prototype.on=function(t,e,i,s){t.addEventListener?t.addEventListener(e,i,s):t.attachEvent&&t.attachEvent("on"+e,i)},n.prototype.off=function(t,e,i,s){t.removeEventListener?t.removeEventListener(e,i,s):t.detachEvent&&t.detachEvent("on"+e,i)},n.prototype.trigger=function(e,i,s,o,r){var a={item:{count:this._items.length,index:this.current()}},l=t.camelCase(t.grep(["on",e,s],function(t){return t}).join("-").toLowerCase()),h=t.Event([e,"owl",s||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,i));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(h)}),this.register({type:n.Type.Event,name:e}),this.$element.trigger(h),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,h)),h},n.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]===s&&(this._states.current[e]=0),this._states.current[e]++},this))},n.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},n.prototype.register=function(e){if(e.type===n.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var i=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!i||!i.apply||t.namespace&&t.namespace.indexOf("owl")!==-1?t.namespace&&t.namespace.indexOf("owl")>-1:i.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===n.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(i,s){return t.inArray(i,this._states.tags[e.name])===s},this)))},n.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},n.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},n.prototype.pointer=function(t){var i={x:null,y:null};return t=t.originalEvent||t||e.event,t=t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,t.pageX?(i.x=t.pageX,i.y=t.pageY):(i.x=t.clientX,i.y=t.clientY),i},n.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},n.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var i=Array.prototype.slice.call(arguments,1);return this.each(function(){var s=t(this),o=s.data("owl.carousel");o||(o=new n(this,"object"==typeof e&&e),s.data("owl.carousel",o),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,i){o.register({type:n.Type.Event,name:i}),o.$element.on(i+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([i]),o[i].apply(this,[].slice.call(arguments,1)),this.release([i]))},o))})),"string"==typeof e&&"_"!==e.charAt(0)&&o[e].apply(o,i)})},t.fn.owlCarousel.Constructor=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={autoRefresh:!0,autoRefreshInterval:500},n.prototype.watch=function(){this._interval||(this._visible=this._core.$element.is(":visible"),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},n.prototype.refresh=function(){this._core.$element.is(":visible")!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},n.prototype.destroy=function(){var t,i;e.clearInterval(this._interval);for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type))for(var i=this._core.settings,n=i.center&&Math.ceil(i.items/2)||i.items,o=i.center&&n*-1||0,r=(e.property&&e.property.value!==s?e.property.value:this._core.current())+o,a=this._core.clones().length,l=t.proxy(function(t,e){this.load(e)},this);o++<n;)this.load(a/2+this._core.relative(r)),a&&t.each(this._core.clones(this._core.relative(r)),l),r++},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={lazyLoad:!1},n.prototype.load=function(i){var s=this._core.$stage.children().eq(i),n=s&&s.find(".owl-lazy");!n||t.inArray(s.get(0),this._loaded)>-1||(n.each(t.proxy(function(i,s){var n,o=t(s),r=e.devicePixelRatio>1&&o.attr("data-src-retina")||o.attr("data-src");this._core.trigger("load",{element:o,url:r},"lazy"),o.is("img")?o.one("load.owl.lazy",t.proxy(function(){o.css("opacity",1),this._core.trigger("loaded",{element:o,url:r},"lazy")},this)).attr("src",r):(n=new Image,n.onload=t.proxy(function(){o.css({"background-image":'url("'+r+'")',opacity:"1"}),this._core.trigger("loaded",{element:o,url:r},"lazy")},this),n.src=r)},this)),this._loaded.push(s.get(0)))},n.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"==t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},n.prototype.update=function(){var e=this._core._current,i=e+this._core.settings.items,s=this._core.$stage.children().toArray().slice(e,i),n=[],o=0;t.each(s,function(e,i){n.push(t(i).height())}),o=Math.max.apply(null,n),this._core.$stage.parent().height(o).addClass(this._core.settings.autoHeightClass)},n.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);
for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find(".owl-video");i.length&&(i.css("display","none"),this.fetch(i,t(e.content)))}},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};n.Defaults={video:!1,videoHeight:!1,videoWidth:!1},n.prototype.fetch=function(t,e){var i=function(){return t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube"}(),s=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),n=t.attr("data-width")||this._core.settings.videoWidth,o=t.attr("data-height")||this._core.settings.videoHeight,r=t.attr("href");if(!r)throw new Error("Missing video URL.");if(s=r.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/),s[3].indexOf("youtu")>-1)i="youtube";else if(s[3].indexOf("vimeo")>-1)i="vimeo";else{if(!(s[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");i="vzaar"}s=s[6],this._videos[r]={type:i,id:s,width:n,height:o},e.attr("data-video",r),this.thumbnail(t,this._videos[r])},n.prototype.thumbnail=function(e,i){var s,n,o,r=i.width&&i.height?'style="width:'+i.width+"px;height:"+i.height+'px;"':"",a=e.find("img"),l="src",h="",c=this._core.settings,p=function(t){n='<div class="owl-video-play-icon"></div>',s=c.lazyLoad?'<div class="owl-video-tn '+h+'" '+l+'="'+t+'"></div>':'<div class="owl-video-tn" style="opacity:1;background-image:url('+t+')"></div>',e.after(s),e.after(n)};return e.wrap('<div class="owl-video-wrapper"'+r+"></div>"),this._core.settings.lazyLoad&&(l="data-src",h="owl-lazy"),a.length?(p(a.attr(l)),a.remove(),!1):void("youtube"===i.type?(o="//img.youtube.com/vi/"+i.id+"/hqdefault.jpg",p(o)):"vimeo"===i.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t[0].thumbnail_large,p(o)}}):"vzaar"===i.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){o=t.framegrab_url,p(o)}}))},n.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},n.prototype.play=function(e){var i,s=t(e.target),n=s.closest("."+this._core.settings.itemClass),o=this._videos[n.attr("data-video")],r=o.width||"100%",a=o.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),n=this._core.items(this._core.relative(n.index())),this._core.reset(n.index()),"youtube"===o.type?i='<iframe width="'+r+'" height="'+a+'" src="//www.youtube.com/embed/'+o.id+"?autoplay=1&rel=0&v="+o.id+'" frameborder="0" allowfullscreen></iframe>':"vimeo"===o.type?i='<iframe src="//player.vimeo.com/video/'+o.id+'?autoplay=1" width="'+r+'" height="'+a+'" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>':"vzaar"===o.type&&(i='<iframe frameborder="0"height="'+a+'"width="'+r+'" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/'+o.id+'/player?autoplay=true"></iframe>'),t('<div class="owl-video-frame">'+i+"</div>").insertAfter(n.find(".owl-video")),this._playing=n.addClass("owl-video-playing"))},n.prototype.isInFullScreen=function(){var e=i.fullscreenElement||i.mozFullScreenElement||i.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},n.prototype.destroy=function(){var t,e;this._core.$element.off("click.owl.video");for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this.core=e,this.core.options=t.extend({},n.Defaults,this.core.options),this.swapping=!0,this.previous=s,this.next=s,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};n.Defaults={animateOut:!1,animateIn:!1},n.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,i=t.proxy(this.clear,this),s=this.core.$stage.children().eq(this.previous),n=this.core.$stage.children().eq(this.next),o=this.core.settings.animateIn,r=this.core.settings.animateOut;this.core.current()!==this.previous&&(r&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),s.one(t.support.animation.end,i).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(r)),o&&n.one(t.support.animation.end,i).addClass("animated owl-animated-in").addClass(o))}},n.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},n.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){var n=function(e){this._core=e,this._timeout=null,this._paused=!1,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._core.settings.autoplay&&this._setAutoPlayInterval()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,i){t.namespace&&this.play(e,i)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},n.Defaults,this._core.options)};n.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},n.prototype.play=function(t,e){this._paused=!1,this._core.is("rotating")||(this._core.enter("rotating"),this._setAutoPlayInterval())},n.prototype._getNextTimeout=function(s,n){return this._timeout&&e.clearTimeout(this._timeout),e.setTimeout(t.proxy(function(){this._paused||this._core.is("busy")||this._core.is("interacting")||i.hidden||this._core.next(n||this._core.settings.autoplaySpeed)},this),s||this._core.settings.autoplayTimeout)},n.prototype._setAutoPlayInterval=function(){this._timeout=this._getNextTimeout()},n.prototype.stop=function(){this._core.is("rotating")&&(e.clearTimeout(this._timeout),this._core.leave("rotating"))},n.prototype.pause=function(){this._core.is("rotating")&&(this._paused=!0)},n.prototype.destroy=function(){var t,e;this.stop();for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){"use strict";var n=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this.$element.on(this._handlers)};n.Defaults={nav:!1,navText:["prev","next"],navSpeed:!1,navElement:"div",navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},n.prototype.initialize=function(){var e,i=this._core.settings;this._controls.$relative=(i.navContainer?t(i.navContainer):t("<div>").addClass(i.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+i.navElement+">").addClass(i.navClass[0]).html(i.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(i.navSpeed)},this)),this._controls.$next=t("<"+i.navElement+">").addClass(i.navClass[1]).html(i.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(i.navSpeed)},this)),i.dotsData||(this._templates=[t("<div>").addClass(i.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(i.dotsContainer?t(i.dotsContainer):t("<div>").addClass(i.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","div",t.proxy(function(e){var s=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(s,i.dotsSpeed)},this));for(e in this._overrides)this._core[e]=t.proxy(this[e],this)},n.prototype.destroy=function(){var t,e,i,s;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)this._controls[e].remove();for(s in this.overides)this._core[s]=this._overrides[s];for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},n.prototype.update=function(){var t,e,i,s=this._core.clones().length/2,n=s+this._core.items().length,o=this._core.maximum(!0),r=this._core.settings,a=r.center||r.autoWidth||r.dotsData?1:r.dotsEach||r.items;if("page"!==r.slideBy&&(r.slideBy=Math.min(r.slideBy,r.items)),r.dots||"page"==r.slideBy)for(this._pages=[],t=s,e=0,i=0;t<n;t++){if(e>=a||0===e){if(this._pages.push({start:Math.min(o,t-s),end:t-s+a-1}),Math.min(o,t-s)===o)break;e=0,++i}e+=this._core.mergers(this._core.relative(t))}},n.prototype.draw=function(){var e,i=this._core.settings,s=this._core.items().length<=i.items,n=this._core.relative(this._core.current()),o=i.loop||i.rewind;this._controls.$relative.toggleClass("disabled",!i.nav||s),i.nav&&(this._controls.$previous.toggleClass("disabled",!o&&n<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!o&&n>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!i.dots||s),i.dots&&(e=this._pages.length-this._controls.$absolute.children().length,i.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},n.prototype.onTrigger=function(e){var i=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:i&&(i.center||i.autoWidth||i.dotsData?1:i.dotsEach||i.items)}},n.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,i){return t.start<=e&&t.end>=e},this)).pop()},n.prototype.getPosition=function(e){var i,s,n=this._core.settings;return"page"==n.slideBy?(i=t.inArray(this.current(),this._pages),s=this._pages.length,e?++i:--i,i=this._pages[(i%s+s)%s].start):(i=this._core.relative(this._core.current()),s=this._core.items().length,e?i+=n.slideBy:i-=n.slideBy),i},n.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},n.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},n.prototype.to=function(e,i,s){var n;!s&&this._pages.length?(n=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%n+n)%n].start,i)):t.proxy(this._overrides.to,this._core)(e,i)},t.fn.owlCarousel.Constructor.Plugins.Navigation=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){"use strict";var n=function(i){this._core=i,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(i){i.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var i=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!i)return;this._hashes[i]=e.content}},this),"changed.owl.carousel":t.proxy(function(i){if(i.namespace&&"position"===i.property.name){var s=this._core.items(this._core.relative(this._core.current())),n=t.map(this._hashes,function(t,e){return t===s?e:null}).join();if(!n||e.location.hash.slice(1)===n)return;e.location.hash=n}},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var i=e.location.hash.substring(1),n=this._core.$stage.children(),o=this._hashes[i]&&n.index(this._hashes[i]);o!==s&&o!==this._core.current()&&this._core.to(this._core.relative(o),!1,!0)},this))};n.Defaults={URLhashListener:!1},n.prototype.destroy=function(){var i,s;t(e).off("hashchange.owl.navigation");for(i in this._handlers)this._core.$element.off(i,this._handlers[i]);for(s in Object.getOwnPropertyNames(this))"function"!=typeof this[s]&&(this[s]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,s){function n(e,i){var n=!1,o=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+a.join(o+" ")+o).split(" "),function(t,e){if(r[e]!==s)return n=!i||e,!1}),n}function o(t){return n(t,!0)}var r=t("<support>").get(0).style,a="Webkit Moz O ms".split(" "),l={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},h={csstransforms:function(){return!!n("transform")},csstransforms3d:function(){return!!n("perspective")},csstransitions:function(){return!!n("transition")},cssanimations:function(){return!!n("animation")}};h.csstransitions()&&(t.support.transition=new String(o("transition")),t.support.transition.end=l.transition.end[t.support.transition]),h.cssanimations()&&(t.support.animation=new String(o("animation")),t.support.animation.end=l.animation.end[t.support.animation]),h.csstransforms()&&(t.support.transform=new String(o("transform")),t.support.transform3d=h.csstransforms3d())}(window.Zepto||window.jQuery,window,document),CountdownTimer.prototype={initialize:function(t,e,i){this.elem=document.getElementById(t),this.tl=e,this.mes=i},countDown:function(){var t="",e=new Date,i=Math.floor((this.tl-e)/864e5),s=Math.floor((this.tl-e)%864e5/36e5),n=Math.floor((this.tl-e)%864e5/6e4)%60,o=(Math.floor((this.tl-e)%864e5/1e3)%60%60,this);return this.tl-e>0?(t+='<span class="countdown__item"><span class="countdown__number">'+i+'</span><div class="countdown__caption">дней</div></span>',t+='<span class="countdown__item"><span class="countdown__number">: '+s+'</span><div class="countdown__caption">часов</div></span>',t+='<span class="countdown__item"><span class="countdown__number">: '+this.addZero(n)+'</span><div class="countdown__caption">минут</div></span>',this.elem.innerHTML=t,tid=setTimeout(function(){o.countDown()},10),void 0):void(this.elem.innerHTML=this.mes)},addZero:function(t){return("0"+t).slice(-2)}},window.onload=function(){countdown()},$(document).ready(function(){$(function(){$("#rangeSlider").ionRangeSlider({type:"single",grid:!0,min:1,max:10,from:5.5,grid_num:9,step:.5,hide_min_max:!0,postfix:" м<sup>2</sup>"})}),$(function(){$(".tabs__items").on("click","li:not(.active)",function(){$(this).addClass("tabs__item_active").siblings().removeClass("tabs__item_active").closest(".tabs").find(".tabs__content").removeClass("tabs__content_active").eq($(this).index()).addClass("tabs__content_active")})}),$(function(){$(".slider-js-1").owlCarousel({items:1});var t=$(".slider-js-1");t.owlCarousel(),$(".customNextBtn").click(function(){t.trigger("next.owl.carousel")}),$(".customPrevBtn").click(function(){t.trigger("prev.owl.carousel")})}),$(function(){$(".slider-js-2").owlCarousel({items:1});var t=$(".slider-js-2");t.owlCarousel(),$(".customNextBtn2").click(function(){t.trigger("next.owl.carousel")}),$(".customPrevBtn2").click(function(){t.trigger("prev.owl.carousel")})}),$(function(){$(".header-nav-mob").click(function(){$(".icon__menu").toggleClass("active"),$(".header-nav").is(":visible")?$(".header-nav").fadeOut(0):$(".header-nav").fadeIn(0)}),$(".header-nav__link").click(function(){$(".header-nav-mob").is(":visible")&&($(".header-nav").fadeOut(0),$(".icon__menu").toggleClass("active"))})}),$(function(){$(".tabs__item").click(function(){$(".tabs__items").toggleClass("selected")})}),$(function(){$(".list").click(function(){$(".list").not(this).removeClass("on"),$(this).toggleClass("on")})}),$(function(){$(".list__all-btn").click(function(){$(".tabs-block_primary .list").hasClass("close")?($(this).html("Скрыть полный перечень"),$(".close").addClass("open"),$(".close").removeClass("close")):$(".list").hasClass("open")&&($(this).html("Смотреть полный перечень"),$(".open").addClass("close"),$(".open").removeClass("open"))})}),$(function(){var t=function(){$(window).width()<=767?$(".slider-js-3").owlCarousel({items:1}):$(".slider-js-3").owlCarousel("destroy")};t(),$(window).resize(t)})}),get_name_browser();var w_d=$(window).width();$(document).ready(function(){var t=$(".header-top");$(window).scroll(function(){if($(this).scrollTop()>100&&t.hasClass("default")){t.removeClass("default").addClass("navbar-fixed-top");var e=String(Number($(".header-top").css("height").substring(0,$(".header-top").css("height").length-2)))+"px";$(".header-main").css("margin-top",e),w_d<583&&($(".header-main").css("margin-top","180px"),$(".navbar_xs").css("margin-top",String(Number($(".header-top").css("height").substring(0,$(".header-top").css("height").length-2)))+"px"))}else $(this).scrollTop()<=100&&t.hasClass("navbar-fixed-top")&&(t.removeClass("navbar-fixed-top").addClass("default"),$(".header-main").css("margin-top","0px"),w_d<583&&$(".navbar_xs").css("margin-top","0px"))})}),$("document").ready(function(){$(".scroll").on("click touch","a",function(t){t.preventDefault();var e=$(this).attr("href"),i=$(e).offset().top-80;w_d<583&&(i=$(e).offset().top-40),$("body,html").animate({scrollTop:i},1e3)})}),$(".scroll > a").on("click touch",function(){this.hash&&$(document).data("h",1)}),$(document).scroll(function(){$(this).data("h")&&$(this).data("h",0).scrollTop($(this).scrollTop()-200)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiQ291bnRkb3duVGltZXIiLCJlbG0iLCJ0bCIsIm1lcyIsInRoaXMiLCJpbml0aWFsaXplIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjb3VudGRvd24iLCJEYXRlIiwidGltZXIiLCJjb3VudERvd24iLCJnZXRfbmFtZV9icm93c2VyIiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzZWFyY2giLCIkIiwiYWRkQ2xhc3MiLCJjc3MiLCJyZWFkeSIsImlucF8xIiwiaW5wX3ZhbCIsInZhbCIsImlucF9taW4iLCJhdHRyIiwiaW5wX21heCIsImlucF93aWR0aCIsIndpZHRoIiwiY291bnQiLCJoYXNDbGFzcyIsImNoYW5nZSIsImlucF8yIiwiYmluZCIsImRvY3VtZW50IiwiY2xpY2siLCJldmVudCIsInRhcmdldCIsImNsb3Nlc3QiLCJsZW5ndGgiLCJzdG9wUHJvcGFnYXRpb24iLCJ2YWxpZGF0ZSIsImlucCIsInZhbHVlIiwicmVwbGFjZSIsImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwidyIsIkVycm9yIiwid2luZG93Iiwibm9HbG9iYWwiLCJpc0FycmF5TGlrZSIsIm9iaiIsInR5cGUiLCJqUXVlcnkiLCJpc1dpbmRvdyIsIndpbm5vdyIsImVsZW1lbnRzIiwicXVhbGlmaWVyIiwibm90IiwiaXNGdW5jdGlvbiIsImdyZXAiLCJlbGVtIiwiaSIsImNhbGwiLCJub2RlVHlwZSIsInJpc1NpbXBsZSIsInRlc3QiLCJmaWx0ZXIiLCJpbmRleE9mIiwic2libGluZyIsImN1ciIsImRpciIsImNyZWF0ZU9wdGlvbnMiLCJvcHRpb25zIiwib2JqZWN0IiwiZWFjaCIsIm1hdGNoIiwicm5vdHdoaXRlIiwiXyIsImZsYWciLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiRGF0YSIsImV4cGFuZG8iLCJ1aWQiLCJkYXRhQXR0ciIsImtleSIsImRhdGEiLCJuYW1lIiwidW5kZWZpbmVkIiwicm11bHRpRGFzaCIsInRvTG93ZXJDYXNlIiwiZ2V0QXR0cmlidXRlIiwicmJyYWNlIiwicGFyc2VKU09OIiwiZSIsImRhdGFVc2VyIiwic2V0IiwiYWRqdXN0Q1NTIiwicHJvcCIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwicmNzc051bSIsImV4ZWMiLCJzdHlsZSIsInN0YXJ0IiwiZW5kIiwiZ2V0QWxsIiwiY29udGV4dCIsInRhZyIsInJldCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicXVlcnlTZWxlY3RvckFsbCIsIm5vZGVOYW1lIiwibWVyZ2UiLCJzZXRHbG9iYWxFdmFsIiwiZWxlbXMiLCJyZWZFbGVtZW50cyIsImwiLCJkYXRhUHJpdiIsImdldCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsInRtcCIsIndyYXAiLCJjb250YWlucyIsImoiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsInJodG1sIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVFbGVtZW50IiwicnRhZ05hbWUiLCJ3cmFwTWFwIiwiX2RlZmF1bHQiLCJpbm5lckhUTUwiLCJodG1sUHJlZmlsdGVyIiwibGFzdENoaWxkIiwiY2hpbGROb2RlcyIsImZpcnN0Q2hpbGQiLCJ0ZXh0Q29udGVudCIsInB1c2giLCJjcmVhdGVUZXh0Tm9kZSIsImluQXJyYXkiLCJvd25lckRvY3VtZW50IiwicnNjcmlwdFR5cGUiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImFjdGl2ZUVsZW1lbnQiLCJlcnIiLCJvbiIsInR5cGVzIiwic2VsZWN0b3IiLCJmbiIsIm9uZSIsIm9yaWdGbiIsIm9mZiIsImd1aWQiLCJhZGQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJjb250ZW50IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJlbW92ZUF0dHJpYnV0ZSIsImNsb25lQ29weUV2ZW50Iiwic3JjIiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZXZlbnRzIiwiaGFzRGF0YSIsImFjY2VzcyIsImhhbmRsZSIsImV4dGVuZCIsImZpeElucHV0IiwicmNoZWNrYWJsZVR5cGUiLCJjaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiYXJncyIsImNhbGxiYWNrIiwiY29uY2F0IiwiZmlyc3QiLCJoYXNTY3JpcHRzIiwibm9kZSIsImRvYyIsImlOb0Nsb25lIiwic3VwcG9ydCIsImNoZWNrQ2xvbmUiLCJyY2hlY2tlZCIsImluZGV4Iiwic2VsZiIsImVxIiwiaHRtbCIsIm1hcCIsImNsb25lIiwiX2V2YWxVcmwiLCJnbG9iYWxFdmFsIiwicmNsZWFuU2NyaXB0IiwicmVtb3ZlIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJhY3R1YWxEaXNwbGF5IiwiYXBwZW5kVG8iLCJib2R5IiwiZGlzcGxheSIsImRldGFjaCIsImRlZmF1bHREaXNwbGF5IiwiZWxlbWRpc3BsYXkiLCJpZnJhbWUiLCJkb2N1bWVudEVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJ3cml0ZSIsImNsb3NlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0U3R5bGVzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsTWFyZ2luUmlnaHQiLCJybnVtbm9ucHgiLCJybWFyZ2luIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJ2ZW5kb3JQcm9wTmFtZSIsImVtcHR5U3R5bGUiLCJjYXBOYW1lIiwidG9VcHBlckNhc2UiLCJzbGljZSIsImNzc1ByZWZpeGVzIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1hdGNoZXMiLCJNYXRoIiwibWF4IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY3NzRXhwYW5kIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImJveFNpemluZ1JlbGlhYmxlIiwicGFyc2VGbG9hdCIsInNob3dIaWRlIiwic2hvdyIsImhpZGRlbiIsInZhbHVlcyIsImlzSGlkZGVuIiwiVHdlZW4iLCJlYXNpbmciLCJwcm90b3R5cGUiLCJpbml0IiwiY3JlYXRlRnhOb3ciLCJzZXRUaW1lb3V0IiwiZnhOb3ciLCJub3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsIndoaWNoIiwiYXR0cnMiLCJoZWlnaHQiLCJvcGFjaXR5IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsImRlZmF1bHRQcmVmaWx0ZXIiLCJwcm9wcyIsIm9wdHMiLCJ0b2dnbGUiLCJob29rcyIsIm9sZGZpcmUiLCJjaGVja0Rpc3BsYXkiLCJhbmltIiwib3JpZyIsImRhdGFTaG93IiwicXVldWUiLCJfcXVldWVIb29rcyIsInVucXVldWVkIiwiZW1wdHkiLCJmaXJlIiwiYWx3YXlzIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJyZnh0eXBlcyIsImlzRW1wdHlPYmplY3QiLCJkb25lIiwiaGlkZSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwiY2FtZWxDYXNlIiwiaXNBcnJheSIsImNzc0hvb2tzIiwiZXhwYW5kIiwicHJvcGVydGllcyIsInJlc3VsdCIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiZGVmZXJyZWQiLCJEZWZlcnJlZCIsInRpY2siLCJjdXJyZW50VGltZSIsInJlbWFpbmluZyIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwidGVtcCIsInBlcmNlbnQiLCJ0d2VlbnMiLCJydW4iLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9taXNlIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwic3RvcCIsImdvdG9FbmQiLCJyZWplY3RXaXRoIiwicHJveHkiLCJmeCIsInByb2dyZXNzIiwiY29tcGxldGUiLCJmYWlsIiwiZ2V0Q2xhc3MiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJmdW5jIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJ1bnNoaWZ0IiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3QiLCJzZWxlY3RlZCIsImluc3BlY3RlZCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJzZWVraW5nVHJhbnNwb3J0IiwidHJhbnNwb3J0cyIsImFqYXhFeHRlbmQiLCJkZWVwIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwicyIsInJlc3BvbnNlcyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJjb250ZW50cyIsInNoaWZ0IiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsInJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsInByZXYiLCJyZXNwb25zZUZpZWxkcyIsImRhdGFGaWx0ZXIiLCJzcGxpdCIsInN0YXRlIiwiZXJyb3IiLCJidWlsZFBhcmFtcyIsInByZWZpeCIsInRyYWRpdGlvbmFsIiwidiIsInJicmFja2V0IiwiZ2V0V2luZG93IiwiZGVmYXVsdFZpZXciLCJhcnIiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsInZlcnNpb24iLCJydHJpbSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImxhc3QiLCJsZW4iLCJzb3J0Iiwic3BsaWNlIiwiY29weSIsImNvcHlJc0FycmF5IiwiaXNQbGFpbk9iamVjdCIsInJhbmRvbSIsImlzUmVhZHkiLCJtc2ciLCJub29wIiwiQXJyYXkiLCJpc051bWVyaWMiLCJyZWFsU3RyaW5nT2JqIiwiY29kZSIsInNjcmlwdCIsImluZGlyZWN0IiwiZXZhbCIsInRyaW0iLCJ0ZXh0IiwiaGVhZCIsInN0cmluZyIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJPYmplY3QiLCJzZWNvbmQiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiU2l6emxlIiwic2VlZCIsIm0iLCJuaWQiLCJuaWRzZWxlY3QiLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJwcmVmZXJyZWREb2MiLCJzZXREb2N1bWVudCIsImRvY3VtZW50SXNIVE1MIiwicnF1aWNrRXhwciIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwiY29tcGlsZXJDYWNoZSIsInJidWdneVFTQSIsInJlc2NhcGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b2tlbml6ZSIsInJpZGVudGlmaWVyIiwidG9TZWxlY3RvciIsImpvaW4iLCJyc2libGluZyIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJzZWxlY3QiLCJjcmVhdGVDYWNoZSIsImNhY2hlIiwia2V5cyIsIkV4cHIiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImRpdiIsImFkZEhhbmRsZSIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiYSIsImIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJNQVhfTkVHQVRJVkUiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwic2V0RmlsdGVycyIsInRva2VucyIsImFkZENvbWJpbmF0b3IiLCJtYXRjaGVyIiwiY29tYmluYXRvciIsImJhc2UiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJ4bWwiLCJvbGRDYWNoZSIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5ld0NhY2hlIiwiZGlycnVucyIsInVuaXF1ZUlEIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsIm11bHRpcGxlQ29udGV4dHMiLCJjb250ZXh0cyIsImNvbmRlbnNlIiwidW5tYXRjaGVkIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInByZUZpbHRlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwicmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0Iiwib3V0ZXJtb3N0Q29udGV4dCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImZpbmQiLCJkaXJydW5zVW5pcXVlIiwicG9wIiwidW5pcXVlU29ydCIsImdldFRleHQiLCJpc1hNTCIsImNvbXBpbGUiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2NFbGVtIiwicmJ1Z2d5TWF0Y2hlcyIsImNsYXNzQ2FjaGUiLCJ0b2tlbkNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJlbHMiLCJoYXNDb21wYXJlIiwicGFyZW50IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsInNwZWNpZmllZCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsIj4iLCIgIiwiKyIsIn4iLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwibm9kZUluZGV4IiwidXNlQ2FjaGUiLCJwc2V1ZG8iLCJpZHgiLCJtYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJlbmFibGVkIiwiZGlzYWJsZWQiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZGl2MSIsInVuaXF1ZSIsImlzWE1MRG9jIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwibmV4dCIsInRhcmdldHMiLCJwb3MiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwicmV2ZXJzZSIsIkNhbGxiYWNrcyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwidHVwbGVzIiwidGhlbiIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsIm5vdGlmeSIsInJlc29sdmUiLCJyZWplY3QiLCJwaXBlIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic3Vib3JkaW5hdGUiLCJwcm9ncmVzc1ZhbHVlcyIsInByb2dyZXNzQ29udGV4dHMiLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwidXBkYXRlRnVuYyIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsImhvbGRSZWFkeSIsImhvbGQiLCJ3YWl0IiwidHJpZ2dlckhhbmRsZXIiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJhY2NlcHREYXRhIiwib3duZXIiLCJyZWdpc3RlciIsImRlZmluZVByb3BlcnR5Iiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzdG9yZWQiLCJjYW1lbCIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiY2FtZWxLZXkiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwiZWwiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJ0IiwiaGFuZGxlT2JqIiwic3BlY2lhbCIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwiZml4IiwiaGFuZGxlclF1ZXVlIiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0IiwicG9zdERpc3BhdGNoIiwic2VsIiwiaXNOYU4iLCJmaXhIb29rcyIsImtleUhvb2tzIiwib3JpZ2luYWwiLCJjaGFyQ29kZSIsImtleUNvZGUiLCJtb3VzZUhvb2tzIiwiZXZlbnREb2MiLCJwYWdlWCIsImNsaWVudFgiLCJzY3JvbGxMZWZ0IiwiY2xpZW50TGVmdCIsInBhZ2VZIiwiY2xpZW50WSIsInNjcm9sbFRvcCIsImNsaWVudFRvcCIsIm9yaWdpbmFsRXZlbnQiLCJmaXhIb29rIiwiRXZlbnQiLCJsb2FkIiwibm9CdWJibGUiLCJ0cmlnZ2VyIiwiYmx1ciIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInRpbWVTdGFtcCIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJpbnNlcnQiLCJIVE1MIiwiQk9EWSIsInZpZXciLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwic3dhcCIsIm9sZCIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImNvbnRhaW5lciIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsIm1hcmdpbkxlZnQiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsIm1hcmdpblJpZ2h0IiwicGl4ZWxNYXJnaW5SaWdodFZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInJlbGlhYmxlTWFyZ2luUmlnaHQiLCJtYXJnaW5EaXYiLCJyZGlzcGxheXN3YXAiLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImNzc1Byb3BzIiwiZmxvYXQiLCJvcmlnTmFtZSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJzdWZmaXgiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwiZWFzZWQiLCJzdGVwIiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJ0aW1lcklkIiwicnJ1biIsIioiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsIm9wdERpc2FibGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwicHJvcE5hbWUiLCJhdHRyTmFtZXMiLCJwcm9wRml4IiwiZ2V0dGVyIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJyZW1vdmVQcm9wIiwidGFiaW5kZXgiLCJwYXJzZUludCIsImZvciIsImNsYXNzIiwicmNsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsInJyZXR1cm4iLCJyc3BhY2VzIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJyZm9jdXNNb3JwaCIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJmb2N1c2luIiwiYXR0YWNoZXMiLCJub25jZSIsInJxdWVyeSIsIkpTT04iLCJwYXJzZSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmhhc2giLCJydHMiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1cyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJoZWFkZXJzIiwic3VjY2VzcyIsIm1vZGlmaWVkIiwic3RhdHVzVGV4dCIsInRpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJmaXJlR2xvYmFscyIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJyZXNwb25zZUhlYWRlcnMiLCJ1cmxBbmNob3IiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJsbmFtZSIsIm92ZXJyaWRlTWltZVR5cGUiLCJhYm9ydCIsImZpbmFsVGV4dCIsIm1ldGhvZCIsImNyb3NzRG9tYWluIiwiaG9zdCIsInBhcmFtIiwiaGFzQ29udGVudCIsImJlZm9yZVNlbmQiLCJzZW5kIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsInRocm93cyIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsInVud3JhcCIsInZpc2libGUiLCJnZXRDbGllbnRSZWN0cyIsInIyMCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwiX2xvYWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsImN1ckVsZW0iLCJ1c2luZyIsIndpbiIsImJveCIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJzaXplIiwiYW5kU2VsZiIsImRlZmluZSIsImFtZCIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJQbHVnaW4iLCIkdGhpcyIsIkFsZXJ0IiwiZGlzbWlzcyIsIlZFUlNJT04iLCJUUkFOU0lUSU9OX0RVUkFUSU9OIiwicmVtb3ZlRWxlbWVudCIsIiRwYXJlbnQiLCJ0cmFuc2l0aW9uIiwiZW11bGF0ZVRyYW5zaXRpb25FbmQiLCJhbGVydCIsIkNvbnN0cnVjdG9yIiwiQnV0dG9uIiwic2V0U3RhdGUiLCJlbGVtZW50IiwiJGVsZW1lbnQiLCJERUZBVUxUUyIsImlzTG9hZGluZyIsImxvYWRpbmdUZXh0IiwiZCIsIiRlbCIsInJlc2V0VGV4dCIsImNoYW5nZWQiLCIkaW5wdXQiLCIkYnRuIiwiQ2Fyb3VzZWwiLCJhY3Rpb24iLCJzbGlkZSIsInBhdXNlIiwiY3ljbGUiLCIkaW5kaWNhdG9ycyIsInBhdXNlZCIsInNsaWRpbmciLCIkYWN0aXZlIiwiJGl0ZW1zIiwia2V5Ym9hcmQiLCJrZXlkb3duIiwidGFnTmFtZSIsImdldEl0ZW1JbmRleCIsIml0ZW0iLCJnZXRJdGVtRm9yRGlyZWN0aW9uIiwiZGlyZWN0aW9uIiwiYWN0aXZlSW5kZXgiLCJ3aWxsV3JhcCIsImRlbHRhIiwiaXRlbUluZGV4IiwidGhhdCIsIiRuZXh0IiwiaXNDeWNsaW5nIiwic2xpZGVFdmVudCIsIiRuZXh0SW5kaWNhdG9yIiwic2xpZEV2ZW50IiwiY2Fyb3VzZWwiLCJjbGlja0hhbmRsZXIiLCIkdGFyZ2V0Iiwic2xpZGVJbmRleCIsIiRjYXJvdXNlbCIsImdldFBhcmVudCIsImNsZWFyTWVudXMiLCJiYWNrZHJvcCIsIkRyb3Bkb3duIiwiaXNBY3RpdmUiLCJkZXNjIiwiZHJvcGRvd24iLCJfcmVsYXRlZFRhcmdldCIsIk1vZGFsIiwiJGJvZHkiLCIkZGlhbG9nIiwiJGJhY2tkcm9wIiwiaXNTaG93biIsIm9yaWdpbmFsQm9keVBhZCIsInNjcm9sbGJhcldpZHRoIiwiaWdub3JlQmFja2Ryb3BDbGljayIsInJlbW90ZSIsIkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04iLCJjaGVja1Njcm9sbGJhciIsInNldFNjcm9sbGJhciIsImVzY2FwZSIsInJlc2l6ZSIsImFkanVzdERpYWxvZyIsImVuZm9yY2VGb2N1cyIsImhpZGVNb2RhbCIsImhhbmRsZVVwZGF0ZSIsInJlc2V0QWRqdXN0bWVudHMiLCJyZXNldFNjcm9sbGJhciIsInJlbW92ZUJhY2tkcm9wIiwiZG9BbmltYXRlIiwiY2FsbGJhY2tSZW1vdmUiLCJtb2RhbElzT3ZlcmZsb3dpbmciLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJwYWRkaW5nTGVmdCIsImJvZHlJc092ZXJmbG93aW5nIiwicGFkZGluZ1JpZ2h0IiwiZnVsbFdpbmRvd1dpZHRoIiwiaW5uZXJXaWR0aCIsImRvY3VtZW50RWxlbWVudFJlY3QiLCJyaWdodCIsImFicyIsImNsaWVudFdpZHRoIiwibWVhc3VyZVNjcm9sbGJhciIsImJvZHlQYWQiLCJzY3JvbGxEaXYiLCJtb2RhbCIsInNob3dFdmVudCIsIlRvb2x0aXAiLCJob3ZlclN0YXRlIiwiaW5TdGF0ZSIsInBsYWNlbWVudCIsInRlbXBsYXRlIiwidGl0bGUiLCJ2aWV3cG9ydCIsImdldE9wdGlvbnMiLCIkdmlld3BvcnQiLCJ0cmlnZ2VycyIsImV2ZW50SW4iLCJldmVudE91dCIsImVudGVyIiwibGVhdmUiLCJfb3B0aW9ucyIsImZpeFRpdGxlIiwiZ2V0RGVmYXVsdHMiLCJnZXREZWxlZ2F0ZU9wdGlvbnMiLCJkZWZhdWx0cyIsInRpcCIsImlzSW5TdGF0ZVRydWUiLCJpbkRvbSIsIiR0aXAiLCJ0aXBJZCIsImdldFVJRCIsInNldENvbnRlbnQiLCJhdXRvVG9rZW4iLCJhdXRvUGxhY2UiLCJnZXRQb3NpdGlvbiIsImFjdHVhbFdpZHRoIiwiYWN0dWFsSGVpZ2h0Iiwib3JnUGxhY2VtZW50Iiwidmlld3BvcnREaW0iLCJib3R0b20iLCJjYWxjdWxhdGVkT2Zmc2V0IiwiZ2V0Q2FsY3VsYXRlZE9mZnNldCIsImFwcGx5UGxhY2VtZW50IiwicHJldkhvdmVyU3RhdGUiLCJtYXJnaW5Ub3AiLCJyb3VuZCIsImdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YSIsImlzVmVydGljYWwiLCJhcnJvd0RlbHRhIiwiYXJyb3dPZmZzZXRQb3NpdGlvbiIsInJlcGxhY2VBcnJvdyIsImRpbWVuc2lvbiIsImFycm93IiwiZ2V0VGl0bGUiLCIkZSIsImlzQm9keSIsImVsUmVjdCIsImlzU3ZnIiwiU1ZHRWxlbWVudCIsImVsT2Zmc2V0Iiwic2Nyb2xsIiwib3V0ZXJEaW1zIiwidmlld3BvcnRQYWRkaW5nIiwidmlld3BvcnREaW1lbnNpb25zIiwidG9wRWRnZU9mZnNldCIsImJvdHRvbUVkZ2VPZmZzZXQiLCJsZWZ0RWRnZU9mZnNldCIsInJpZ2h0RWRnZU9mZnNldCIsIm8iLCIkYXJyb3ciLCJlbmFibGUiLCJ0b2dnbGVFbmFibGVkIiwiZGVzdHJveSIsInRvb2x0aXAiLCJQb3BvdmVyIiwiZ2V0Q29udGVudCIsInBvcG92ZXIiLCJUYWIiLCIkdWwiLCIkcHJldmlvdXMiLCJoaWRlRXZlbnQiLCJhY3RpdmF0ZSIsInRhYiIsIkFmZml4IiwiY2hlY2tQb3NpdGlvbiIsImNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wIiwiYWZmaXhlZCIsInVucGluIiwicGlubmVkT2Zmc2V0IiwiUkVTRVQiLCJnZXRTdGF0ZSIsIm9mZnNldFRvcCIsIm9mZnNldEJvdHRvbSIsInRhcmdldEhlaWdodCIsImluaXRpYWxpemluZyIsImNvbGxpZGVyVG9wIiwiY29sbGlkZXJIZWlnaHQiLCJnZXRQaW5uZWRPZmZzZXQiLCJhZmZpeCIsImFmZml4VHlwZSIsIiRzcHkiLCJnZXRUYXJnZXRGcm9tVHJpZ2dlciIsIiR0cmlnZ2VyIiwiQ29sbGFwc2UiLCJ0cmFuc2l0aW9uaW5nIiwiYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiaGFzV2lkdGgiLCJhY3RpdmVzRGF0YSIsImFjdGl2ZXMiLCJzdGFydEV2ZW50Iiwic2Nyb2xsU2l6ZSIsImlzT3BlbiIsImNvbGxhcHNlIiwiU2Nyb2xsU3B5IiwiJHNjcm9sbEVsZW1lbnQiLCJvZmZzZXRzIiwiYWN0aXZlVGFyZ2V0IiwicHJvY2VzcyIsInJlZnJlc2giLCJnZXRTY3JvbGxIZWlnaHQiLCJvZmZzZXRNZXRob2QiLCJvZmZzZXRCYXNlIiwiJGhyZWYiLCJtYXhTY3JvbGwiLCJjbGVhciIsInNjcm9sbHNweSIsInRyYW5zaXRpb25FbmQiLCJ0cmFuc0VuZEV2ZW50TmFtZXMiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwiY2FsbGVkIiwiYnNUcmFuc2l0aW9uRW5kIiwicmVxdWlyZSIsInBsdWdpbl9jb3VudCIsImlzX29sZF9pZSIsInIiLCJGdW5jdGlvbiIsIlR5cGVFcnJvciIsImJvdW5kIiwiRiIsInNlYXJjaEVsZW1lbnQiLCJmcm9tSW5kZXgiLCJrIiwiTyIsIkluZmluaXR5IiwiYmFzZV9odG1sIiwic2luZ2xlX2h0bWwiLCJkb3VibGVfaHRtbCIsImRpc2FibGVfaHRtbCIsIklvblJhbmdlU2xpZGVyIiwiY3VycmVudF9wbHVnaW4iLCJjYWxjX2NvdW50IiwidXBkYXRlX3RtIiwib2xkX2Zyb20iLCJvbGRfdG8iLCJvbGRfbWluX2ludGVydmFsIiwicmFmX2lkIiwiZHJhZ2dpbmciLCJmb3JjZV9yZWRyYXciLCJub19kaWFwYXNvbiIsImhhc190YWJfaW5kZXgiLCJpc19rZXkiLCJpc191cGRhdGUiLCJpc19zdGFydCIsImlzX2ZpbmlzaCIsImlzX2FjdGl2ZSIsImlzX3Jlc2l6ZSIsImlzX2NsaWNrIiwiJGNhY2hlIiwiY29udCIsInJzIiwibWluIiwiZnJvbSIsInNpbmdsZSIsImJhciIsImxpbmUiLCJzX3NpbmdsZSIsInNfZnJvbSIsInNfdG8iLCJzaGFkX3NpbmdsZSIsInNoYWRfZnJvbSIsInNoYWRfdG8iLCJlZGdlIiwiZ3JpZCIsImdyaWRfbGFiZWxzIiwiY29vcmRzIiwieF9nYXAiLCJ4X3BvaW50ZXIiLCJ3X3JzIiwid19yc19vbGQiLCJ3X2hhbmRsZSIsInBfZ2FwIiwicF9nYXBfbGVmdCIsInBfZ2FwX3JpZ2h0IiwicF9zdGVwIiwicF9wb2ludGVyIiwicF9oYW5kbGUiLCJwX3NpbmdsZV9mYWtlIiwicF9zaW5nbGVfcmVhbCIsInBfZnJvbV9mYWtlIiwicF9mcm9tX3JlYWwiLCJwX3RvX2Zha2UiLCJwX3RvX3JlYWwiLCJwX2Jhcl94IiwicF9iYXJfdyIsImdyaWRfZ2FwIiwiYmlnX251bSIsImJpZyIsImJpZ193IiwiYmlnX3AiLCJiaWdfeCIsImxhYmVscyIsIndfbWluIiwid19tYXgiLCJ3X2Zyb20iLCJ3X3RvIiwid19zaW5nbGUiLCJwX21pbiIsInBfbWF4IiwicF9mcm9tX2xlZnQiLCJwX3RvX2xlZnQiLCJwX3NpbmdsZV9sZWZ0IiwiY29uZmlnIiwiY29uZmlnX2Zyb21fZGF0YSIsIiRpbnAiLCJtaW5faW50ZXJ2YWwiLCJtYXhfaW50ZXJ2YWwiLCJkcmFnX2ludGVydmFsIiwicF92YWx1ZXMiLCJmcm9tX2ZpeGVkIiwiZnJvbV9taW4iLCJmcm9tX21heCIsImZyb21fc2hhZG93IiwidG9fZml4ZWQiLCJ0b19taW4iLCJ0b19tYXgiLCJ0b19zaGFkb3ciLCJwcmV0dGlmeV9lbmFibGVkIiwicHJldHRpZnlfc2VwYXJhdG9yIiwicHJldHRpZnkiLCJmb3JjZV9lZGdlcyIsImdyaWRfbWFyZ2luIiwiZ3JpZF9udW0iLCJncmlkX3NuYXAiLCJoaWRlX21pbl9tYXgiLCJoaWRlX2Zyb21fdG8iLCJwb3N0Zml4IiwibWF4X3Bvc3RmaXgiLCJkZWNvcmF0ZV9ib3RoIiwidmFsdWVzX3NlcGFyYXRvciIsImlucHV0X3ZhbHVlc19zZXBhcmF0b3IiLCJibG9jayIsImV4dHJhX2NsYXNzZXMiLCJzY29wZSIsIm9uU3RhcnQiLCJvbkNoYW5nZSIsIm9uRmluaXNoIiwib25VcGRhdGUiLCJjb25zb2xlIiwid2FybiIsInVwZGF0ZV9jaGVjayIsInNsaWRlciIsImZyb21fcGVyY2VudCIsImZyb21fdmFsdWUiLCJ0b19wZXJjZW50IiwidG9fdmFsdWUiLCJjb252ZXJ0VG9QZXJjZW50IiwidG9nZ2xlSW5wdXQiLCJzZXRNaW5NYXgiLCJjYWxjIiwiY2FsbE9uVXBkYXRlIiwiY2FsbE9uU3RhcnQiLCJ1cGRhdGVTY2VuZSIsImNvbnRhaW5lcl9odG1sIiwic2V0VG9wSGFuZGxlciIsImFwcGVuZEdyaWQiLCJhcHBlbmREaXNhYmxlTWFzayIsInJlbW92ZURpc2FibGVNYXNrIiwiYmluZEV2ZW50cyIsImN1cnNvciIsImNoYW5nZUxldmVsIiwidG9GaXhlZCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicG9pbnRlck1vdmUiLCJwb2ludGVyVXAiLCJwb2ludGVyQ2xpY2siLCJwb2ludGVyRm9jdXMiLCJwb2ludGVyRG93biIsIngiLCIkaGFuZGxlIiwidG91Y2hlcyIsInJlc3RvcmVPcmlnaW5hbE1pbkludGVydmFsIiwiY2FsbE9uRmluaXNoIiwic2V0VGVtcE1pbkludGVydmFsIiwiY2FsY1BvaW50ZXJQZXJjZW50IiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwibWV0YUtleSIsIm1vdmVCeUtleSIsImRlY29yYXRlIiwibWluX3ByZXR0eSIsIl9wcmV0dGlmeSIsIm1heF9wcmV0dHkiLCJvdXRlcldpZHRoIiwidXBkYXRlIiwiY2FsY0hhbmRsZVBlcmNlbnQiLCJoYW5kbGVfeCIsImdldEhhbmRsZVgiLCJjaG9vc2VIYW5kbGUiLCJmIiwiY2hlY2tEaWFwYXNvbiIsImNvbnZlcnRUb0Zha2VQZXJjZW50IiwiY29udmVydFRvUmVhbFBlcmNlbnQiLCJjYWxjV2l0aFN0ZXAiLCJjaGVja01pbkludGVydmFsIiwiY2hlY2tNYXhJbnRlcnZhbCIsInJlYWxfeCIsImZ1bGwiLCJoYWxmIiwibmV3X2Zyb20iLCJuZXdfdG8iLCJjb252ZXJ0VG9WYWx1ZSIsImZyb21fcHJldHR5IiwidG9fcHJldHR5IiwiY2FsY01pbk1heCIsImNhbGNMYWJlbHMiLCJmYWtlIiwicmVhbCIsIm1fcG9pbnQiLCJjaGVja0VkZ2VzIiwiZHJhd0hhbmRsZXMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJkcmF3TGFiZWxzIiwiY2FsY0dyaWRNYXJnaW4iLCJjYWxjR3JpZExhYmVscyIsImRyYXdTaGFkb3ciLCJ3cml0ZVRvSW5wdXQiLCJjYWxsT25DaGFuZ2UiLCJ0ZXh0X3NpbmdsZSIsInRleHRfZnJvbSIsInRleHRfdG8iLCJ2YWx1ZXNfbnVtIiwic2luZ2xlX2xlZnQiLCJ0b19sZWZ0IiwiYyIsImlzX2Zyb21fbWluIiwiaXNfZnJvbV9tYXgiLCJpc190b19taW4iLCJpc190b19tYXgiLCJub19taW4iLCJkaWFwYXNvbiIsIm9uZV9wZXJjZW50IiwibWluX2xlbmd0aCIsIm1heF9sZW5ndGgiLCJtaW5fZGVjaW1hbHMiLCJtYXhfZGVjaW1hbHMiLCJhdmdfZGVjaW1hbHMiLCJudW1iZXIiLCJyb3VuZGVkIiwicF9jdXJyZW50IiwicF9uZXh0IiwicF9udW0iLCJ2bCIsImRlY29yYXRlZCIsInVwZGF0ZUZyb20iLCJ1cGRhdGVUbyIsInVwZGF0ZVJlc3VsdCIsInoiLCJsb2NhbF9zbWFsbF9tYXgiLCJzbWFsbF9wIiwidG90YWwiLCJzbWFsbF9tYXgiLCJzbWFsbF93IiwiY2VpbCIsImNhY2hlR3JpZExhYmVscyIsIiRsYWJlbCIsImxhYmVsIiwiY2FsY0dyaWRDb2xsaXNpb24iLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsIm5leHRfaSIsImlvblJhbmdlU2xpZGVyIiwibGFzdFRpbWUiLCJ2ZW5kb3JzIiwiY3VyclRpbWUiLCJnZXRUaW1lIiwidGltZVRvQ2FsbCIsIk93bCIsIkRlZmF1bHRzIiwiX2hhbmRsZXJzIiwiX3BsdWdpbnMiLCJfc3VwcmVzcyIsIl9jdXJyZW50IiwiX3NwZWVkIiwiX2Nvb3JkaW5hdGVzIiwiX2JyZWFrcG9pbnQiLCJfd2lkdGgiLCJfaXRlbXMiLCJfY2xvbmVzIiwiX21lcmdlcnMiLCJfd2lkdGhzIiwiX2ludmFsaWRhdGVkIiwiX3BpcGUiLCJfZHJhZyIsInBvaW50ZXIiLCJzdGFnZSIsIl9zdGF0ZXMiLCJ0YWdzIiwiYW5pbWF0aW5nIiwiUGx1Z2lucyIsInBsdWdpbiIsImNoYXJBdCIsIldvcmtlcnMiLCJwcmlvcml0eSIsIndvcmtlciIsIml0ZW1zIiwibG9vcCIsImNlbnRlciIsInJld2luZCIsIm1vdXNlRHJhZyIsInRvdWNoRHJhZyIsInB1bGxEcmFnIiwiZnJlZURyYWciLCJzdGFnZVBhZGRpbmciLCJtZXJnZUZpdCIsImF1dG9XaWR0aCIsInN0YXJ0UG9zaXRpb24iLCJydGwiLCJzbWFydFNwZWVkIiwiZmx1aWRTcGVlZCIsImRyYWdFbmRTcGVlZCIsInJlc3BvbnNpdmUiLCJyZXNwb25zaXZlUmVmcmVzaFJhdGUiLCJyZXNwb25zaXZlQmFzZUVsZW1lbnQiLCJmYWxsYmFja0Vhc2luZyIsImluZm8iLCJuZXN0ZWRJdGVtU2VsZWN0b3IiLCJpdGVtRWxlbWVudCIsInN0YWdlRWxlbWVudCIsInJlZnJlc2hDbGFzcyIsImxvYWRlZENsYXNzIiwibG9hZGluZ0NsYXNzIiwicnRsQ2xhc3MiLCJyZXNwb25zaXZlQ2xhc3MiLCJkcmFnQ2xhc3MiLCJpdGVtQ2xhc3MiLCJzdGFnZUNsYXNzIiwic3RhZ2VPdXRlckNsYXNzIiwiZ3JhYkNsYXNzIiwiRGVmYXVsdCIsIklubmVyIiwiT3V0ZXIiLCJUeXBlIiwiU3RhdGUiLCIkc3RhZ2UiLCJtYXJnaW4tbGVmdCIsIm1hcmdpbi1yaWdodCIsIndpZHRocyIsImNsb25lcyIsInJlcGVhdCIsIm5vcm1hbGl6ZSIsIm91dGVySFRNTCIsInByZXZpb3VzIiwiY29vcmRpbmF0ZXMiLCJwYWRkaW5nLWxlZnQiLCJwYWRkaW5nLXJpZ2h0IiwibWluaW11bSIsIm1heGltdW0iLCJpbm5lciIsIm91dGVyIiwiYmVnaW4iLCJvcCIsImltZ3MiLCJuZXN0ZWRTZWxlY3RvciIsInByZWxvYWRBdXRvV2lkdGhJbWFnZXMiLCJpbnZhbGlkYXRlIiwicmVnaXN0ZXJFdmVudEhhbmRsZXJzIiwib3ZlcndyaXRlcyIsImJyZWFrcG9pbnQiLCJwcm9wZXJ0eSIsIm9wdGlvbnNMb2dpYyIsInByZXBhcmUiLCJvblRocm90dGxlZFJlc2l6ZSIsInJlc2l6ZVRpbWVyIiwib25SZXNpemUiLCJvblRyYW5zaXRpb25FbmQiLCJvbkRyYWdTdGFydCIsIm9uRHJhZ0VuZCIsInRyYW5zZm9ybSIsInkiLCJkaWZmZXJlbmNlIiwib25EcmFnTW92ZSIsInB1bGwiLCJjb29yZGluYXRlIiwidHJhbnNmb3JtM2QiLCJwYXJ0Iiwic3VwcHJlc3MiLCJyZWxlYXNlIiwicmVjaXByb2NhbEl0ZW1zV2lkdGgiLCJlbGVtZW50V2lkdGgiLCJtZXJnZXJzIiwibXVsdGlwbGllciIsIm5ld1Bvc2l0aW9uIiwiZmFjdG9yIiwicmV2ZXJ0IiwiZGlzdGFuY2UiLCJzcmNFbGVtZW50Iiwib3JpZ2luYWxUYXJnZXQiLCJpbWFnZXMiLCJJbWFnZSIsImxpc3RlbmVyIiwiY2FwdHVyZSIsImRldGFjaEV2ZW50Iiwib25UcmlnZ2VyIiwib3dsIiwiY2hhbmdlZFRvdWNoZXMiLCJvd2xDYXJvdXNlbCIsIlplcHRvIiwiQXV0b1JlZnJlc2giLCJfY29yZSIsIl9pbnRlcnZhbCIsIl92aXNpYmxlIiwiaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsIiwiYXV0b1JlZnJlc2giLCJ3YXRjaCIsImF1dG9SZWZyZXNoSW50ZXJ2YWwiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiTGF6eSIsIl9sb2FkZWQiLCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwgY2hhbmdlLm93bC5jYXJvdXNlbCByZXNpemVkLm93bC5jYXJvdXNlbCIsImxhenlMb2FkIiwiJGl0ZW0iLCIkZWxlbWVudHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwiYmFja2dyb3VuZC1pbWFnZSIsIkF1dG9IZWlnaHQiLCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwgcmVmcmVzaGVkLm93bC5jYXJvdXNlbCIsImF1dG9IZWlnaHQiLCJjaGFuZ2VkLm93bC5jYXJvdXNlbCIsImxvYWRlZC5vd2wubGF6eSIsImF1dG9IZWlnaHRDbGFzcyIsImhlaWdodHMiLCJtYXhoZWlnaHQiLCJWaWRlbyIsIl92aWRlb3MiLCJfcGxheWluZyIsInJlc2l6ZS5vd2wuY2Fyb3VzZWwiLCJ2aWRlbyIsImlzSW5GdWxsU2NyZWVuIiwicmVmcmVzaGVkLm93bC5jYXJvdXNlbCIsInByZXBhcmVkLm93bC5jYXJvdXNlbCIsImZldGNoIiwicGxheSIsInZpZGVvSGVpZ2h0IiwidmlkZW9XaWR0aCIsInRodW1ibmFpbCIsInRuTGluayIsImljb24iLCJwYXRoIiwiZGltZW5zaW9ucyIsImN1c3RvbVRuIiwic3JjVHlwZSIsImxhenlDbGFzcyIsImNyZWF0ZSIsInRodW1ibmFpbF9sYXJnZSIsImZyYW1lZ3JhYl91cmwiLCJmdWxsc2NyZWVuRWxlbWVudCIsIm1vekZ1bGxTY3JlZW5FbGVtZW50Iiwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnQiLCJBbmltYXRlIiwiY29yZSIsInN3YXBwaW5nIiwiY2hhbmdlLm93bC5jYXJvdXNlbCIsImRyYWcub3dsLmNhcm91c2VsIGRyYWdnZWQub3dsLmNhcm91c2VsIHRyYW5zbGF0ZWQub3dsLmNhcm91c2VsIiwidHJhbnNsYXRlLm93bC5jYXJvdXNlbCIsImFuaW1hdGVPdXQiLCJhbmltYXRlSW4iLCJpbmNvbWluZyIsIm91dGdvaW5nIiwiQXV0b3BsYXkiLCJfdGltZW91dCIsIl9wYXVzZWQiLCJhdXRvcGxheSIsIl9zZXRBdXRvUGxheUludGVydmFsIiwicGxheS5vd2wuYXV0b3BsYXkiLCJzdG9wLm93bC5hdXRvcGxheSIsIm1vdXNlb3Zlci5vd2wuYXV0b3BsYXkiLCJhdXRvcGxheUhvdmVyUGF1c2UiLCJtb3VzZWxlYXZlLm93bC5hdXRvcGxheSIsInRvdWNoc3RhcnQub3dsLmNvcmUiLCJ0b3VjaGVuZC5vd2wuY29yZSIsImF1dG9wbGF5VGltZW91dCIsImF1dG9wbGF5U3BlZWQiLCJfZ2V0TmV4dFRpbWVvdXQiLCJOYXZpZ2F0aW9uIiwiX2luaXRpYWxpemVkIiwiX3BhZ2VzIiwiX2NvbnRyb2xzIiwiX3RlbXBsYXRlcyIsIl9vdmVycmlkZXMiLCJkb3RzRGF0YSIsImRvdENsYXNzIiwiYWRkZWQub3dsLmNhcm91c2VsIiwicmVtb3ZlLm93bC5jYXJvdXNlbCIsImRyYXciLCJuYXYiLCJuYXZUZXh0IiwibmF2U3BlZWQiLCJuYXZFbGVtZW50IiwibmF2Q29udGFpbmVyIiwibmF2Q29udGFpbmVyQ2xhc3MiLCJuYXZDbGFzcyIsInNsaWRlQnkiLCJkb3RzQ2xhc3MiLCJkb3RzIiwiZG90c0VhY2giLCJkb3RzU3BlZWQiLCJkb3RzQ29udGFpbmVyIiwib3ZlcnJpZGUiLCIkcmVsYXRpdmUiLCIkYWJzb2x1dGUiLCJjb250cm9sIiwib3ZlcmlkZXMiLCJsb3dlciIsInVwcGVyIiwicGFnZSIsInN1Y2Nlc3NvciIsInN0YW5kYXJkIiwiSGFzaCIsIl9oYXNoZXMiLCJzdWJzdHJpbmciLCJVUkxoYXNoTGlzdGVuZXIiLCJwcmVmaXhlZCIsInByZWZpeGVzIiwiV2Via2l0QW5pbWF0aW9uIiwiTW96QW5pbWF0aW9uIiwiT0FuaW1hdGlvbiIsInRlc3RzIiwiY3NzdHJhbnNmb3JtcyIsImNzc3RyYW5zZm9ybXMzZCIsImNzc3RyYW5zaXRpb25zIiwiY3NzYW5pbWF0aW9ucyIsInRvZGF5IiwiZGF5IiwiZmxvb3IiLCJob3VyIiwibWUiLCJhZGRaZXJvIiwidGlkIiwic2xkIiwid19kIiwiJG1lbnUiLCJoZWFkX2hlaWdodCJdLCJtYXBwaW5ncyI6IkFBMGdqQkEsUUFBU0EsZ0JBQWVDLEVBQUtDLEVBQUlDLEdBQzdCQyxLQUFLQyxXQUFXQyxNQUFNRixLQUFNRyxXQWdDaEMsUUFBU0MsYUFHTCxHQUFJTixHQUFLLEdBQUlPLE1BQUssdUJBR2RDLEVBQVEsR0FBSVYsZ0JBQWUsWUFBYUUsRUFBSSx3RkFDaERRLEdBQU1DLFlBaUhWLFFBQVNDLG9CQUNMLEdBQUlDLEdBQUtDLFVBQVVDLFNBQ2ZGLEdBQUdHLE9BQU8sUUFBVSxJQUNwQkMsRUFBRSx3QkFBd0JDLFNBQVMsWUFDbkNELEVBQUUsZ0JBQWdCQyxTQUFTLFlBQzNCRCxFQUFFLGdCQUFnQkUsSUFBSSxjQUFlLGFBQ3JDRixFQUFFLGlCQUFpQkUsSUFBSSxjQUFlLGNBRzFDRixFQUFFLFlBQVlHLE1BQU0sV0FDaEIsUUFBU0MsS0FDTCxHQUFJQyxHQUFVTCxFQUFFLHdCQUF3Qk0sTUFDcENDLEVBQVVQLEVBQUUsd0JBQXdCUSxLQUFLLE9BQ3pDQyxFQUFVVCxFQUFFLHdCQUF3QlEsS0FBSyxPQUN6Q0UsRUFBWVYsRUFBRSx3QkFBd0JXLFFBQ3RDQyxFQUFXRixHQUFhRCxFQUFVRixHQUFZRixFQUFXSyxFQUFhLElBQVEsS0FBT0QsRUFBVUYsR0FBWUEsQ0FDM0dYLEdBQUdHLE9BQU8sUUFBVSxHQUF5RCxHQUFwREMsRUFBRSx3QkFBd0JhLFNBQVMsZUFDNURiLEVB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LEVBQUUsZ0JBQWdCRSxJQUFJLGFBQWMsT0FDaEMyMkQsSUFBTSxLQUNONzJELEVBQUUsY0FBY0UsSUFBSSxhQUFjLFlBTWxERixFQUFFLFlBQVlHLE1BQU0sV0FDaEJILEVBQUUsV0FBV29KLEdBQUcsY0FBYyxJQUFLLFNBQVVqSSxHQUV6Q0EsRUFBTTh3QixnQkFFTixJQUFJblcsR0FBTTliLEVBQUViLE1BQU1xQixLQUFLLFFBRW5CaWtCLEVBQU16a0IsRUFBRThiLEdBQUkrcEIsU0FBU3BoQixJQUFNLEVBRTNCb3lDLEtBQU0sTUFDTnB5QyxFQUFNemtCLEVBQUU4YixHQUFJK3BCLFNBQVNwaEIsSUFBTSxJQUcvQnprQixFQUFFLGFBQWFpNkIsU0FBUy9HLFVBQVd6TyxHQUFNLFNBR2pEemtCLEVBQUUsZUFBZW9KLEdBQUcsY0FBZSxXQUM1QmpLLEtBQUs2b0IsTUFBTWhvQixFQUFFaUIsVUFBVXdELEtBQUssSUFBSSxLQUV2Q3pFLEVBQUVpQixVQUFVNHdDLE9BQU8sV0FDWjd4QyxFQUFFYixNQUFNc0YsS0FBSyxNQUFNekUsRUFBRWIsTUFBTXNGLEtBQUssSUFBSSxHQUFHeXVCLFVBQVVsekIsRUFBRWIsTUFBTSt6QixZQUFZIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2Mi4yLjRcclxuICogaHR0cDovL2pxdWVyeS5jb20vXHJcbiAqXHJcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xyXG4gKiBodHRwOi8vc2l6emxlanMuY29tL1xyXG4gKlxyXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcclxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxyXG4gKlxyXG4gKiBEYXRlOiAyMDE2LTA1LTIwVDE3OjIzWlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xyXG5cclxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxyXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cclxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXHJcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cclxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXHJcblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XHJcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxyXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xyXG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XHJcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xyXG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XHJcblx0XHRcdH07XHJcblx0fSBlbHNlIHtcclxuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xyXG5cdH1cclxuXHJcbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XHJcbn0odHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xyXG5cclxuLy8gU3VwcG9ydDogRmlyZWZveCAxOCtcclxuLy8gQ2FuJ3QgYmUgaW4gc3RyaWN0IG1vZGUsIHNldmVyYWwgbGlicyBpbmNsdWRpbmcgQVNQLk5FVCB0cmFjZVxyXG4vLyB0aGUgc3RhY2sgdmlhIGFyZ3VtZW50cy5jYWxsZXIuY2FsbGVlIGFuZCBGaXJlZm94IGRpZXMgaWZcclxuLy8geW91IHRyeSB0byB0cmFjZSB0aHJvdWdoIFwidXNlIHN0cmljdFwiIGNhbGwgY2hhaW5zLiAoIzEzMzM1KVxyXG4vL1widXNlIHN0cmljdFwiO1xyXG52YXIgYXJyID0gW107XHJcblxyXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XHJcblxyXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XHJcblxyXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcclxuXHJcbnZhciBwdXNoID0gYXJyLnB1c2g7XHJcblxyXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xyXG5cclxudmFyIGNsYXNzMnR5cGUgPSB7fTtcclxuXHJcbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XHJcblxyXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcclxuXHJcbnZhciBzdXBwb3J0ID0ge307XHJcblxyXG5cclxuXHJcbnZhclxyXG5cdHZlcnNpb24gPSBcIjIuMi40XCIsXHJcblxyXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XHJcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xyXG5cclxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xyXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcclxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XHJcblx0fSxcclxuXHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcclxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcclxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcclxuXHJcblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXHJcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcclxuXHRyZGFzaEFscGhhID0gLy0oW1xcZGEtel0pL2dpLFxyXG5cclxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXHJcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcclxuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcclxuXHR9O1xyXG5cclxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcclxuXHJcblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxyXG5cdGpxdWVyeTogdmVyc2lvbixcclxuXHJcblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcclxuXHJcblx0Ly8gU3RhcnQgd2l0aCBhbiBlbXB0eSBzZWxlY3RvclxyXG5cdHNlbGVjdG9yOiBcIlwiLFxyXG5cclxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcclxuXHRsZW5ndGg6IDAsXHJcblxyXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXHJcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcclxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XHJcblx0XHRyZXR1cm4gbnVtICE9IG51bGwgP1xyXG5cclxuXHRcdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxyXG5cdFx0XHQoIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF0gKSA6XHJcblxyXG5cdFx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XHJcblx0XHRcdHNsaWNlLmNhbGwoIHRoaXMgKTtcclxuXHR9LFxyXG5cclxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXHJcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXHJcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XHJcblxyXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcclxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcclxuXHJcblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxyXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xyXG5cdFx0cmV0LmNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XHJcblxyXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcclxuXHRcdHJldHVybiByZXQ7XHJcblx0fSxcclxuXHJcblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cclxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XHJcblx0fSxcclxuXHJcblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xyXG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xyXG5cdFx0fSApICk7XHJcblx0fSxcclxuXHJcblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcclxuXHR9LFxyXG5cclxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xyXG5cdH0sXHJcblxyXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XHJcblx0fSxcclxuXHJcblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xyXG5cdH0sXHJcblxyXG5cdGVuZDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcclxuXHR9LFxyXG5cclxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXHJcblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXHJcblx0cHVzaDogcHVzaCxcclxuXHRzb3J0OiBhcnIuc29ydCxcclxuXHRzcGxpY2U6IGFyci5zcGxpY2VcclxufTtcclxuXHJcbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxyXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXHJcblx0XHRpID0gMSxcclxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXHJcblx0XHRkZWVwID0gZmFsc2U7XHJcblxyXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cclxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xyXG5cdFx0ZGVlcCA9IHRhcmdldDtcclxuXHJcblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XHJcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcclxuXHRcdGkrKztcclxuXHR9XHJcblxyXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxyXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xyXG5cdFx0dGFyZ2V0ID0ge307XHJcblx0fVxyXG5cclxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcclxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcclxuXHRcdHRhcmdldCA9IHRoaXM7XHJcblx0XHRpLS07XHJcblx0fVxyXG5cclxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcclxuXHJcblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXHJcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcclxuXHJcblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3RcclxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xyXG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xyXG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XHJcblxyXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3BcclxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXHJcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XHJcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0galF1ZXJ5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcclxuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXHJcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XHJcblxyXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxyXG5cdHJldHVybiB0YXJnZXQ7XHJcbn07XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblxyXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxyXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXHJcblxyXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXHJcblx0aXNSZWFkeTogdHJ1ZSxcclxuXHJcblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xyXG5cdH0sXHJcblxyXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXHJcblxyXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XHJcblx0fSxcclxuXHJcblx0aXNBcnJheTogQXJyYXkuaXNBcnJheSxcclxuXHJcblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xyXG5cdH0sXHJcblxyXG5cdGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHtcclxuXHJcblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAobnVsbHx0cnVlfGZhbHNlfFwiXCIpXHJcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXHJcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cclxuXHRcdC8vIGFkZGluZyAxIGNvcnJlY3RzIGxvc3Mgb2YgcHJlY2lzaW9uIGZyb20gcGFyc2VGbG9hdCAoIzE1MTAwKVxyXG5cdFx0dmFyIHJlYWxTdHJpbmdPYmogPSBvYmogJiYgb2JqLnRvU3RyaW5nKCk7XHJcblx0XHRyZXR1cm4gIWpRdWVyeS5pc0FycmF5KCBvYmogKSAmJiAoIHJlYWxTdHJpbmdPYmogLSBwYXJzZUZsb2F0KCByZWFsU3RyaW5nT2JqICkgKyAxICkgPj0gMDtcclxuXHR9LFxyXG5cclxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0dmFyIGtleTtcclxuXHJcblx0XHQvLyBOb3QgcGxhaW4gb2JqZWN0czpcclxuXHRcdC8vIC0gQW55IG9iamVjdCBvciB2YWx1ZSB3aG9zZSBpbnRlcm5hbCBbW0NsYXNzXV0gcHJvcGVydHkgaXMgbm90IFwiW29iamVjdCBPYmplY3RdXCJcclxuXHRcdC8vIC0gRE9NIG5vZGVzXHJcblx0XHQvLyAtIHdpbmRvd1xyXG5cdFx0aWYgKCBqUXVlcnkudHlwZSggb2JqICkgIT09IFwib2JqZWN0XCIgfHwgb2JqLm5vZGVUeXBlIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XHJcblx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxyXG5cdFx0XHRcdCFoYXNPd24uY2FsbCggb2JqLCBcImNvbnN0cnVjdG9yXCIgKSAmJlxyXG5cdFx0XHRcdCFoYXNPd24uY2FsbCggb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSB8fCB7fSwgXCJpc1Byb3RvdHlwZU9mXCIgKSApIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLFxyXG5cdFx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd25cclxuXHRcdGZvciAoIGtleSBpbiBvYmogKSB7fVxyXG5cclxuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCB8fCBoYXNPd24uY2FsbCggb2JqLCBrZXkgKTtcclxuXHR9LFxyXG5cclxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0dmFyIG5hbWU7XHJcblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSxcclxuXHJcblx0dHlwZTogZnVuY3Rpb24oIG9iaiApIHtcclxuXHRcdGlmICggb2JqID09IG51bGwgKSB7XHJcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wLCBpT1M8NiAoZnVuY3Rpb25pc2ggUmVnRXhwKVxyXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cclxuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcclxuXHRcdFx0dHlwZW9mIG9iajtcclxuXHR9LFxyXG5cclxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxyXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xyXG5cdFx0dmFyIHNjcmlwdCxcclxuXHRcdFx0aW5kaXJlY3QgPSBldmFsO1xyXG5cclxuXHRcdGNvZGUgPSBqUXVlcnkudHJpbSggY29kZSApO1xyXG5cclxuXHRcdGlmICggY29kZSApIHtcclxuXHJcblx0XHRcdC8vIElmIHRoZSBjb2RlIGluY2x1ZGVzIGEgdmFsaWQsIHByb2xvZ3VlIHBvc2l0aW9uXHJcblx0XHRcdC8vIHN0cmljdCBtb2RlIHByYWdtYSwgZXhlY3V0ZSBjb2RlIGJ5IGluamVjdGluZyBhXHJcblx0XHRcdC8vIHNjcmlwdCB0YWcgaW50byB0aGUgZG9jdW1lbnQuXHJcblx0XHRcdGlmICggY29kZS5pbmRleE9mKCBcInVzZSBzdHJpY3RcIiApID09PSAxICkge1xyXG5cdFx0XHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcclxuXHRcdFx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XHJcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgYXZvaWQgdGhlIERPTSBub2RlIGNyZWF0aW9uLCBpbnNlcnRpb25cclxuXHRcdFx0XHQvLyBhbmQgcmVtb3ZhbCBieSB1c2luZyBhbiBpbmRpcmVjdCBnbG9iYWwgZXZhbFxyXG5cclxuXHRcdFx0XHRpbmRpcmVjdCggY29kZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xyXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcclxuXHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXHJcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xyXG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XHJcblx0fSxcclxuXHJcblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0fSxcclxuXHJcblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XHJcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcclxuXHJcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcclxuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xyXG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG9iajtcclxuXHR9LFxyXG5cclxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMVxyXG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xyXG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XHJcblx0XHRcdFwiXCIgOlxyXG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcclxuXHR9LFxyXG5cclxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XHJcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xyXG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XHJcblxyXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcclxuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xyXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxyXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XHJcblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH0sXHJcblxyXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XHJcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XHJcblx0fSxcclxuXHJcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xyXG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxyXG5cdFx0XHRqID0gMCxcclxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcclxuXHJcblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcclxuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XHJcblx0XHR9XHJcblxyXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcclxuXHJcblx0XHRyZXR1cm4gZmlyc3Q7XHJcblx0fSxcclxuXHJcblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xyXG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcclxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxyXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XHJcblxyXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xyXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cclxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcclxuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xyXG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG1hdGNoZXM7XHJcblx0fSxcclxuXHJcblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XHJcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XHJcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdHJldCA9IFtdO1xyXG5cclxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXHJcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xyXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XHJcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xyXG5cclxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XHJcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcclxuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcclxuXHJcblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xyXG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xyXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xyXG5cdH0sXHJcblxyXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xyXG5cdGd1aWQ6IDEsXHJcblxyXG5cdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxyXG5cdC8vIGFyZ3VtZW50cy5cclxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xyXG5cdFx0dmFyIHRtcCwgYXJncywgcHJveHk7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcclxuXHRcdFx0Y29udGV4dCA9IGZuO1xyXG5cdFx0XHRmbiA9IHRtcDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xyXG5cdFx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cclxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xyXG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXHJcblx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XHJcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXHJcblx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcclxuXHJcblx0XHRyZXR1cm4gcHJveHk7XHJcblx0fSxcclxuXHJcblx0bm93OiBEYXRlLm5vdyxcclxuXHJcblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXHJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cclxuXHRzdXBwb3J0OiBzdXBwb3J0XHJcbn0gKTtcclxuXHJcbi8vIEpTSGludCB3b3VsZCBlcnJvciBvbiB0aGlzIGNvZGUgZHVlIHRvIHRoZSBTeW1ib2wgbm90IGJlaW5nIGRlZmluZWQgaW4gRVM1LlxyXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuanNoaW50cmMgd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcclxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGp1c3QgZGlzYWJsZSBKU0hpbnQgZm9yIHRoZXNlXHJcbi8vIHRocmVlIGxpbmVzLlxyXG4vKiBqc2hpbnQgaWdub3JlOiBzdGFydCAqL1xyXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcclxuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcclxufVxyXG4vKiBqc2hpbnQgaWdub3JlOiBlbmQgKi9cclxuXHJcbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxyXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxyXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcclxuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcclxufSApO1xyXG5cclxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcclxuXHJcblx0Ly8gU3VwcG9ydDogaU9TIDguMiAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXHJcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxyXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xyXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcclxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcclxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XHJcblxyXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxyXG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcclxufVxyXG52YXIgU2l6emxlID1cclxuLyohXHJcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjIuMVxyXG4gKiBodHRwOi8vc2l6emxlanMuY29tL1xyXG4gKlxyXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcclxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxyXG4gKlxyXG4gKiBEYXRlOiAyMDE1LTEwLTE3XHJcbiAqL1xyXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcclxuXHJcbnZhciBpLFxyXG5cdHN1cHBvcnQsXHJcblx0RXhwcixcclxuXHRnZXRUZXh0LFxyXG5cdGlzWE1MLFxyXG5cdHRva2VuaXplLFxyXG5cdGNvbXBpbGUsXHJcblx0c2VsZWN0LFxyXG5cdG91dGVybW9zdENvbnRleHQsXHJcblx0c29ydElucHV0LFxyXG5cdGhhc0R1cGxpY2F0ZSxcclxuXHJcblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xyXG5cdHNldERvY3VtZW50LFxyXG5cdGRvY3VtZW50LFxyXG5cdGRvY0VsZW0sXHJcblx0ZG9jdW1lbnRJc0hUTUwsXHJcblx0cmJ1Z2d5UVNBLFxyXG5cdHJidWdneU1hdGNoZXMsXHJcblx0bWF0Y2hlcyxcclxuXHRjb250YWlucyxcclxuXHJcblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxyXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXHJcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxyXG5cdGRpcnJ1bnMgPSAwLFxyXG5cdGRvbmUgPSAwLFxyXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxyXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxyXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxyXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cdFx0aWYgKCBhID09PSBiICkge1xyXG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIDA7XHJcblx0fSxcclxuXHJcblx0Ly8gR2VuZXJhbC1wdXJwb3NlIGNvbnN0YW50c1xyXG5cdE1BWF9ORUdBVElWRSA9IDEgPDwgMzEsXHJcblxyXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcclxuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxyXG5cdGFyciA9IFtdLFxyXG5cdHBvcCA9IGFyci5wb3AsXHJcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcclxuXHRwdXNoID0gYXJyLnB1c2gsXHJcblx0c2xpY2UgPSBhcnIuc2xpY2UsXHJcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXHJcblx0Ly8gaHR0cDovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XHJcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xyXG5cdFx0dmFyIGkgPSAwLFxyXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcclxuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIGk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiAtMTtcclxuXHR9LFxyXG5cclxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcclxuXHJcblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xyXG5cclxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxyXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXHJcblxyXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcXFx4MDAtXFxcXHhhMF0pK1wiLFxyXG5cclxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcclxuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcclxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXHJcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxyXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xyXG5cdFx0XCIqXFxcXF1cIixcclxuXHJcblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXHJcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxyXG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXHJcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcclxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxyXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xyXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxyXG5cdFx0XCIuKlwiICtcclxuXHRcdFwiKVxcXFwpfClcIixcclxuXHJcblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxyXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcclxuXHJcblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXHJcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXHJcblxyXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXHJcblxyXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXHJcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxyXG5cclxuXHRtYXRjaEV4cHIgPSB7XHJcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcclxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcclxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcclxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcclxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxyXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcclxuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXHJcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcclxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxyXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxyXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcclxuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXHJcblx0fSxcclxuXHJcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXHJcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcclxuXHJcblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXHJcblxyXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xyXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcclxuXHJcblx0cnNpYmxpbmcgPSAvWyt+XS8sXHJcblx0cmVzY2FwZSA9IC8nfFxcXFwvZyxcclxuXHJcblx0Ly8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xyXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXHJcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xyXG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcclxuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XHJcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XHJcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcclxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cclxuXHRcdFx0ZXNjYXBlZCA6XHJcblx0XHRcdGhpZ2ggPCAwID9cclxuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XHJcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XHJcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXHJcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XHJcblx0fSxcclxuXHJcblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xyXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXHJcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXHJcblx0Ly8gZXJyb3IgaW4gSUVcclxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XHJcblx0XHRzZXREb2N1bWVudCgpO1xyXG5cdH07XHJcblxyXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxyXG50cnkge1xyXG5cdHB1c2guYXBwbHkoXHJcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXHJcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xyXG5cdCk7XHJcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcclxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XHJcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcclxufSBjYXRjaCAoIGUgKSB7XHJcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xyXG5cclxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXHJcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XHJcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xyXG5cdFx0fSA6XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxyXG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxyXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xyXG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXHJcblx0XHRcdFx0aSA9IDA7XHJcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxyXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XHJcblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xyXG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG5pZHNlbGVjdCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXHJcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXHJcblxyXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxyXG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XHJcblxyXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xyXG5cclxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxyXG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxyXG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xyXG5cclxuXHRcdHJldHVybiByZXN1bHRzO1xyXG5cdH1cclxuXHJcblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xyXG5cdGlmICggIXNlZWQgKSB7XHJcblxyXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcclxuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcclxuXHRcdH1cclxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xyXG5cclxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XHJcblxyXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxyXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXHJcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXHJcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XHJcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcclxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xyXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XHJcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXHJcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcclxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxyXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcclxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXHJcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XHJcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHJcblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3JcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcclxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcclxuXHJcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXHJcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcclxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXHJcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcclxuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xyXG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcclxuXHJcblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XHJcblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcclxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxyXG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcclxuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJlc2NhcGUsIFwiXFxcXCQmXCIgKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxyXG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XHJcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcclxuXHRcdFx0XHRcdG5pZHNlbGVjdCA9IHJpZGVudGlmaWVyLnRlc3QoIG5pZCApID8gXCIjXCIgKyBuaWQgOiBcIltpZD0nXCIgKyBuaWQgKyBcIiddXCI7XHJcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gbmlkc2VsZWN0ICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXHJcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcclxuXHRcdFx0XHRcdFx0Y29udGV4dDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XHJcblx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxyXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcclxuXHRcdFx0XHRcdH0gZmluYWxseSB7XHJcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQWxsIG90aGVyc1xyXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXHJcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcclxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXHJcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcclxuXHR2YXIga2V5cyA9IFtdO1xyXG5cclxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcclxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXHJcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XHJcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xyXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcclxuXHR9XHJcblx0cmV0dXJuIGNhY2hlO1xyXG59XHJcblxyXG4vKipcclxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcclxuICovXHJcbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XHJcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XHJcblx0cmV0dXJuIGZuO1xyXG59XHJcblxyXG4vKipcclxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGRpdiBhbmQgZXhwZWN0cyBhIGJvb2xlYW4gcmVzdWx0XHJcbiAqL1xyXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xyXG5cdHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuXHR0cnkge1xyXG5cdFx0cmV0dXJuICEhZm4oIGRpdiApO1xyXG5cdH0gY2F0Y2ggKGUpIHtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9IGZpbmFsbHkge1xyXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIGRpdi5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZGl2ICk7XHJcblx0XHR9XHJcblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxyXG5cdFx0ZGl2ID0gbnVsbDtcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXHJcbiAqL1xyXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xyXG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXHJcblx0XHRpID0gYXJyLmxlbmd0aDtcclxuXHJcblx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcclxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXHJcbiAqL1xyXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XHJcblx0dmFyIGN1ciA9IGIgJiYgYSxcclxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXHJcblx0XHRcdCggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLVxyXG5cdFx0XHQoIH5hLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApO1xyXG5cclxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcclxuXHRpZiAoIGRpZmYgKSB7XHJcblx0XHRyZXR1cm4gZGlmZjtcclxuXHR9XHJcblxyXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXHJcblx0aWYgKCBjdXIgKSB7XHJcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xyXG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcclxuXHRcdFx0XHRyZXR1cm4gLTE7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBhID8gMSA6IC0xO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XHJcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcclxuXHR9O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XHJcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xyXG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xyXG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XHJcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xyXG5cdFx0XHR2YXIgaixcclxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxyXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xyXG5cclxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXHJcblx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XHJcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcclxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcclxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXHJcbiAqL1xyXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcclxuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xyXG59XHJcblxyXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxyXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xyXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXHJcbiAqL1xyXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3RcclxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcclxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcclxuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxyXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XHJcbiAqL1xyXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xyXG5cdHZhciBoYXNDb21wYXJlLCBwYXJlbnQsXHJcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XHJcblxyXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXHJcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcclxuXHRcdHJldHVybiBkb2N1bWVudDtcclxuXHR9XHJcblxyXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXHJcblx0ZG9jdW1lbnQgPSBkb2M7XHJcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxyXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcclxuXHRpZiAoIChwYXJlbnQgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgcGFyZW50LnRvcCAhPT0gcGFyZW50ICkge1xyXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTFcclxuXHRcdGlmICggcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XHJcblx0XHRcdHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XHJcblx0XHR9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7XHJcblx0XHRcdHBhcmVudC5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKiBBdHRyaWJ1dGVzXHJcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw4XHJcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXHJcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXHJcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRkaXYuY2xhc3NOYW1lID0gXCJpXCI7XHJcblx0XHRyZXR1cm4gIWRpdi5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XHJcblx0fSk7XHJcblxyXG5cdC8qIGdldEVsZW1lbnQocylCeSpcclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcclxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XHJcblx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcclxuXHRcdHJldHVybiAhZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XHJcblx0fSk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFPDlcclxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8MTBcclxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcclxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLFxyXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxyXG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvO1xyXG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XHJcblx0fSk7XHJcblxyXG5cdC8vIElEIGZpbmQgYW5kIGZpbHRlclxyXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xyXG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XHJcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XHJcblx0XHRcdFx0dmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xyXG5cdFx0XHRcdHJldHVybiBtID8gWyBtIF0gOiBbXTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XHJcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcclxuXHRcdFx0fTtcclxuXHRcdH07XHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIFN1cHBvcnQ6IElFNi83XHJcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XHJcblx0XHRkZWxldGUgRXhwci5maW5kW1wiSURcIl07XHJcblxyXG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XHJcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXHJcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcclxuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XHJcblx0XHRcdH07XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0Ly8gVGFnXHJcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XHJcblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xyXG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcclxuXHJcblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxyXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcclxuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSA6XHJcblxyXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcclxuXHRcdFx0dmFyIGVsZW0sXHJcblx0XHRcdFx0dG1wID0gW10sXHJcblx0XHRcdFx0aSA9IDAsXHJcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xyXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcclxuXHJcblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcclxuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xyXG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIHRtcDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdH07XHJcblxyXG5cdC8vIENsYXNzXHJcblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcclxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcclxuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxyXG5cclxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxyXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcclxuXHJcblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcclxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3JcclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXHJcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3JcclxuXHQvLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcclxuXHRyYnVnZ3lRU0EgPSBbXTtcclxuXHJcblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XHJcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcclxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcclxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXHJcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxyXG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcclxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcclxuXHRcdFx0Ly8gaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcclxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXHJcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXHJcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxyXG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XHJcblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxyXG5cdFx0XHQvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxyXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxyXG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XHJcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXHJcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXHJcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXHJcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXHJcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXHJcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcclxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2liaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXHJcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcclxuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XHJcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xyXG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxyXG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcclxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcclxuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXHJcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXHJcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICkge1xyXG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3NcclxuXHRcdFx0ZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xyXG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxyXG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcclxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcclxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xyXG5cclxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3JcclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcclxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZGl2LCBcImRpdlwiICk7XHJcblxyXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXHJcblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcclxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBkaXYsIFwiW3MhPScnXTp4XCIgKTtcclxuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcclxuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xyXG5cclxuXHQvKiBDb250YWluc1xyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XHJcblxyXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxyXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXHJcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cclxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxyXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xyXG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcclxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XHJcblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxyXG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XHJcblx0XHRcdCkpO1xyXG5cdFx0fSA6XHJcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcclxuXHRcdFx0aWYgKCBiICkge1xyXG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xyXG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fTtcclxuXHJcblx0LyogU29ydGluZ1xyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xyXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xyXG5cdGZ1bmN0aW9uKCBhLCBiICkge1xyXG5cclxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXHJcblx0XHRpZiAoIGEgPT09IGIgKSB7XHJcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cclxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcclxuXHRcdGlmICggY29tcGFyZSApIHtcclxuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxyXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cclxuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcclxuXHJcblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxyXG5cdFx0XHQxO1xyXG5cclxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xyXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxyXG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XHJcblxyXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcclxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xyXG5cdFx0XHRcdHJldHVybiAtMTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XHJcblx0XHRcdFx0cmV0dXJuIDE7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXHJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xyXG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcclxuXHRcdFx0XHQwO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcclxuXHR9IDpcclxuXHRmdW5jdGlvbiggYSwgYiApIHtcclxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcclxuXHRcdGlmICggYSA9PT0gYiApIHtcclxuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGN1cixcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcclxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxyXG5cdFx0XHRhcCA9IFsgYSBdLFxyXG5cdFx0XHRicCA9IFsgYiBdO1xyXG5cclxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXHJcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcclxuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxyXG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XHJcblx0XHRcdFx0YXVwID8gLTEgOlxyXG5cdFx0XHRcdGJ1cCA/IDEgOlxyXG5cdFx0XHRcdHNvcnRJbnB1dCA/XHJcblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxyXG5cdFx0XHRcdDA7XHJcblxyXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcclxuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xyXG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cclxuXHRcdGN1ciA9IGE7XHJcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XHJcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xyXG5cdFx0fVxyXG5cdFx0Y3VyID0gYjtcclxuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcclxuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcclxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xyXG5cdFx0XHRpKys7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGkgP1xyXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3JcclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XHJcblxyXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3RcclxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcclxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxyXG5cdFx0XHQwO1xyXG5cdH07XHJcblxyXG5cdHJldHVybiBkb2N1bWVudDtcclxufTtcclxuXHJcblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xyXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XHJcbn07XHJcblxyXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XHJcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXHJcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xyXG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcclxuXHR9XHJcblxyXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxyXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcclxuXHJcblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxyXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXHJcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXHJcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XHJcblxyXG5cdFx0dHJ5IHtcclxuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xyXG5cclxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xyXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XHJcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxyXG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxyXG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHR9XHJcblx0XHR9IGNhdGNoIChlKSB7fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcclxufTtcclxuXHJcblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xyXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxyXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcclxuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XHJcblx0fVxyXG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xyXG59O1xyXG5cclxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcclxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcclxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xyXG5cdH1cclxuXHJcblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcclxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxyXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xyXG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxyXG5cdFx0XHR1bmRlZmluZWQ7XHJcblxyXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XHJcblx0XHR2YWwgOlxyXG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XHJcblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxyXG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cclxuXHRcdFx0XHR2YWwudmFsdWUgOlxyXG5cdFx0XHRcdG51bGw7XHJcbn07XHJcblxyXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xyXG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcclxuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcclxuICovXHJcblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XHJcblx0dmFyIGVsZW0sXHJcblx0XHRkdXBsaWNhdGVzID0gW10sXHJcblx0XHRqID0gMCxcclxuXHRcdGkgPSAwO1xyXG5cclxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXHJcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcclxuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcclxuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xyXG5cclxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcclxuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xyXG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcclxuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHdoaWxlICggai0tICkge1xyXG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xyXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxyXG5cdHNvcnRJbnB1dCA9IG51bGw7XHJcblxyXG5cdHJldHVybiByZXN1bHRzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXHJcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxyXG4gKi9cclxuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0dmFyIG5vZGUsXHJcblx0XHRyZXQgPSBcIlwiLFxyXG5cdFx0aSA9IDAsXHJcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XHJcblxyXG5cdGlmICggIW5vZGVUeXBlICkge1xyXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcclxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xyXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xyXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xyXG5cdFx0fVxyXG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcclxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcclxuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXHJcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxyXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcclxuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XHJcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XHJcblx0fVxyXG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xyXG5cclxuXHRyZXR1cm4gcmV0O1xyXG59O1xyXG5cclxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XHJcblxyXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcclxuXHJcblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXHJcblxyXG5cdG1hdGNoOiBtYXRjaEV4cHIsXHJcblxyXG5cdGF0dHJIYW5kbGU6IHt9LFxyXG5cclxuXHRmaW5kOiB7fSxcclxuXHJcblx0cmVsYXRpdmU6IHtcclxuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXHJcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXHJcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXHJcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxyXG5cdH0sXHJcblxyXG5cdHByZUZpbHRlcjoge1xyXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcclxuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xyXG5cclxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcclxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xyXG5cclxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xyXG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XHJcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxyXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxyXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcclxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxyXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxyXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcclxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XHJcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XHJcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XHJcblx0XHRcdCovXHJcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcclxuXHJcblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcclxuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxyXG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xyXG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXHJcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxyXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XHJcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xyXG5cclxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXHJcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xyXG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG1hdGNoO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XHJcblx0XHRcdHZhciBleGNlc3MsXHJcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XHJcblxyXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXHJcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XHJcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xyXG5cclxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcclxuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXHJcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcclxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXHJcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXHJcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XHJcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XHJcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxyXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRmaWx0ZXI6IHtcclxuXHJcblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcclxuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XHJcblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcclxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XHJcblx0XHRcdFx0fTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xyXG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XHJcblxyXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxyXG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcclxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcclxuXHJcblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XHJcblxyXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XHJcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcclxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxyXG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxyXG5cdFx0XHRcdFx0ZmFsc2U7XHJcblx0XHRcdH07XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcclxuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcclxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXHJcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XHJcblxyXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XHJcblxyXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcclxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcclxuXHRcdFx0XHR9IDpcclxuXHJcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXHJcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXHJcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcclxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXHJcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxyXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXHJcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xyXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XHJcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxyXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXHJcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcclxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xyXG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxyXG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxyXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XHJcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xyXG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcclxuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxyXG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XHJcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXHJcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcclxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xyXG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcclxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxyXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcclxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XHJcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XHJcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxyXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcclxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XHJcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXHJcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XHJcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxyXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXHJcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXHJcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3NcclxuXHRcdFx0dmFyIGFyZ3MsXHJcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxyXG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcclxuXHJcblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcclxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cclxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xyXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcclxuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xyXG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xyXG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xyXG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xyXG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxyXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcclxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcclxuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KSA6XHJcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZm47XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0cHNldWRvczoge1xyXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXHJcblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxyXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xyXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcclxuXHRcdFx0dmFyIGlucHV0ID0gW10sXHJcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxyXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcclxuXHJcblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xyXG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xyXG5cdFx0XHRcdFx0dmFyIGVsZW0sXHJcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcclxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcclxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcclxuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KSA6XHJcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcclxuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcclxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXHJcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XHJcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XHJcblx0XHRcdFx0fTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XHJcblx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcclxuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XHJcblx0XHRcdH07XHJcblx0XHR9KSxcclxuXHJcblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3JcclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXHJcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxyXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cclxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxyXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxyXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xyXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XHJcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xyXG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XHJcblx0XHRcdFx0ZG8ge1xyXG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XHJcblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XHJcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcclxuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcclxuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcclxuXHRcdFwiZW5hYmxlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcImRpc2FibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcclxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XHJcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcclxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBDb250ZW50c1xyXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cclxuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxyXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxyXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXHJcblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xyXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXHJcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xyXG5cdFx0fSxcclxuXHJcblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XHJcblx0XHR9LFxyXG5cclxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcclxuXHRcdH0sXHJcblxyXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHR2YXIgYXR0cjtcclxuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXHJcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxyXG5cclxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XHJcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcclxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxyXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gWyAwIF07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XHJcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcclxuXHRcdH0pLFxyXG5cclxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xyXG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XHJcblx0XHR9KSxcclxuXHJcblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XHJcblx0XHRcdHZhciBpID0gMDtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XHJcblx0XHRcdHZhciBpID0gMTtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XHJcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcclxuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XHJcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xyXG5cdFx0fSksXHJcblxyXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XHJcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcclxuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xyXG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcclxuXHRcdH0pXHJcblx0fVxyXG59O1xyXG5cclxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XHJcblxyXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xyXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcclxuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XHJcbn1cclxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcclxuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xyXG59XHJcblxyXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcclxuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XHJcbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xyXG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xyXG5cclxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcclxuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcclxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXHJcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XHJcblxyXG5cdGlmICggY2FjaGVkICkge1xyXG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcclxuXHR9XHJcblxyXG5cdHNvRmFyID0gc2VsZWN0b3I7XHJcblx0Z3JvdXBzID0gW107XHJcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xyXG5cclxuXHR3aGlsZSAoIHNvRmFyICkge1xyXG5cclxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cclxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xyXG5cdFx0XHRpZiAoIG1hdGNoICkge1xyXG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXHJcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XHJcblx0XHRcdH1cclxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRtYXRjaGVkID0gZmFsc2U7XHJcblxyXG5cdFx0Ly8gQ29tYmluYXRvcnNcclxuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xyXG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcclxuXHRcdFx0dG9rZW5zLnB1c2goe1xyXG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxyXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxyXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZpbHRlcnNcclxuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XHJcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcclxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcclxuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcclxuXHRcdFx0XHR0b2tlbnMucHVzaCh7XHJcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcclxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXHJcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoICFtYXRjaGVkICkge1xyXG5cdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xyXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xyXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xyXG5cdHJldHVybiBwYXJzZU9ubHkgP1xyXG5cdFx0c29GYXIubGVuZ3RoIDpcclxuXHRcdHNvRmFyID9cclxuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcclxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xyXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcclxuXHR2YXIgaSA9IDAsXHJcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxyXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xyXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xyXG5cdH1cclxuXHRyZXR1cm4gc2VsZWN0b3I7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XHJcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxyXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYgZGlyID09PSBcInBhcmVudE5vZGVcIixcclxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xyXG5cclxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XHJcblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IDpcclxuXHJcblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcclxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXHJcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XHJcblxyXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcclxuXHRcdFx0aWYgKCB4bWwgKSB7XHJcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcclxuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XHJcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcclxuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxyXG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcclxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcclxuXHJcblx0XHRcdFx0XHRcdGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGRpciBdKSAmJlxyXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xyXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBkaXIgXSA9IG5ld0NhY2hlO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcclxuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XHJcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xyXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XHJcblx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9IDpcclxuXHRcdG1hdGNoZXJzWzBdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xyXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcclxuXHR9XHJcblx0cmV0dXJuIHJlc3VsdHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0dmFyIGVsZW0sXHJcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcclxuXHRcdGkgPSAwLFxyXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcclxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xyXG5cclxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xyXG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcclxuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xyXG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcclxuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcclxuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XHJcblx0fVxyXG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xyXG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xyXG5cdH1cclxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XHJcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcclxuXHRcdFx0cHJlTWFwID0gW10sXHJcblx0XHRcdHBvc3RNYXAgPSBbXSxcclxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcclxuXHJcblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XHJcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcclxuXHJcblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxyXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cclxuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XHJcblx0XHRcdFx0ZWxlbXMsXHJcblxyXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XHJcblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcclxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XHJcblxyXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XHJcblx0XHRcdFx0XHRbXSA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XHJcblx0XHRcdFx0XHRyZXN1bHRzIDpcclxuXHRcdFx0XHRtYXRjaGVySW47XHJcblxyXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcclxuXHRcdGlmICggbWF0Y2hlciApIHtcclxuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXHJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XHJcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xyXG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XHJcblxyXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXHJcblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcclxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xyXG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggc2VlZCApIHtcclxuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcclxuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XHJcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcclxuXHRcdFx0XHRcdHRlbXAgPSBbXTtcclxuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcclxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcclxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxyXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcclxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxyXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXHJcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XHJcblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxyXG5cdFx0XHRcdFx0bWF0Y2hlck91dFxyXG5cdFx0XHQpO1xyXG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XHJcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XHJcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcclxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXHJcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxyXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcclxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcclxuXHJcblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxyXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XHJcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXHJcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XHJcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXHJcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcclxuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXHJcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cclxuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxyXG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xyXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcclxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH0gXTtcclxuXHJcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XHJcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xyXG5cclxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XHJcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXHJcblx0XHRcdFx0aiA9ICsraTtcclxuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcclxuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxyXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXHJcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxyXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxyXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxyXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXHJcblx0XHRcdFx0XHRtYXRjaGVyLFxyXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXHJcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXHJcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcclxuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxyXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXHJcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XHJcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxyXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXHJcblx0XHRcdFx0aSA9IFwiMFwiLFxyXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXHJcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxyXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxyXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcclxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxyXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXHJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXHJcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xyXG5cclxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XHJcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcclxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXHJcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcclxuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xyXG5cdFx0XHRcdFx0aiA9IDA7XHJcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XHJcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XHJcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XHJcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xyXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XHJcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXHJcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XHJcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3RcclxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcclxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcclxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cclxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XHJcblxyXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcclxuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxyXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcclxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cclxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxyXG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cclxuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cclxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XHJcblx0XHRcdFx0aiA9IDA7XHJcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xyXG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICggc2VlZCApIHtcclxuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcclxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXHJcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcclxuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XHJcblxyXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xyXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxyXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XHJcblxyXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xyXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcclxuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcclxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcclxuXHRcdH07XHJcblxyXG5cdHJldHVybiBieVNldCA/XHJcblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcclxuXHRcdHN1cGVyTWF0Y2hlcjtcclxufVxyXG5cclxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcclxuXHR2YXIgaSxcclxuXHRcdHNldE1hdGNoZXJzID0gW10sXHJcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcclxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcclxuXHJcblx0aWYgKCAhY2FjaGVkICkge1xyXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XHJcblx0XHRpZiAoICFtYXRjaCApIHtcclxuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcclxuXHRcdH1cclxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XHJcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XHJcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXHJcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcclxuXHJcblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cclxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xyXG5cdH1cclxuXHRyZXR1cm4gY2FjaGVkO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcclxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xyXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxyXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcclxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXHJcbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XHJcbiAqL1xyXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xyXG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxyXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3RvcixcclxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xyXG5cclxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcclxuXHJcblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcclxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXHJcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XHJcblxyXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcclxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcclxuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcclxuXHRcdFx0XHRzdXBwb3J0LmdldEJ5SWQgJiYgY29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJlxyXG5cdFx0XHRcdEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XHJcblxyXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XHJcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XHJcblxyXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXHJcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xyXG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcclxuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xyXG5cclxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxyXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xyXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xyXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxyXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxyXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxyXG5cdFx0XHRcdCkpICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxyXG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xyXG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcclxuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xyXG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XHJcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXHJcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxyXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcclxuXHRcdHNlZWQsXHJcblx0XHRjb250ZXh0LFxyXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxyXG5cdFx0cmVzdWx0cyxcclxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcclxuXHQpO1xyXG5cdHJldHVybiByZXN1bHRzO1xyXG59O1xyXG5cclxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcclxuXHJcbi8vIFNvcnQgc3RhYmlsaXR5XHJcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcclxuXHJcbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcclxuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxyXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcclxuXHJcbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxyXG5zZXREb2N1bWVudCgpO1xyXG5cclxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcclxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXHJcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYxICkge1xyXG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxyXG5cdHJldHVybiBkaXYxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpICkgJiAxO1xyXG59KTtcclxuXHJcbi8vIFN1cHBvcnQ6IElFPDhcclxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcclxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxyXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRkaXYuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XHJcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcclxufSkgKSB7XHJcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xyXG5cdFx0aWYgKCAhaXNYTUwgKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbi8vIFN1cHBvcnQ6IElFPDlcclxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxyXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xyXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XHJcblx0ZGl2LmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcclxuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcclxufSkgKSB7XHJcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xyXG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XHJcblx0XHR9XHJcblx0fSk7XHJcbn1cclxuXHJcbi8vIFN1cHBvcnQ6IElFPDlcclxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xyXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcclxuXHRyZXR1cm4gZGl2LmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XHJcbn0pICkge1xyXG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcclxuXHRcdHZhciB2YWw7XHJcblx0XHRpZiAoICFpc1hNTCApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XHJcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xyXG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcclxuXHRcdFx0XHRudWxsO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG5yZXR1cm4gU2l6emxlO1xyXG5cclxufSkoIHdpbmRvdyApO1xyXG5cclxuXHJcblxyXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcclxualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xyXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XHJcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xyXG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xyXG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XHJcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcclxuXHJcblxyXG5cclxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xyXG5cdHZhciBtYXRjaGVkID0gW10sXHJcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XHJcblxyXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xyXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gbWF0Y2hlZDtcclxufTtcclxuXHJcblxyXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcclxuXHR2YXIgbWF0Y2hlZCA9IFtdO1xyXG5cclxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xyXG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XHJcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIG1hdGNoZWQ7XHJcbn07XHJcblxyXG5cclxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XHJcblxyXG52YXIgcnNpbmdsZVRhZyA9ICggL148KFtcXHctXSspXFxzKlxcLz8+KD86PFxcL1xcMT58KSQvICk7XHJcblxyXG5cclxuXHJcbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XHJcblxyXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxyXG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcclxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xyXG5cdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cclxuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xyXG5cdFx0fSApO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XHJcblx0XHR9ICk7XHJcblxyXG5cdH1cclxuXHJcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyID09PSBcInN0cmluZ1wiICkge1xyXG5cdFx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcclxuXHRcdH1cclxuXHJcblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XHJcblx0fSApO1xyXG59XHJcblxyXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XHJcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xyXG5cclxuXHRpZiAoIG5vdCApIHtcclxuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgP1xyXG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdIDpcclxuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xyXG5cdFx0fSApICk7XHJcbn07XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0dmFyIGksXHJcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRyZXQgPSBbXSxcclxuXHRcdFx0c2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcclxuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xyXG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gTmVlZGVkIGJlY2F1c2UgJCggc2VsZWN0b3IsIGNvbnRleHQgKSBiZWNvbWVzICQoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApXHJcblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggbGVuID4gMSA/IGpRdWVyeS51bmlxdWUoIHJldCApIDogcmV0ICk7XHJcblx0XHRyZXQuc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yID8gdGhpcy5zZWxlY3RvciArIFwiIFwiICsgc2VsZWN0b3IgOiBzZWxlY3RvcjtcclxuXHRcdHJldHVybiByZXQ7XHJcblx0fSxcclxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xyXG5cdH0sXHJcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xyXG5cdH0sXHJcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHJldHVybiAhIXdpbm5vdyhcclxuXHRcdFx0dGhpcyxcclxuXHJcblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcclxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxyXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cclxuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxyXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxyXG5cdFx0XHRmYWxzZVxyXG5cdFx0KS5sZW5ndGg7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcclxuXHJcblxyXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcclxudmFyIHJvb3RqUXVlcnksXHJcblxyXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXHJcblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxyXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxyXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0qKSkkLyxcclxuXHJcblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xyXG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xyXG5cclxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxyXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxyXG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxyXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcclxuXHJcblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXHJcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxyXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXHJcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXHJcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXHJcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxyXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcclxuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcclxuXHJcblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcclxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XHJcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXHJcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXHJcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXHJcblx0XHRcdFx0XHRcdHRydWVcclxuXHRcdFx0XHRcdCkgKTtcclxuXHJcblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXHJcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XHJcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcclxuXHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBCbGFja2JlcnJ5IDQuNlxyXG5cdFx0XHRcdFx0Ly8gZ0VCSUQgcmV0dXJucyBub2RlcyBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICgjNjk2MylcclxuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxyXG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XHJcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5jb250ZXh0ID0gZG9jdW1lbnQ7XHJcblx0XHRcdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxyXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcclxuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xyXG5cclxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXHJcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxyXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XHJcblx0XHRcdHRoaXMuY29udGV4dCA9IHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xyXG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcclxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxyXG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XHJcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxyXG5cclxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XHJcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggc2VsZWN0b3Iuc2VsZWN0b3IgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yLnNlbGVjdG9yO1xyXG5cdFx0XHR0aGlzLmNvbnRleHQgPSBzZWxlY3Rvci5jb250ZXh0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xyXG5cdH07XHJcblxyXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXHJcbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xyXG5cclxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxyXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xyXG5cclxuXHJcbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcclxuXHJcblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcclxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xyXG5cdFx0Y2hpbGRyZW46IHRydWUsXHJcblx0XHRjb250ZW50czogdHJ1ZSxcclxuXHRcdG5leHQ6IHRydWUsXHJcblx0XHRwcmV2OiB0cnVlXHJcblx0fTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XHJcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXHJcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgaSA9IDA7XHJcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xyXG5cdFx0dmFyIGN1cixcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcclxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxyXG5cdFx0XHRwb3MgPSBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApIHx8IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgP1xyXG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3JzLCBjb250ZXh0IHx8IHRoaXMuY29udGV4dCApIDpcclxuXHRcdFx0XHQwO1xyXG5cclxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcclxuXHJcblx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXHJcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHBvcyA/XHJcblx0XHRcdFx0XHRwb3MuaW5kZXgoIGN1ciApID4gLTEgOlxyXG5cclxuXHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxyXG5cdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXHJcblx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xyXG5cclxuXHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XHJcblx0fSxcclxuXHJcblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XHJcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cclxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XHJcblx0XHRpZiAoICFlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3JcclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcclxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXHJcblxyXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcclxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXHJcblx0XHQpO1xyXG5cdH0sXHJcblxyXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxyXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcclxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXHJcblx0XHRcdClcclxuXHRcdCk7XHJcblx0fSxcclxuXHJcblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cclxuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxyXG5cdFx0KTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xyXG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cclxuXHRyZXR1cm4gY3VyO1xyXG59XHJcblxyXG5qUXVlcnkuZWFjaCgge1xyXG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcclxuXHR9LFxyXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcclxuXHR9LFxyXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xyXG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XHJcblx0fSxcclxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcclxuXHR9LFxyXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcclxuXHR9LFxyXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XHJcblx0fSxcclxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcclxuXHR9LFxyXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xyXG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xyXG5cdH0sXHJcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XHJcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xyXG5cdH0sXHJcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcclxuXHR9LFxyXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XHJcblx0fSxcclxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgalF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XHJcblx0fVxyXG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xyXG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcclxuXHJcblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcclxuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xyXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XHJcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcclxuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xyXG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XHJcblx0fTtcclxufSApO1xyXG52YXIgcm5vdHdoaXRlID0gKCAvXFxTKy9nICk7XHJcblxyXG5cclxuXHJcbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXHJcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XHJcblx0dmFyIG9iamVjdCA9IHt9O1xyXG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XHJcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XHJcblx0fSApO1xyXG5cdHJldHVybiBvYmplY3Q7XHJcbn1cclxuXHJcbi8qXHJcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxyXG4gKlxyXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xyXG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcclxuICpcclxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcclxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxyXG4gKlxyXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxyXG4gKlxyXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXHJcbiAqXHJcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxyXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXHJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxyXG4gKlxyXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxyXG4gKlxyXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcclxuICpcclxuICovXHJcbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcclxuXHJcblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxyXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcclxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xyXG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcclxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XHJcblxyXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXHJcblx0XHRmaXJpbmcsXHJcblxyXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcclxuXHRcdG1lbW9yeSxcclxuXHJcblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxyXG5cdFx0ZmlyZWQsXHJcblxyXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xyXG5cdFx0bG9ja2VkLFxyXG5cclxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XHJcblx0XHRsaXN0ID0gW10sXHJcblxyXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcclxuXHRcdHF1ZXVlID0gW10sXHJcblxyXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXHJcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxyXG5cclxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXHJcblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcclxuXHRcdFx0bG9ja2VkID0gb3B0aW9ucy5vbmNlO1xyXG5cclxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXHJcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcclxuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xyXG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcclxuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xyXG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXHJcblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxyXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxyXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcclxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XHJcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZpcmluZyA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2RcclxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcclxuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcclxuXHRcdFx0XHRcdGxpc3QgPSBbXTtcclxuXHJcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3RcclxuXHRcdHNlbGYgPSB7XHJcblxyXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XHJcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXHJcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xyXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcclxuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFyZyApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiBqUXVlcnkudHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxyXG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcclxuXHRcdFx0XHRcdFx0ZmlyZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3RcclxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xyXG5cdFx0XHRcdFx0dmFyIGluZGV4O1xyXG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XHJcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXHJcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XHJcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gKTtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXHJcblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxyXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcclxuXHRcdFx0XHRyZXR1cm4gZm4gP1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XHJcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XHJcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XHJcblx0XHRcdFx0XHRsaXN0ID0gW107XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxyXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcclxuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXHJcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XHJcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXHJcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXHJcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcclxuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcclxuXHRcdFx0XHRpZiAoICFtZW1vcnkgKSB7XHJcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xyXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XHJcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xyXG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XHJcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xyXG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xyXG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xyXG5cdFx0XHRcdFx0XHRmaXJlKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcclxuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2VcclxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRyZXR1cm4gc2VsZjtcclxufTtcclxuXHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblxyXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcclxuXHRcdHZhciB0dXBsZXMgPSBbXHJcblxyXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZVxyXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgXCJyZXNvbHZlZFwiIF0sXHJcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIFwicmVqZWN0ZWRcIiBdLFxyXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICkgXVxyXG5cdFx0XHRdLFxyXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxyXG5cdFx0XHRwcm9taXNlID0ge1xyXG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xyXG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcclxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIGkgXSApICYmIGZuc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZFsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdIGZvciBmb3J3YXJkaW5nIGFjdGlvbnMgdG8gbmV3RGVmZXJcclxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyA9PT0gcHJvbWlzZSA/IG5ld0RlZmVyLnByb21pc2UoKSA6IHRoaXMsXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcclxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9ICk7XHJcblx0XHRcdFx0XHRcdH0gKTtcclxuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcclxuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxyXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3RcclxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcclxuXHJcblx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XHJcblx0XHRwcm9taXNlLnBpcGUgPSBwcm9taXNlLnRoZW47XHJcblxyXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xyXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xyXG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXHJcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdO1xyXG5cclxuXHRcdFx0Ly8gcHJvbWlzZVsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdID0gbGlzdC5hZGRcclxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XHJcblxyXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcclxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcclxuXHRcdFx0XHRsaXN0LmFkZCggZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gc3RhdGUgPSBbIHJlc29sdmVkIHwgcmVqZWN0ZWQgXVxyXG5cdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcclxuXHJcblx0XHRcdFx0Ly8gWyByZWplY3RfbGlzdCB8IHJlc29sdmVfbGlzdCBdLmRpc2FibGU7IHByb2dyZXNzX2xpc3QubG9ja1xyXG5cdFx0XHRcdH0sIHR1cGxlc1sgaSBeIDEgXVsgMiBdLmRpc2FibGUsIHR1cGxlc1sgMiBdWyAyIF0ubG9jayApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBkZWZlcnJlZFsgcmVzb2x2ZSB8IHJlamVjdCB8IG5vdGlmeSBdXHJcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9O1xyXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xyXG5cdFx0fSApO1xyXG5cclxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxyXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xyXG5cclxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcclxuXHRcdGlmICggZnVuYyApIHtcclxuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBbGwgZG9uZSFcclxuXHRcdHJldHVybiBkZWZlcnJlZDtcclxuXHR9LFxyXG5cclxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcclxuXHR3aGVuOiBmdW5jdGlvbiggc3Vib3JkaW5hdGUgLyogLCAuLi4sIHN1Ym9yZGluYXRlTiAqLyApIHtcclxuXHRcdHZhciBpID0gMCxcclxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxyXG5cdFx0XHRsZW5ndGggPSByZXNvbHZlVmFsdWVzLmxlbmd0aCxcclxuXHJcblx0XHRcdC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcclxuXHRcdFx0cmVtYWluaW5nID0gbGVuZ3RoICE9PSAxIHx8XHJcblx0XHRcdFx0KCBzdWJvcmRpbmF0ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggc3Vib3JkaW5hdGUucHJvbWlzZSApICkgPyBsZW5ndGggOiAwLFxyXG5cclxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZC5cclxuXHRcdFx0Ly8gSWYgcmVzb2x2ZVZhbHVlcyBjb25zaXN0IG9mIG9ubHkgYSBzaW5nbGUgRGVmZXJyZWQsIGp1c3QgdXNlIHRoYXQuXHJcblx0XHRcdGRlZmVycmVkID0gcmVtYWluaW5nID09PSAxID8gc3Vib3JkaW5hdGUgOiBqUXVlcnkuRGVmZXJyZWQoKSxcclxuXHJcblx0XHRcdC8vIFVwZGF0ZSBmdW5jdGlvbiBmb3IgYm90aCByZXNvbHZlIGFuZCBwcm9ncmVzcyB2YWx1ZXNcclxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpLCBjb250ZXh0cywgdmFsdWVzICkge1xyXG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdFx0XHRjb250ZXh0c1sgaSBdID0gdGhpcztcclxuXHRcdFx0XHRcdHZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xyXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZXMgPT09IHByb2dyZXNzVmFsdWVzICkge1xyXG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xyXG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRwcm9ncmVzc1ZhbHVlcywgcHJvZ3Jlc3NDb250ZXh0cywgcmVzb2x2ZUNvbnRleHRzO1xyXG5cclxuXHRcdC8vIEFkZCBsaXN0ZW5lcnMgdG8gRGVmZXJyZWQgc3Vib3JkaW5hdGVzOyB0cmVhdCBvdGhlcnMgYXMgcmVzb2x2ZWRcclxuXHRcdGlmICggbGVuZ3RoID4gMSApIHtcclxuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xyXG5cdFx0XHRwcm9ncmVzc0NvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcclxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XHJcblx0XHRcdFx0aWYgKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlICkgKSB7XHJcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSgpXHJcblx0XHRcdFx0XHRcdC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApXHJcblx0XHRcdFx0XHRcdC5kb25lKCB1cGRhdGVGdW5jKCBpLCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKSApXHJcblx0XHRcdFx0XHRcdC5mYWlsKCBkZWZlcnJlZC5yZWplY3QgKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0LS1yZW1haW5pbmc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSWYgd2UncmUgbm90IHdhaXRpbmcgb24gYW55dGhpbmcsIHJlc29sdmUgdGhlIG1hc3RlclxyXG5cdFx0aWYgKCAhcmVtYWluaW5nICkge1xyXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcclxudmFyIHJlYWR5TGlzdDtcclxuXHJcbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcclxuXHJcblx0Ly8gQWRkIHRoZSBjYWxsYmFja1xyXG5cdGpRdWVyeS5yZWFkeS5wcm9taXNlKCkuZG9uZSggZm4gKTtcclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblxyXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXHJcblx0aXNSZWFkeTogZmFsc2UsXHJcblxyXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcclxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxyXG5cdHJlYWR5V2FpdDogMSxcclxuXHJcblx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XHJcblx0aG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHtcclxuXHRcdGlmICggaG9sZCApIHtcclxuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxyXG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcclxuXHJcblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XHJcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxyXG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xyXG5cclxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXHJcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcclxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcclxuXHJcblx0XHQvLyBUcmlnZ2VyIGFueSBib3VuZCByZWFkeSBldmVudHNcclxuXHRcdGlmICggalF1ZXJ5LmZuLnRyaWdnZXJIYW5kbGVyICkge1xyXG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlckhhbmRsZXIoIFwicmVhZHlcIiApO1xyXG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkub2ZmKCBcInJlYWR5XCIgKTtcclxuXHRcdH1cclxuXHR9XHJcbn0gKTtcclxuXHJcbi8qKlxyXG4gKiBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxyXG4gKi9cclxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xyXG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcclxuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xyXG5cdGpRdWVyeS5yZWFkeSgpO1xyXG59XHJcblxyXG5qUXVlcnkucmVhZHkucHJvbWlzZSA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcblx0aWYgKCAhcmVhZHlMaXN0ICkge1xyXG5cclxuXHRcdHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xyXG5cclxuXHRcdC8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXHJcblx0XHQvLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cclxuXHRcdC8vIFN1cHBvcnQ6IElFOS0xMCBvbmx5XHJcblx0XHQvLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cclxuXHRcdGlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XHJcblx0XHRcdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xyXG5cclxuXHRcdFx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XHJcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xyXG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XHJcblxyXG5cdFx0XHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xyXG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gcmVhZHlMaXN0LnByb21pc2UoIG9iaiApO1xyXG59O1xyXG5cclxuLy8gS2ljayBvZmYgdGhlIERPTSByZWFkeSBjaGVjayBldmVuIGlmIHRoZSB1c2VyIGRvZXMgbm90XHJcbmpRdWVyeS5yZWFkeS5wcm9taXNlKCk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cclxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXHJcbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XHJcblx0dmFyIGkgPSAwLFxyXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxyXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xyXG5cclxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXHJcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xyXG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XHJcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xyXG5cdFx0fVxyXG5cclxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxyXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xyXG5cclxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xyXG5cdFx0XHRyYXcgPSB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggYnVsayApIHtcclxuXHJcblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxyXG5cdFx0XHRpZiAoIHJhdyApIHtcclxuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcclxuXHRcdFx0XHRmbiA9IG51bGw7XHJcblxyXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0YnVsayA9IGZuO1xyXG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBmbiApIHtcclxuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0Zm4oXHJcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XHJcblx0XHRcdFx0XHR2YWx1ZSA6XHJcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBjaGFpbmFibGUgP1xyXG5cdFx0ZWxlbXMgOlxyXG5cclxuXHRcdC8vIEdldHNcclxuXHRcdGJ1bGsgP1xyXG5cdFx0XHRmbi5jYWxsKCBlbGVtcyApIDpcclxuXHRcdFx0bGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XHJcbn07XHJcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xyXG5cclxuXHQvLyBBY2NlcHRzIG9ubHk6XHJcblx0Ly8gIC0gTm9kZVxyXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcclxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxyXG5cdC8vICAtIE9iamVjdFxyXG5cdC8vICAgIC0gQW55XHJcblx0LyoganNoaW50IC1XMDE4ICovXHJcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gRGF0YSgpIHtcclxuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XHJcbn1cclxuXHJcbkRhdGEudWlkID0gMTtcclxuXHJcbkRhdGEucHJvdG90eXBlID0ge1xyXG5cclxuXHRyZWdpc3RlcjogZnVuY3Rpb24oIG93bmVyLCBpbml0aWFsICkge1xyXG5cdFx0dmFyIHZhbHVlID0gaW5pdGlhbCB8fCB7fTtcclxuXHJcblx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXHJcblx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxyXG5cdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcclxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XHJcblxyXG5cdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlLCBub24td3JpdGFibGUgcHJvcGVydHlcclxuXHRcdC8vIGNvbmZpZ3VyYWJpbGl0eSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXHJcblx0XHQvLyBkZWxldGVkIHdpdGggdGhlIGRlbGV0ZSBvcGVyYXRvclxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XHJcblx0XHRcdFx0dmFsdWU6IHZhbHVlLFxyXG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxyXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xyXG5cdH0sXHJcblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcclxuXHJcblx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2VycyxcclxuXHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXHJcblx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cclxuXHRcdGlmICggIWFjY2VwdERhdGEoIG93bmVyICkgKSB7XHJcblx0XHRcdHJldHVybiB7fTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcclxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcclxuXHJcblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcclxuXHRcdGlmICggIXZhbHVlICkge1xyXG5cdFx0XHR2YWx1ZSA9IHt9O1xyXG5cclxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXHJcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXHJcblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxyXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxyXG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XHJcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcclxuXHJcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XHJcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcclxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xyXG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXHJcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG5cdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB2YWx1ZTtcclxuXHR9LFxyXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcclxuXHRcdHZhciBwcm9wLFxyXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XHJcblxyXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xyXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0Y2FjaGVbIGRhdGEgXSA9IHZhbHVlO1xyXG5cclxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3RcclxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xyXG5cdFx0XHRcdGNhY2hlWyBwcm9wIF0gPSBkYXRhWyBwcm9wIF07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBjYWNoZTtcclxuXHR9LFxyXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XHJcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcclxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsga2V5IF07XHJcblx0fSxcclxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcclxuXHRcdHZhciBzdG9yZWQ7XHJcblxyXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxyXG5cdFx0Ly9cclxuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcclxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxyXG5cdFx0Ly9cclxuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxyXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxyXG5cdFx0Ly9cclxuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3RcclxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcclxuXHRcdC8vXHJcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XHJcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xyXG5cclxuXHRcdFx0c3RvcmVkID0gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcclxuXHJcblx0XHRcdHJldHVybiBzdG9yZWQgIT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0c3RvcmVkIDogdGhpcy5nZXQoIG93bmVyLCBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXHJcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcclxuXHRcdC8vXHJcblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXHJcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxyXG5cdFx0Ly9cclxuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xyXG5cclxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xyXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXHJcblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xyXG5cdH0sXHJcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcclxuXHRcdHZhciBpLCBuYW1lLCBjYW1lbCxcclxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XHJcblxyXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0dGhpcy5yZWdpc3Rlciggb3duZXIgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSgga2V5ICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIElmIFwibmFtZVwiIGlzIGFuIGFycmF5IG9mIGtleXMuLi5cclxuXHRcdFx0XHQvLyBXaGVuIGRhdGEgaXMgaW5pdGlhbGx5IGNyZWF0ZWQsIHZpYSAoXCJrZXlcIiwgXCJ2YWxcIikgc2lnbmF0dXJlLFxyXG5cdFx0XHRcdC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLlxyXG5cdFx0XHRcdC8vIFNpbmNlIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIF9ob3dfIGEga2V5IHdhcyBhZGRlZCwgcmVtb3ZlXHJcblx0XHRcdFx0Ly8gYm90aCBwbGFpbiBrZXkgYW5kIGNhbWVsQ2FzZSBrZXkuICMxMjc4NlxyXG5cdFx0XHRcdC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLlxyXG5cdFx0XHRcdG5hbWUgPSBrZXkuY29uY2F0KCBrZXkubWFwKCBqUXVlcnkuY2FtZWxDYXNlICkgKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjYW1lbCA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xyXG5cclxuXHRcdFx0XHQvLyBUcnkgdGhlIHN0cmluZyBhcyBhIGtleSBiZWZvcmUgYW55IG1hbmlwdWxhdGlvblxyXG5cdFx0XHRcdGlmICgga2V5IGluIGNhY2hlICkge1xyXG5cdFx0XHRcdFx0bmFtZSA9IFsga2V5LCBjYW1lbCBdO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxyXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2VcclxuXHRcdFx0XHRcdG5hbWUgPSBjYW1lbDtcclxuXHRcdFx0XHRcdG5hbWUgPSBuYW1lIGluIGNhY2hlID9cclxuXHRcdFx0XHRcdFx0WyBuYW1lIF0gOiAoIG5hbWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpID0gbmFtZS5sZW5ndGg7XHJcblxyXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0XHRkZWxldGUgY2FjaGVbIG5hbWVbIGkgXSBdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXHJcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9IDM1LTQ1K1xyXG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xyXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXHJcblx0XHRcdC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDdcclxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcclxuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xyXG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xyXG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xyXG5cdH1cclxufTtcclxudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcclxuXHJcbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XHJcblxyXG5cclxuXHJcbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XHJcbi8vXHJcbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXHJcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2VcclxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxyXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cclxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcclxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxyXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XHJcblxyXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxyXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcclxuXHJcbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XHJcblx0dmFyIG5hbWU7XHJcblxyXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcclxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcclxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xyXG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcclxuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xyXG5cclxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0ZGF0YSA9IGRhdGEgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6XHJcblx0XHRcdFx0XHRkYXRhID09PSBcImZhbHNlXCIgPyBmYWxzZSA6XHJcblx0XHRcdFx0XHRkYXRhID09PSBcIm51bGxcIiA/IG51bGwgOlxyXG5cclxuXHRcdFx0XHRcdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXHJcblx0XHRcdFx0XHQrZGF0YSArIFwiXCIgPT09IGRhdGEgPyArZGF0YSA6XHJcblx0XHRcdFx0XHRyYnJhY2UudGVzdCggZGF0YSApID8galF1ZXJ5LnBhcnNlSlNPTiggZGF0YSApIDpcclxuXHRcdFx0XHRcdGRhdGE7XHJcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cclxuXHJcblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xyXG5cdH0sXHJcblxyXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xyXG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XHJcblx0fSxcclxuXHJcblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcclxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cclxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XHJcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XHJcblx0fSxcclxuXHJcblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xyXG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XHJcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcclxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcclxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcclxuXHJcblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcclxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xyXG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcclxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUxMStcclxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXHJcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcclxuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xyXG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcclxuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcclxuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcclxuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIGRhdGEsIGNhbWVsS2V5O1xyXG5cclxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcclxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcclxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3RcclxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxyXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxyXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxyXG5cdFx0XHRcdC8vIHdpdGggdGhlIGtleSBhcy1pc1xyXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApIHx8XHJcblxyXG5cdFx0XHRcdFx0Ly8gVHJ5IHRvIGZpbmQgZGFzaGVkIGtleSBpZiBpdCBleGlzdHMgKGdoLTI3NzkpXHJcblx0XHRcdFx0XHQvLyBUaGlzIGlzIGZvciAyLjIueCBvbmx5XHJcblx0XHRcdFx0XHRkYXRhVXNlci5nZXQoIGVsZW0sIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Y2FtZWxLZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcclxuXHJcblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxyXG5cdFx0XHRcdC8vIHdpdGggdGhlIGtleSBjYW1lbGl6ZWRcclxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBjYW1lbEtleSApO1xyXG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxyXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcclxuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGNhbWVsS2V5LCB1bmRlZmluZWQgKTtcclxuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXHJcblx0XHRcdGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XHJcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRcdC8vIEZpcnN0LCBhdHRlbXB0IHRvIHN0b3JlIGEgY29weSBvciByZWZlcmVuY2Ugb2YgYW55XHJcblx0XHRcdFx0Ly8gZGF0YSB0aGF0IG1pZ2h0J3ZlIGJlZW4gc3RvcmUgd2l0aCBhIGNhbWVsQ2FzZWQga2V5LlxyXG5cdFx0XHRcdHZhciBkYXRhID0gZGF0YVVzZXIuZ2V0KCB0aGlzLCBjYW1lbEtleSApO1xyXG5cclxuXHRcdFx0XHQvLyBGb3IgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZSBpbnRlcm9wLCB3ZSBoYXZlIHRvXHJcblx0XHRcdFx0Ly8gc3RvcmUgcHJvcGVydHkgbmFtZXMgd2l0aCBkYXNoZXMgaW4gYSBjYW1lbENhc2UgZm9ybS5cclxuXHRcdFx0XHQvLyBUaGlzIG1pZ2h0IG5vdCBhcHBseSB0byBhbGwgcHJvcGVydGllcy4uLipcclxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGNhbWVsS2V5LCB2YWx1ZSApO1xyXG5cclxuXHRcdFx0XHQvLyAqLi4uIEluIHRoZSBjYXNlIG9mIHByb3BlcnRpZXMgdGhhdCBtaWdodCBfYWN0dWFsbHlfXHJcblx0XHRcdFx0Ly8gaGF2ZSBkYXNoZXMsIHdlIG5lZWQgdG8gYWxzbyBzdG9yZSBhIGNvcHkgb2YgdGhhdFxyXG5cdFx0XHRcdC8vIHVuY2hhbmdlZCBwcm9wZXJ0eS5cclxuXHRcdFx0XHRpZiAoIGtleS5pbmRleE9mKCBcIi1cIiApID4gLTEgJiYgZGF0YSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XHJcblx0XHR9ICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcclxuXHRcdHZhciBxdWV1ZTtcclxuXHJcblx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XHJcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XHJcblxyXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXHJcblx0XHRcdGlmICggZGF0YSApIHtcclxuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBqUXVlcnkuaXNBcnJheSggZGF0YSApICkge1xyXG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcclxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHJcblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcclxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXHJcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcclxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcclxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxyXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XHJcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcclxuXHRcdFx0c3RhcnRMZW5ndGgtLTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGZuICkge1xyXG5cclxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xyXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXHJcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xyXG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cclxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XHJcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XHJcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxyXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcclxuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XHJcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xyXG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcclxuXHRcdFx0fSApXHJcblx0XHR9ICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xyXG5cdFx0dmFyIHNldHRlciA9IDI7XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0ZGF0YSA9IHR5cGU7XHJcblx0XHRcdHR5cGUgPSBcImZ4XCI7XHJcblx0XHRcdHNldHRlci0tO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcclxuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdHRoaXMgOlxyXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xyXG5cclxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxyXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0fSxcclxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xyXG5cdFx0fSApO1xyXG5cdH0sXHJcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XHJcblx0fSxcclxuXHJcblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxyXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxyXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XHJcblx0XHR2YXIgdG1wLFxyXG5cdFx0XHRjb3VudCA9IDEsXHJcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXHJcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcclxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxyXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XHJcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xyXG5cdFx0XHRvYmogPSB0eXBlO1xyXG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xyXG5cclxuXHRcdHdoaWxlICggaS0tICkge1xyXG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xyXG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XHJcblx0XHRcdFx0Y291bnQrKztcclxuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJlc29sdmUoKTtcclxuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcclxuXHR9XHJcbn0gKTtcclxudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xyXG5cclxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xyXG5cclxuXHJcbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcclxuXHJcbnZhciBpc0hpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcclxuXHJcblx0XHQvLyBpc0hpZGRlbiBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xyXG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XHJcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcclxuXHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIiB8fFxyXG5cdFx0XHQhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcclxuXHR9O1xyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xyXG5cdHZhciBhZGp1c3RlZCxcclxuXHRcdHNjYWxlID0gMSxcclxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcclxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cclxuXHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0d2Vlbi5jdXIoKTsgfSA6XHJcblx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApOyB9LFxyXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxyXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxyXG5cclxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXHJcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcclxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcclxuXHJcblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcclxuXHJcblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXHJcblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxyXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XHJcblxyXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcclxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xyXG5cclxuXHRcdGRvIHtcclxuXHJcblx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxyXG5cdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xyXG5cdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcclxuXHJcblx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcclxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcclxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xyXG5cclxuXHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXHJcblx0XHQvLyBCcmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoLlxyXG5cdFx0fSB3aGlsZSAoXHJcblx0XHRcdHNjYWxlICE9PSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsICkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0aWYgKCB2YWx1ZVBhcnRzICkge1xyXG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XHJcblxyXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXHJcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XHJcblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XHJcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XHJcblx0XHRpZiAoIHR3ZWVuICkge1xyXG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcclxuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xyXG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGFkanVzdGVkO1xyXG59XHJcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcclxuXHJcbnZhciBydGFnTmFtZSA9ICggLzwoW1xcdzotXSspLyApO1xyXG5cclxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XHJcblxyXG5cclxuXHJcbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXHJcbnZhciB3cmFwTWFwID0ge1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTlcclxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcclxuXHJcblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcclxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXHJcblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxyXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcclxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxyXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcclxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXHJcblxyXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxyXG59O1xyXG5cclxuLy8gU3VwcG9ydDogSUU5XHJcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcclxuXHJcbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XHJcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xyXG5cclxuXHJcbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTktMTErXHJcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxyXG5cdHZhciByZXQgPSB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiA/XHJcblx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApIDpcclxuXHRcdFx0dHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiA/XHJcblx0XHRcdFx0Y29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKSA6XHJcblx0XHRcdFtdO1xyXG5cclxuXHRyZXR1cm4gdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIGpRdWVyeS5ub2RlTmFtZSggY29udGV4dCwgdGFnICkgP1xyXG5cdFx0alF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICkgOlxyXG5cdFx0cmV0O1xyXG59XHJcblxyXG5cclxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXHJcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcclxuXHR2YXIgaSA9IDAsXHJcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xyXG5cclxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRkYXRhUHJpdi5zZXQoXHJcblx0XHRcdGVsZW1zWyBpIF0sXHJcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxyXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXHJcblx0XHQpO1xyXG5cdH1cclxufVxyXG5cclxuXHJcbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcclxuXHJcbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XHJcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcclxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXHJcblx0XHRub2RlcyA9IFtdLFxyXG5cdFx0aSA9IDAsXHJcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xyXG5cclxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcclxuXHJcblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcclxuXHJcblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxyXG5cdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxyXG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcclxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcclxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcclxuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcclxuXHJcblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcclxuXHJcblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxyXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xyXG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xyXG5cclxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcclxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xyXG5cdFx0XHRcdHdoaWxlICggai0tICkge1xyXG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxyXG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcclxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xyXG5cclxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XHJcblxyXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5MilcclxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XHJcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG5cclxuXHRpID0gMDtcclxuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xyXG5cclxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXHJcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcclxuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xyXG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcclxuXHJcblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcclxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xyXG5cclxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3RvcnlcclxuXHRcdGlmICggY29udGFpbnMgKSB7XHJcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcclxuXHRcdGlmICggc2NyaXB0cyApIHtcclxuXHRcdFx0aiA9IDA7XHJcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xyXG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcclxuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGZyYWdtZW50O1xyXG59XHJcblxyXG5cclxuKCBmdW5jdGlvbigpIHtcclxuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXHJcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXHJcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMC00LjMsIFNhZmFyaTw9NS4xXHJcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcclxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXHJcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXHJcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XHJcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcclxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xyXG5cclxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaTw9NS4xLCBBbmRyb2lkPDQuMlxyXG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xyXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcclxuXHJcblx0Ly8gU3VwcG9ydDogSUU8PTExK1xyXG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXHJcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xyXG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xyXG59ICkoKTtcclxuXHJcblxyXG52YXJcclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXHJcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXHJcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xyXG5cclxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcclxuXHRyZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XHJcblx0cmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG4vLyBTdXBwb3J0OiBJRTlcclxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXHJcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xyXG5cdHRyeSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcclxuXHR9IGNhdGNoICggZXJyICkgeyB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XHJcblx0dmFyIG9yaWdGbiwgdHlwZTtcclxuXHJcblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXHJcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XHJcblxyXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcclxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xyXG5cclxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxyXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3RvcjtcclxuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xyXG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGVsZW07XHJcblx0fVxyXG5cclxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xyXG5cclxuXHRcdC8vICggdHlwZXMsIGZuIClcclxuXHRcdGZuID0gc2VsZWN0b3I7XHJcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XHJcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcclxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xyXG5cclxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcclxuXHRcdFx0Zm4gPSBkYXRhO1xyXG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcclxuXHRcdFx0Zm4gPSBkYXRhO1xyXG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XHJcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcclxuXHRcdGZuID0gcmV0dXJuRmFsc2U7XHJcblx0fSBlbHNlIGlmICggIWZuICkge1xyXG5cdFx0cmV0dXJuIGVsZW07XHJcblx0fVxyXG5cclxuXHRpZiAoIG9uZSA9PT0gMSApIHtcclxuXHRcdG9yaWdGbiA9IGZuO1xyXG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblxyXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cclxuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xyXG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cclxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xyXG5cdH1cclxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcclxuXHR9ICk7XHJcbn1cclxuXHJcbi8qXHJcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cclxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cclxuICovXHJcbmpRdWVyeS5ldmVudCA9IHtcclxuXHJcblx0Z2xvYmFsOiB7fSxcclxuXHJcblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xyXG5cclxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcclxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXHJcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcclxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcclxuXHJcblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxyXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xyXG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XHJcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xyXG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xyXG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3RcclxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XHJcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xyXG5cdFx0fVxyXG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xyXG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xyXG5cclxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxyXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcclxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXHJcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcclxuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XHJcblx0XHR3aGlsZSAoIHQtLSApIHtcclxuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xyXG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcclxuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcclxuXHJcblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xyXG5cdFx0XHRpZiAoICF0eXBlICkge1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblxyXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcclxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xyXG5cclxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxyXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcclxuXHJcblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXHJcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcclxuXHRcdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcclxuXHRcdFx0XHRkYXRhOiBkYXRhLFxyXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXHJcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxyXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3RvcixcclxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxyXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXHJcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XHJcblxyXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxyXG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcclxuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XHJcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XHJcblxyXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxyXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcclxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XHJcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XHJcblxyXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XHJcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcclxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcclxuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cclxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XHJcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcclxuXHJcblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXHJcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxyXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXHJcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xyXG5cclxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxyXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XHJcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xyXG5cdFx0d2hpbGUgKCB0LS0gKSB7XHJcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcclxuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XHJcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XHJcblxyXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcclxuXHRcdFx0aWYgKCAhdHlwZSApIHtcclxuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XHJcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcclxuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcclxuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcclxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcclxuXHJcblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcclxuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcclxuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XHJcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcclxuXHJcblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxyXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcclxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcclxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcclxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcclxuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xyXG5cclxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xyXG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xyXG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3RcclxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXHJcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XHJcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxyXG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XHJcblxyXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXHJcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcclxuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblxyXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XHJcblx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICk7XHJcblxyXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLFxyXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcclxuXHRcdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxyXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxyXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcclxuXHJcblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxyXG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XHJcblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XHJcblxyXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxyXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcclxuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcclxuXHJcblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xyXG5cdFx0aSA9IDA7XHJcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcclxuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcclxuXHJcblx0XHRcdGogPSAwO1xyXG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxyXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xyXG5cclxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXHJcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXHJcblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcclxuXHJcblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XHJcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XHJcblxyXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxyXG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXHJcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xyXG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XHJcblx0fSxcclxuXHJcblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XHJcblx0XHR2YXIgaSwgbWF0Y2hlcywgc2VsLCBoYW5kbGVPYmosXHJcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxyXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcclxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xyXG5cclxuXHRcdC8vIFN1cHBvcnQgKGF0IGxlYXN0KTogQ2hyb21lLCBJRTlcclxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcclxuXHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICgjMTMxODApXHJcblx0XHQvL1xyXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDw9NDIrXHJcblx0XHQvLyBBdm9pZCBub24tbGVmdC1jbGljayBpbiBGRiBidXQgZG9uJ3QgYmxvY2sgSUUgcmFkaW8gZXZlbnRzICgjMzg2MSwgZ2gtMjM0MylcclxuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJiBjdXIubm9kZVR5cGUgJiZcclxuXHRcdFx0KCBldmVudC50eXBlICE9PSBcImNsaWNrXCIgfHwgaXNOYU4oIGV2ZW50LmJ1dHRvbiApIHx8IGV2ZW50LmJ1dHRvbiA8IDEgKSApIHtcclxuXHJcblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xyXG5cclxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcclxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcclxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAoIGN1ci5kaXNhYmxlZCAhPT0gdHJ1ZSB8fCBldmVudC50eXBlICE9PSBcImNsaWNrXCIgKSApIHtcclxuXHRcdFx0XHRcdG1hdGNoZXMgPSBbXTtcclxuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xyXG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcclxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRcdFx0bWF0Y2hlc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdICkge1xyXG5cdFx0XHRcdFx0XHRcdG1hdGNoZXMucHVzaCggaGFuZGxlT2JqICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICggbWF0Y2hlcy5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZXMgfSApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcclxuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcclxuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogdGhpcywgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XHJcblx0fSxcclxuXHJcblx0Ly8gSW5jbHVkZXMgc29tZSBldmVudCBwcm9wcyBzaGFyZWQgYnkgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnRcclxuXHRwcm9wczogKCBcImFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGRldGFpbCBldmVudFBoYXNlIFwiICtcclxuXHRcdFwibWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiICkuc3BsaXQoIFwiIFwiICksXHJcblxyXG5cdGZpeEhvb2tzOiB7fSxcclxuXHJcblx0a2V5SG9va3M6IHtcclxuXHRcdHByb3BzOiBcImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGVcIi5zcGxpdCggXCIgXCIgKSxcclxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcclxuXHJcblx0XHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xyXG5cdFx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgKSB7XHJcblx0XHRcdFx0ZXZlbnQud2hpY2ggPSBvcmlnaW5hbC5jaGFyQ29kZSAhPSBudWxsID8gb3JpZ2luYWwuY2hhckNvZGUgOiBvcmlnaW5hbC5rZXlDb2RlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZXZlbnQ7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0bW91c2VIb29rczoge1xyXG5cdFx0cHJvcHM6ICggXCJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIFwiICtcclxuXHRcdFx0XCJzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50XCIgKS5zcGxpdCggXCIgXCIgKSxcclxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcclxuXHRcdFx0dmFyIGV2ZW50RG9jLCBkb2MsIGJvZHksXHJcblx0XHRcdFx0YnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uO1xyXG5cclxuXHRcdFx0Ly8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZVxyXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VYID09IG51bGwgJiYgb3JpZ2luYWwuY2xpZW50WCAhPSBudWxsICkge1xyXG5cdFx0XHRcdGV2ZW50RG9jID0gZXZlbnQudGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XHJcblx0XHRcdFx0ZG9jID0gZXZlbnREb2MuZG9jdW1lbnRFbGVtZW50O1xyXG5cdFx0XHRcdGJvZHkgPSBldmVudERvYy5ib2R5O1xyXG5cclxuXHRcdFx0XHRldmVudC5wYWdlWCA9IG9yaWdpbmFsLmNsaWVudFggK1xyXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLnNjcm9sbExlZnQgfHwgYm9keSAmJiBib2R5LnNjcm9sbExlZnQgfHwgMCApIC1cclxuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5jbGllbnRMZWZ0IHx8IGJvZHkgJiYgYm9keS5jbGllbnRMZWZ0IHx8IDAgKTtcclxuXHRcdFx0XHRldmVudC5wYWdlWSA9IG9yaWdpbmFsLmNsaWVudFkgK1xyXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLnNjcm9sbFRvcCAgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCAgfHwgMCApIC1cclxuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5jbGllbnRUb3AgIHx8IGJvZHkgJiYgYm9keS5jbGllbnRUb3AgIHx8IDAgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxyXG5cdFx0XHQvLyBOb3RlOiBidXR0b24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIGRvbid0IHVzZSBpdFxyXG5cdFx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRldmVudC53aGljaCA9ICggYnV0dG9uICYgMSA/IDEgOiAoIGJ1dHRvbiAmIDIgPyAzIDogKCBidXR0b24gJiA0ID8gMiA6IDAgKSApICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBldmVudDtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRmaXg6IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHRcdGlmICggZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gKSB7XHJcblx0XHRcdHJldHVybiBldmVudDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDcmVhdGUgYSB3cml0YWJsZSBjb3B5IG9mIHRoZSBldmVudCBvYmplY3QgYW5kIG5vcm1hbGl6ZSBzb21lIHByb3BlcnRpZXNcclxuXHRcdHZhciBpLCBwcm9wLCBjb3B5LFxyXG5cdFx0XHR0eXBlID0gZXZlbnQudHlwZSxcclxuXHRcdFx0b3JpZ2luYWxFdmVudCA9IGV2ZW50LFxyXG5cdFx0XHRmaXhIb29rID0gdGhpcy5maXhIb29rc1sgdHlwZSBdO1xyXG5cclxuXHRcdGlmICggIWZpeEhvb2sgKSB7XHJcblx0XHRcdHRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPVxyXG5cdFx0XHRcdHJtb3VzZUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMubW91c2VIb29rcyA6XHJcblx0XHRcdFx0cmtleUV2ZW50LnRlc3QoIHR5cGUgKSA/IHRoaXMua2V5SG9va3MgOlxyXG5cdFx0XHRcdHt9O1xyXG5cdFx0fVxyXG5cdFx0Y29weSA9IGZpeEhvb2sucHJvcHMgPyB0aGlzLnByb3BzLmNvbmNhdCggZml4SG9vay5wcm9wcyApIDogdGhpcy5wcm9wcztcclxuXHJcblx0XHRldmVudCA9IG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcclxuXHJcblx0XHRpID0gY29weS5sZW5ndGg7XHJcblx0XHR3aGlsZSAoIGktLSApIHtcclxuXHRcdFx0cHJvcCA9IGNvcHlbIGkgXTtcclxuXHRcdFx0ZXZlbnRbIHByb3AgXSA9IG9yaWdpbmFsRXZlbnRbIHByb3AgXTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdXBwb3J0OiBDb3Jkb3ZhIDIuNSAoV2ViS2l0KSAoIzEzMjU1KVxyXG5cdFx0Ly8gQWxsIGV2ZW50cyBzaG91bGQgaGF2ZSBhIHRhcmdldDsgQ29yZG92YSBkZXZpY2VyZWFkeSBkb2Vzbid0XHJcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XHJcblx0XHRcdGV2ZW50LnRhcmdldCA9IGRvY3VtZW50O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjArLCBDaHJvbWU8MjhcclxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXHJcblx0XHRpZiAoIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PT0gMyApIHtcclxuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZpeEhvb2suZmlsdGVyID8gZml4SG9vay5maWx0ZXIoIGV2ZW50LCBvcmlnaW5hbEV2ZW50ICkgOiBldmVudDtcclxuXHR9LFxyXG5cclxuXHRzcGVjaWFsOiB7XHJcblx0XHRsb2FkOiB7XHJcblxyXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXHJcblx0XHRcdG5vQnViYmxlOiB0cnVlXHJcblx0XHR9LFxyXG5cdFx0Zm9jdXM6IHtcclxuXHJcblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxyXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcclxuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcclxuXHRcdH0sXHJcblx0XHRibHVyOiB7XHJcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XHJcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXHJcblx0XHR9LFxyXG5cdFx0Y2xpY2s6IHtcclxuXHJcblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XHJcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xyXG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xyXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0XHRcdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRiZWZvcmV1bmxvYWQ6IHtcclxuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXHJcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxyXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcclxuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcclxuXHJcblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXHJcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XHJcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xyXG5cclxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcclxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcclxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XHJcblx0fVxyXG5cclxuXHQvLyBFdmVudCBvYmplY3RcclxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcclxuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcclxuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xyXG5cclxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXHJcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cclxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcclxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXHJcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XHJcblx0XHRcdHJldHVyblRydWUgOlxyXG5cdFx0XHRyZXR1cm5GYWxzZTtcclxuXHJcblx0Ly8gRXZlbnQgdHlwZVxyXG5cdH0gZWxzZSB7XHJcblx0XHR0aGlzLnR5cGUgPSBzcmM7XHJcblx0fVxyXG5cclxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxyXG5cdGlmICggcHJvcHMgKSB7XHJcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xyXG5cdH1cclxuXHJcblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcclxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcclxuXHJcblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxyXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xyXG59O1xyXG5cclxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXHJcbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxyXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xyXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXHJcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcclxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXHJcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxyXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcclxuXHJcblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XHJcblxyXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xyXG5cclxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xyXG5cclxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xyXG5cclxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcclxuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdH1cclxuXHR9LFxyXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcclxuXHJcblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcclxuXHJcblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XHJcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHR9XHJcbn07XHJcblxyXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3NcclxuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cclxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcclxuLy9cclxuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxyXG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcclxuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxyXG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxyXG5qUXVlcnkuZWFjaCgge1xyXG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXHJcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxyXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxyXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcclxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcclxuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xyXG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXHJcblx0XHRiaW5kVHlwZTogZml4LFxyXG5cclxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xyXG5cdFx0XHR2YXIgcmV0LFxyXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXHJcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXHJcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xyXG5cclxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cclxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcclxuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xyXG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XHJcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHR9O1xyXG59ICk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XHJcblx0fSxcclxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XHJcblx0fSxcclxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xyXG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcclxuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xyXG5cclxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxyXG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XHJcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXHJcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XHJcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxyXG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxyXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3RvcixcclxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxyXG5cdFx0XHQpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xyXG5cclxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcclxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcclxuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdH1cclxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xyXG5cclxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxyXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xyXG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xyXG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG52YXJcclxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Oi1dKylbXj5dKilcXC8+L2dpLFxyXG5cclxuXHQvLyBTdXBwb3J0OiBJRSAxMC0xMSwgRWRnZSAxMDI0MCtcclxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxyXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXHJcblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXHJcblxyXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxyXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcclxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxyXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcclxuXHJcbi8vIE1hbmlwdWxhdGluZyB0YWJsZXMgcmVxdWlyZXMgYSB0Ym9keVxyXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XHJcblx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcclxuXHRcdGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSA/XHJcblxyXG5cdFx0ZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0Ym9keVwiIClbIDAgXSB8fFxyXG5cdFx0XHRlbGVtLmFwcGVuZENoaWxkKCBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0Ym9keVwiICkgKSA6XHJcblx0XHRlbGVtO1xyXG59XHJcblxyXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXHJcbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XHJcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XHJcblx0cmV0dXJuIGVsZW07XHJcbn1cclxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcclxuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcclxuXHJcblx0aWYgKCBtYXRjaCApIHtcclxuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XHJcblx0fSBlbHNlIHtcclxuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XHJcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XHJcblxyXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXHJcblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcclxuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcclxuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xyXG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xyXG5cclxuXHRcdGlmICggZXZlbnRzICkge1xyXG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xyXG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcclxuXHJcblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xyXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcclxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xyXG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xyXG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcclxuXHJcblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XHJcblx0fVxyXG59XHJcblxyXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcclxuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcclxuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxyXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xyXG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XHJcblxyXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXHJcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xyXG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xyXG5cclxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXHJcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcclxuXHJcblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxyXG5cdFx0aSA9IDAsXHJcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXHJcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxyXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXHJcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XHJcblxyXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxyXG5cdGlmICggaXNGdW5jdGlvbiB8fFxyXG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxyXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xyXG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XHJcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcclxuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcclxuXHRcdH0gKTtcclxuXHR9XHJcblxyXG5cdGlmICggbCApIHtcclxuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XHJcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XHJcblxyXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcclxuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcclxuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcclxuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xyXG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XHJcblxyXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXHJcblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxyXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxyXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xyXG5cclxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xyXG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xyXG5cclxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cclxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxyXG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XHJcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcclxuXHJcblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xyXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcclxuXHJcblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxyXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xyXG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcclxuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxyXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXHJcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxyXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY29sbGVjdGlvbjtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XHJcblx0dmFyIG5vZGUsXHJcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXHJcblx0XHRpID0gMDtcclxuXHJcblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xyXG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xyXG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XHJcblx0XHRcdH1cclxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZWxlbTtcclxufVxyXG5cclxualF1ZXJ5LmV4dGVuZCgge1xyXG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcclxuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxyXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXHJcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XHJcblxyXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXHJcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXHJcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcclxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xyXG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xyXG5cclxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XHJcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXHJcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XHJcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XHJcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcclxuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xyXG5cclxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcclxuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3RvcnlcclxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcclxuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XHJcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxyXG5cdFx0cmV0dXJuIGNsb25lO1xyXG5cdH0sXHJcblxyXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xyXG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXHJcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xyXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcclxuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xyXG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcclxuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9IDM1LTQ1K1xyXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXHJcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PSAzNS00NStcclxuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxyXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSApO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cclxuXHQvLyBLZWVwIGRvbU1hbmlwIGV4cG9zZWQgdW50aWwgMy4wIChnaC0yMjI1KVxyXG5cdGRvbU1hbmlwOiBkb21NYW5pcCxcclxuXHJcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XHJcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xyXG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcclxuXHR9LFxyXG5cclxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcclxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcclxuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gKTtcclxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XHJcblx0fSxcclxuXHJcblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XHJcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xyXG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcclxuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZWxlbSxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XHJcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHJcblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3NcclxuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcclxuXHJcblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcclxuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XHJcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xyXG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xyXG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcclxuXHRcdFx0XHRpID0gMCxcclxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XHJcblxyXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcclxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXHJcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xyXG5cclxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xyXG5cclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXHJcblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcclxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcclxuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XHJcblxyXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxyXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XHJcblx0XHRcdH1cclxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XHJcblx0fSxcclxuXHJcblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcclxuXHJcblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcclxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcclxuXHJcblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcclxuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcclxuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXHJcblx0XHR9LCBpZ25vcmVkICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZWFjaCgge1xyXG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxyXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXHJcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxyXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXHJcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXHJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcclxuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBlbGVtcyxcclxuXHRcdFx0cmV0ID0gW10sXHJcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcclxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxyXG5cdFx0XHRpID0gMDtcclxuXHJcblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xyXG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xyXG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBRdFdlYktpdFxyXG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzXHJcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xyXG5cdH07XHJcbn0gKTtcclxuXHJcblxyXG52YXIgaWZyYW1lLFxyXG5cdGVsZW1kaXNwbGF5ID0ge1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3hcclxuXHRcdC8vIFdlIGhhdmUgdG8gcHJlLWRlZmluZSB0aGVzZSB2YWx1ZXMgZm9yIEZGICgjMTAyMjcpXHJcblx0XHRIVE1MOiBcImJsb2NrXCIsXHJcblx0XHRCT0RZOiBcImJsb2NrXCJcclxuXHR9O1xyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlIHRoZSBhY3R1YWwgZGlzcGxheSBvZiBhIGVsZW1lbnRcclxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgbm9kZU5hbWUgb2YgdGhlIGVsZW1lbnRcclxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBEb2N1bWVudCBvYmplY3RcclxuICovXHJcblxyXG4vLyBDYWxsZWQgb25seSBmcm9tIHdpdGhpbiBkZWZhdWx0RGlzcGxheVxyXG5mdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7XHJcblx0dmFyIGVsZW0gPSBqUXVlcnkoIGRvYy5jcmVhdGVFbGVtZW50KCBuYW1lICkgKS5hcHBlbmRUbyggZG9jLmJvZHkgKSxcclxuXHJcblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbVsgMCBdLCBcImRpc3BsYXlcIiApO1xyXG5cclxuXHQvLyBXZSBkb24ndCBoYXZlIGFueSBkYXRhIHN0b3JlZCBvbiB0aGUgZWxlbWVudCxcclxuXHQvLyBzbyB1c2UgXCJkZXRhY2hcIiBtZXRob2QgYXMgZmFzdCB3YXkgdG8gZ2V0IHJpZCBvZiB0aGUgZWxlbWVudFxyXG5cdGVsZW0uZGV0YWNoKCk7XHJcblxyXG5cdHJldHVybiBkaXNwbGF5O1xyXG59XHJcblxyXG4vKipcclxuICogVHJ5IHRvIGRldGVybWluZSB0aGUgZGVmYXVsdCBkaXNwbGF5IHZhbHVlIG9mIGFuIGVsZW1lbnRcclxuICogQHBhcmFtIHtTdHJpbmd9IG5vZGVOYW1lXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWZhdWx0RGlzcGxheSggbm9kZU5hbWUgKSB7XHJcblx0dmFyIGRvYyA9IGRvY3VtZW50LFxyXG5cdFx0ZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdO1xyXG5cclxuXHRpZiAoICFkaXNwbGF5ICkge1xyXG5cdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcclxuXHJcblx0XHQvLyBJZiB0aGUgc2ltcGxlIHdheSBmYWlscywgcmVhZCBmcm9tIGluc2lkZSBhbiBpZnJhbWVcclxuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgfHwgIWRpc3BsYXkgKSB7XHJcblxyXG5cdFx0XHQvLyBVc2UgdGhlIGFscmVhZHktY3JlYXRlZCBpZnJhbWUgaWYgcG9zc2libGVcclxuXHRcdFx0aWZyYW1lID0gKCBpZnJhbWUgfHwgalF1ZXJ5KCBcIjxpZnJhbWUgZnJhbWVib3JkZXI9JzAnIHdpZHRoPScwJyBoZWlnaHQ9JzAnLz5cIiApIClcclxuXHRcdFx0XHQuYXBwZW5kVG8oIGRvYy5kb2N1bWVudEVsZW1lbnQgKTtcclxuXHJcblx0XHRcdC8vIEFsd2F5cyB3cml0ZSBhIG5ldyBIVE1MIHNrZWxldG9uIHNvIFdlYmtpdCBhbmQgRmlyZWZveCBkb24ndCBjaG9rZSBvbiByZXVzZVxyXG5cdFx0XHRkb2MgPSBpZnJhbWVbIDAgXS5jb250ZW50RG9jdW1lbnQ7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxyXG5cdFx0XHRkb2Mud3JpdGUoKTtcclxuXHRcdFx0ZG9jLmNsb3NlKCk7XHJcblxyXG5cdFx0XHRkaXNwbGF5ID0gYWN0dWFsRGlzcGxheSggbm9kZU5hbWUsIGRvYyApO1xyXG5cdFx0XHRpZnJhbWUuZGV0YWNoKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3RvcmUgdGhlIGNvcnJlY3QgZGVmYXVsdCBkaXNwbGF5XHJcblx0XHRlbGVtZGlzcGxheVsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZGlzcGxheTtcclxufVxyXG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XHJcblxyXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XHJcblxyXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUU8PTExKywgRmlyZWZveDw9MzArICgjMTUwOTgsICMxNDE1MClcclxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xyXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXHJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcclxuXHJcblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcclxuXHRcdFx0dmlldyA9IHdpbmRvdztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XHJcblx0fTtcclxuXHJcbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xyXG5cdHZhciByZXQsIG5hbWUsXHJcblx0XHRvbGQgPSB7fTtcclxuXHJcblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXHJcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xyXG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XHJcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XHJcblx0fVxyXG5cclxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xyXG5cclxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcclxuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XHJcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcclxuXHR9XHJcblxyXG5cdHJldHVybiByZXQ7XHJcbn07XHJcblxyXG5cclxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuXHJcblxyXG5cclxuKCBmdW5jdGlvbigpIHtcclxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHBpeGVsTWFyZ2luUmlnaHRWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcclxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcclxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcclxuXHJcblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcclxuXHRpZiAoICFkaXYuc3R5bGUgKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTktMTErXHJcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxyXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcclxuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xyXG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XHJcblxyXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O1wiICtcclxuXHRcdFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XHJcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcclxuXHJcblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XHJcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cclxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcclxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXHJcblx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xyXG5cdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXHJcblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztcIiArXHJcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXHJcblx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xyXG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XHJcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cclxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcclxuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcclxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XHJcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcclxuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxyXG5cdFx0ZGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcclxuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcclxuXHJcblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xyXG5cdH1cclxuXHJcblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xyXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBUaGlzIHRlc3QgaXMgZXhlY3V0ZWQgb25seSBvbmNlIGJ1dCB3ZSBzdGlsbCBkbyBtZW1vaXppbmdcclxuXHRcdFx0Ly8gc2luY2Ugd2UgY2FuIHVzZSB0aGUgYm94U2l6aW5nUmVsaWFibGUgcHJlLWNvbXB1dGluZy5cclxuXHRcdFx0Ly8gTm8gbmVlZCB0byBjaGVjayBpZiB0aGUgdGVzdCB3YXMgYWxyZWFkeSBwZXJmb3JtZWQsIHRob3VnaC5cclxuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XHJcblx0XHR9LFxyXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XHJcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XHJcblx0XHR9LFxyXG5cdFx0cGl4ZWxNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMC00LjNcclxuXHRcdFx0Ly8gV2UncmUgY2hlY2tpbmcgZm9yIGJveFNpemluZ1JlbGlhYmxlVmFsIGhlcmUgaW5zdGVhZCBvZiBwaXhlbE1hcmdpblJpZ2h0VmFsXHJcblx0XHRcdC8vIHNpbmNlIHRoYXQgY29tcHJlc3NlcyBiZXR0ZXIgYW5kIHRoZXkncmUgY29tcHV0ZWQgdG9nZXRoZXIgYW55d2F5LlxyXG5cdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XHJcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcclxuXHRcdH0sXHJcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IG9ubHksIEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gMzdcclxuXHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xyXG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcclxuXHRcdH0sXHJcblx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXHJcblx0XHRcdC8vIENoZWNrIGlmIGRpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHlcclxuXHRcdFx0Ly8gZ2V0cyBjb21wdXRlZCBtYXJnaW4tcmlnaHQgYmFzZWQgb24gd2lkdGggb2YgY29udGFpbmVyLiAoIzMzMzMpXHJcblx0XHRcdC8vIFdlYktpdCBCdWcgMTMzNDMgLSBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgd3JvbmcgdmFsdWUgZm9yIG1hcmdpbi1yaWdodFxyXG5cdFx0XHQvLyBUaGlzIHN1cHBvcnQgZnVuY3Rpb24gaXMgb25seSBleGVjdXRlZCBvbmNlIHNvIG5vIG1lbW9pemluZyBpcyBuZWVkZWQuXHJcblx0XHRcdHZhciByZXQsXHJcblx0XHRcdFx0bWFyZ2luRGl2ID0gZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcclxuXHJcblx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXI7IHBhZGRpbmdcclxuXHRcdFx0bWFyZ2luRGl2LnN0eWxlLmNzc1RleHQgPSBkaXYuc3R5bGUuY3NzVGV4dCA9XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXHJcblx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXHJcblx0XHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtcIiArXHJcblx0XHRcdFx0XCJkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MFwiO1xyXG5cdFx0XHRtYXJnaW5EaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBtYXJnaW5EaXYuc3R5bGUud2lkdGggPSBcIjBcIjtcclxuXHRcdFx0ZGl2LnN0eWxlLndpZHRoID0gXCIxcHhcIjtcclxuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcclxuXHJcblx0XHRcdHJldCA9ICFwYXJzZUZsb2F0KCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggbWFyZ2luRGl2ICkubWFyZ2luUmlnaHQgKTtcclxuXHJcblx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XHJcblx0XHRcdGRpdi5yZW1vdmVDaGlsZCggbWFyZ2luRGl2ICk7XHJcblxyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cdH0gKTtcclxufSApKCk7XHJcblxyXG5cclxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcclxuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxyXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xyXG5cclxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xyXG5cdHJldCA9IGNvbXB1dGVkID8gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF0gOiB1bmRlZmluZWQ7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDEyLjF4IG9ubHlcclxuXHQvLyBGYWxsIGJhY2sgdG8gc3R5bGUgZXZlbiB3aXRob3V0IGNvbXB1dGVkXHJcblx0Ly8gY29tcHV0ZWQgaXMgdW5kZWZpbmVkIGZvciBlbGVtcyBvbiBkb2N1bWVudCBmcmFnbWVudHNcclxuXHRpZiAoICggcmV0ID09PSBcIlwiIHx8IHJldCA9PT0gdW5kZWZpbmVkICkgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XHJcblx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcclxuXHR9XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFOVxyXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgb25seSBuZWVkZWQgZm9yIC5jc3MoJ2ZpbHRlcicpICgjMTI1MzcpXHJcblx0aWYgKCBjb21wdXRlZCApIHtcclxuXHJcblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXHJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcclxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXHJcblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XHJcblx0XHQvLyBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXHJcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XHJcblxyXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXHJcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XHJcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XHJcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XHJcblxyXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XHJcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcclxuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XHJcblxyXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXHJcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XHJcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XHJcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xyXG5cclxuXHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcclxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXHJcblx0XHRyZXQgKyBcIlwiIDpcclxuXHRcdHJldDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcclxuXHJcblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cclxuXHRyZXR1cm4ge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xyXG5cclxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcclxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXHJcblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXHJcblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcblxyXG52YXJcclxuXHJcblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxyXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxyXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxyXG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcclxuXHJcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXHJcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xyXG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXHJcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXHJcblx0fSxcclxuXHJcblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiT1wiLCBcIk1velwiLCBcIm1zXCIgXSxcclxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xyXG5cclxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxyXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcclxuXHJcblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcclxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcclxuXHRcdHJldHVybiBuYW1lO1xyXG5cdH1cclxuXHJcblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xyXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXHJcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xyXG5cclxuXHR3aGlsZSAoIGktLSApIHtcclxuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcclxuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xyXG5cdFx0XHRyZXR1cm4gbmFtZTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XHJcblxyXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cclxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcclxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcclxuXHRyZXR1cm4gbWF0Y2hlcyA/XHJcblxyXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3NcclxuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxyXG5cdFx0dmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcclxuXHR2YXIgaSA9IGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgP1xyXG5cclxuXHRcdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxyXG5cdFx0NCA6XHJcblxyXG5cdFx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xyXG5cdFx0bmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXHJcblxyXG5cdFx0dmFsID0gMDtcclxuXHJcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xyXG5cclxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcclxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XHJcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xyXG5cclxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XHJcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xyXG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcclxuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXHJcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcclxuXHJcblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XHJcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiB2YWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xyXG5cclxuXHQvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byB0aGUgYm9yZGVyLWJveCB2YWx1ZVxyXG5cdHZhciB2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZSxcclxuXHRcdHZhbCA9IG5hbWUgPT09IFwid2lkdGhcIiA/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCxcclxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxyXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xyXG5cclxuXHQvLyBTb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcclxuXHQvLyBzdmcgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02NDkyODVcclxuXHQvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2NjhcclxuXHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xyXG5cclxuXHRcdC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeVxyXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcclxuXHRcdGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHtcclxuXHRcdFx0dmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXHJcblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcclxuXHRcdFx0cmV0dXJuIHZhbDtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xyXG5cdFx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxyXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXHJcblx0XHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XHJcblxyXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxyXG5cdFx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcclxuXHR9XHJcblxyXG5cdC8vIFVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXHJcblx0cmV0dXJuICggdmFsICtcclxuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxyXG5cdFx0XHRlbGVtLFxyXG5cdFx0XHRuYW1lLFxyXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXHJcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXHJcblx0XHRcdHN0eWxlc1xyXG5cdFx0KVxyXG5cdCkgKyBcInB4XCI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcclxuXHR2YXIgZGlzcGxheSwgZWxlbSwgaGlkZGVuLFxyXG5cdFx0dmFsdWVzID0gW10sXHJcblx0XHRpbmRleCA9IDAsXHJcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XHJcblxyXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XHJcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XHJcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xyXG5cdFx0XHRjb250aW51ZTtcclxuXHRcdH1cclxuXHJcblx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiICk7XHJcblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xyXG5cdFx0aWYgKCBzaG93ICkge1xyXG5cclxuXHRcdFx0Ly8gUmVzZXQgdGhlIGlubGluZSBkaXNwbGF5IG9mIHRoaXMgZWxlbWVudCB0byBsZWFybiBpZiBpdCBpc1xyXG5cdFx0XHQvLyBiZWluZyBoaWRkZW4gYnkgY2FzY2FkZWQgcnVsZXMgb3Igbm90XHJcblx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSAmJiBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcclxuXHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTZXQgZWxlbWVudHMgd2hpY2ggaGF2ZSBiZWVuIG92ZXJyaWRkZW4gd2l0aCBkaXNwbGF5OiBub25lXHJcblx0XHRcdC8vIGluIGEgc3R5bGVzaGVldCB0byB3aGF0ZXZlciB0aGUgZGVmYXVsdCBicm93c2VyIHN0eWxlIGlzXHJcblx0XHRcdC8vIGZvciBzdWNoIGFuIGVsZW1lbnRcclxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW4oIGVsZW0gKSApIHtcclxuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5hY2Nlc3MoXHJcblx0XHRcdFx0XHRlbGVtLFxyXG5cdFx0XHRcdFx0XCJvbGRkaXNwbGF5XCIsXHJcblx0XHRcdFx0XHRkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aGlkZGVuID0gaXNIaWRkZW4oIGVsZW0gKTtcclxuXHJcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgfHwgIWhpZGRlbiApIHtcclxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoXHJcblx0XHRcdFx0XHRlbGVtLFxyXG5cdFx0XHRcdFx0XCJvbGRkaXNwbGF5XCIsXHJcblx0XHRcdFx0XHRoaWRkZW4gPyBkaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiBtb3N0IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wXHJcblx0Ly8gdG8gYXZvaWQgdGhlIGNvbnN0YW50IHJlZmxvd1xyXG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XHJcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XHJcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xyXG5cdFx0XHRjb250aW51ZTtcclxuXHRcdH1cclxuXHRcdGlmICggIXNob3cgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgKSB7XHJcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IHNob3cgPyB2YWx1ZXNbIGluZGV4IF0gfHwgXCJcIiA6IFwibm9uZVwiO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVsZW1lbnRzO1xyXG59XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblxyXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxyXG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxyXG5cdGNzc0hvb2tzOiB7XHJcblx0XHRvcGFjaXR5OiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xyXG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcclxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcclxuXHRjc3NOdW1iZXI6IHtcclxuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcclxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcclxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcclxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcclxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxyXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXHJcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcclxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxyXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxyXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXHJcblx0XHRcIndpZG93c1wiOiB0cnVlLFxyXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcclxuXHRcdFwiem9vbVwiOiB0cnVlXHJcblx0fSxcclxuXHJcblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxyXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcclxuXHRjc3NQcm9wczoge1xyXG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcclxuXHR9LFxyXG5cclxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxyXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xyXG5cclxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xyXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcclxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxyXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcclxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xyXG5cclxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcclxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xyXG5cclxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXHJcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcclxuXHJcblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcclxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcclxuXHJcblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcclxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XHJcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xyXG5cclxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcclxuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcclxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxyXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XHJcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xyXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXHJcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcclxuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxyXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcclxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcclxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXHJcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3RcclxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcclxuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXHJcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xyXG5cclxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxyXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxyXG5cdFx0XHQoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBvcmlnTmFtZSApIHx8IG9yaWdOYW1lICk7XHJcblxyXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxyXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XHJcblxyXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcclxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcclxuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XHJcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxyXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XHJcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xyXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcclxuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XHJcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcclxuXHRcdH1cclxuXHRcdHJldHVybiB2YWw7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XHJcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblxyXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxyXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XHJcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcclxuXHRcdFx0XHRcdGVsZW0ub2Zmc2V0V2lkdGggPT09IDAgP1xyXG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcclxuXHRcdFx0XHRcdFx0fSApIDpcclxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XHJcblx0XHRcdHZhciBtYXRjaGVzLFxyXG5cdFx0XHRcdHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApLFxyXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgJiYgYXVnbWVudFdpZHRoT3JIZWlnaHQoXHJcblx0XHRcdFx0XHRlbGVtLFxyXG5cdFx0XHRcdFx0bmFtZSxcclxuXHRcdFx0XHRcdGV4dHJhLFxyXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcclxuXHRcdFx0XHRcdHN0eWxlc1xyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxyXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXHJcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcclxuXHJcblx0XHRcdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gdmFsdWU7XHJcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XHJcblx0XHR9XHJcblx0fTtcclxufSApO1xyXG5cclxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxyXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcclxuXHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XHJcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cclxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuXHRcdFx0XHRcdH0gKVxyXG5cdFx0XHRcdCkgKyBcInB4XCI7XHJcblx0XHR9XHJcblx0fVxyXG4pO1xyXG5cclxuLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcclxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQsXHJcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xyXG5cdFx0aWYgKCBjb21wdXRlZCApIHtcclxuXHRcdFx0cmV0dXJuIHN3YXAoIGVsZW0sIHsgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIgfSxcclxuXHRcdFx0XHRjdXJDU1MsIFsgZWxlbSwgXCJtYXJnaW5SaWdodFwiIF0gKTtcclxuXHRcdH1cclxuXHR9XHJcbik7XHJcblxyXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXHJcbmpRdWVyeS5lYWNoKCB7XHJcblx0bWFyZ2luOiBcIlwiLFxyXG5cdHBhZGRpbmc6IFwiXCIsXHJcblx0Ym9yZGVyOiBcIldpZHRoXCJcclxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xyXG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XHJcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIGkgPSAwLFxyXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXHJcblxyXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xyXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XHJcblxyXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XHJcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxyXG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcclxuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcclxuXHRcdFx0XHRtYXAgPSB7fSxcclxuXHRcdFx0XHRpID0gMDtcclxuXHJcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIG5hbWUgKSApIHtcclxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcclxuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XHJcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gbWFwO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XHJcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcclxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XHJcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcclxuXHR9LFxyXG5cdHNob3c6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XHJcblx0fSxcclxuXHRoaWRlOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xyXG5cdH0sXHJcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XHJcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XHJcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggaXNIaWRkZW4oIHRoaXMgKSApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xyXG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XHJcbn1cclxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XHJcblxyXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XHJcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxyXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcclxuXHRcdHRoaXMuZWxlbSA9IGVsZW07XHJcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xyXG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcclxuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xyXG5cdFx0dGhpcy5lbmQgPSBlbmQ7XHJcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xyXG5cdH0sXHJcblx0Y3VyOiBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XHJcblxyXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XHJcblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcclxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xyXG5cdH0sXHJcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcclxuXHRcdHZhciBlYXNlZCxcclxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xyXG5cclxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xyXG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcclxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cclxuXHRcdFx0KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xyXG5cclxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XHJcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcclxuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcbn07XHJcblxyXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XHJcblxyXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XHJcblx0X2RlZmF1bHQ6IHtcclxuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xyXG5cdFx0XHR2YXIgcmVzdWx0O1xyXG5cclxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcclxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cclxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XHJcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XHJcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXHJcblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xyXG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxyXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XHJcblxyXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cclxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XHJcblxyXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cclxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxyXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxyXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcclxuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XHJcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xyXG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8vIFN1cHBvcnQ6IElFOVxyXG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcclxuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xyXG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xyXG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbmpRdWVyeS5lYXNpbmcgPSB7XHJcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcclxuXHRcdHJldHVybiBwO1xyXG5cdH0sXHJcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xyXG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcclxuXHR9LFxyXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcclxufTtcclxuXHJcbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xyXG5cclxuLy8gQmFjayBDb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcclxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcclxuXHJcblxyXG5cclxuXHJcbnZhclxyXG5cdGZ4Tm93LCB0aW1lcklkLFxyXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxyXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xyXG5cclxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxyXG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcclxuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcclxuXHR9ICk7XHJcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcclxufVxyXG5cclxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cclxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcclxuXHR2YXIgd2hpY2gsXHJcblx0XHRpID0gMCxcclxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcclxuXHJcblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxyXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XHJcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XHJcblx0Zm9yICggOyBpIDwgNCA7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcclxuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XHJcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcclxuXHR9XHJcblxyXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xyXG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBhdHRycztcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XHJcblx0dmFyIHR3ZWVuLFxyXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxyXG5cdFx0aW5kZXggPSAwLFxyXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XHJcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XHJcblxyXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxyXG5cdFx0XHRyZXR1cm4gdHdlZW47XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcclxuXHQvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIHR3ZWVuLCBob29rcywgb2xkZmlyZSwgZGlzcGxheSwgY2hlY2tEaXNwbGF5LFxyXG5cdFx0YW5pbSA9IHRoaXMsXHJcblx0XHRvcmlnID0ge30sXHJcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXHJcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuKCBlbGVtICksXHJcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xyXG5cclxuXHQvLyBIYW5kbGUgcXVldWU6IGZhbHNlIHByb21pc2VzXHJcblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcclxuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcclxuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcclxuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xyXG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcclxuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xyXG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHRcdGhvb2tzLnVucXVldWVkKys7XHJcblxyXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcclxuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XHJcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XHJcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9ICk7XHJcblx0XHR9ICk7XHJcblx0fVxyXG5cclxuXHQvLyBIZWlnaHQvd2lkdGggb3ZlcmZsb3cgcGFzc1xyXG5cdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiaGVpZ2h0XCIgaW4gcHJvcHMgfHwgXCJ3aWR0aFwiIGluIHByb3BzICkgKSB7XHJcblxyXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbm90aGluZyBzbmVha3Mgb3V0XHJcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFOS0xMCBkbyBub3RcclxuXHRcdC8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZFxyXG5cdFx0Ly8gb3ZlcmZsb3dZIGFyZSBzZXQgdG8gdGhlIHNhbWUgdmFsdWVcclxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xyXG5cclxuXHRcdC8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGlubGluZS1ibG9jayBmb3IgaGVpZ2h0L3dpZHRoXHJcblx0XHQvLyBhbmltYXRpb25zIG9uIGlubGluZSBlbGVtZW50cyB0aGF0IGFyZSBoYXZpbmcgd2lkdGgvaGVpZ2h0IGFuaW1hdGVkXHJcblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcclxuXHJcblx0XHQvLyBUZXN0IGRlZmF1bHQgZGlzcGxheSBpZiBkaXNwbGF5IGlzIGN1cnJlbnRseSBcIm5vbmVcIlxyXG5cdFx0Y2hlY2tEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgP1xyXG5cdFx0XHRkYXRhUHJpdi5nZXQoIGVsZW0sIFwib2xkZGlzcGxheVwiICkgfHwgZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXk7XHJcblxyXG5cdFx0aWYgKCBjaGVja0Rpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xyXG5cdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcclxuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcclxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XHJcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcclxuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xyXG5cdFx0fSApO1xyXG5cdH1cclxuXHJcblx0Ly8gc2hvdy9oaWRlIHBhc3NcclxuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xyXG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xyXG5cdFx0aWYgKCByZnh0eXBlcy5leGVjKCB2YWx1ZSApICkge1xyXG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcclxuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xyXG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgZGF0YVNob3cgbGVmdCBvdmVyIGZyb20gYSBzdG9wcGVkIGhpZGUgb3Igc2hvd1xyXG5cdFx0XHRcdC8vIGFuZCB3ZSBhcmUgZ29pbmcgdG8gcHJvY2VlZCB3aXRoIHNob3csIHdlIHNob3VsZCBwcmV0ZW5kIHRvIGJlIGhpZGRlblxyXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xyXG5cclxuXHRcdC8vIEFueSBub24tZnggdmFsdWUgc3RvcHMgdXMgZnJvbSByZXN0b3JpbmcgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWVcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRpc3BsYXkgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZiAoICFqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xyXG5cdFx0aWYgKCBkYXRhU2hvdyApIHtcclxuXHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xyXG5cdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHt9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3RvcmUgc3RhdGUgaWYgaXRzIHRvZ2dsZSAtIGVuYWJsZXMgLnN0b3AoKS50b2dnbGUoKSB0byBcInJldmVyc2VcIlxyXG5cdFx0aWYgKCB0b2dnbGUgKSB7XHJcblx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XHJcblx0XHR9XHJcblx0XHRpZiAoIGhpZGRlbiApIHtcclxuXHRcdFx0alF1ZXJ5KCBlbGVtICkuc2hvdygpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5oaWRlKCk7XHJcblx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBwcm9wO1xyXG5cclxuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XHJcblx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcclxuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XHJcblx0XHRcdHR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XHJcblxyXG5cdFx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcclxuXHRcdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gdHdlZW4uc3RhcnQ7XHJcblx0XHRcdFx0aWYgKCBoaWRkZW4gKSB7XHJcblx0XHRcdFx0XHR0d2Vlbi5lbmQgPSB0d2Vlbi5zdGFydDtcclxuXHRcdFx0XHRcdHR3ZWVuLnN0YXJ0ID0gcHJvcCA9PT0gXCJ3aWR0aFwiIHx8IHByb3AgPT09IFwiaGVpZ2h0XCIgPyAxIDogMDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0Ly8gSWYgdGhpcyBpcyBhIG5vb3AgbGlrZSAuaGlkZSgpLmhpZGUoKSwgcmVzdG9yZSBhbiBvdmVyd3JpdHRlbiBkaXNwbGF5IHZhbHVlXHJcblx0fSBlbHNlIGlmICggKCBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5ICkgPT09IFwiaW5saW5lXCIgKSB7XHJcblx0XHRzdHlsZS5kaXNwbGF5ID0gZGlzcGxheTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xyXG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XHJcblxyXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xyXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xyXG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XHJcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XHJcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xyXG5cdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcclxuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcclxuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcclxuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xyXG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XHJcblx0XHR9XHJcblxyXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcclxuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcclxuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XHJcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xyXG5cclxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxyXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXHJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xyXG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcclxuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XHJcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xyXG5cdHZhciByZXN1bHQsXHJcblx0XHRzdG9wcGVkLFxyXG5cdFx0aW5kZXggPSAwLFxyXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxyXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXHJcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XHJcblx0XHR9ICksXHJcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICggc3RvcHBlZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcclxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXHJcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxyXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcclxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXHJcblx0XHRcdFx0aW5kZXggPSAwLFxyXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xyXG5cclxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XHJcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XHJcblxyXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xyXG5cdFx0XHRlbGVtOiBlbGVtLFxyXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcclxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xyXG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxyXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxyXG5cdFx0XHR9LCBvcHRpb25zICksXHJcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcclxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxyXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXHJcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxyXG5cdFx0XHR0d2VlbnM6IFtdLFxyXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcclxuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXHJcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcclxuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XHJcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcclxuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxyXG5cclxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xyXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XHJcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xyXG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcclxuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcclxuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxyXG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcclxuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcclxuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdH1cclxuXHRcdH0gKSxcclxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xyXG5cclxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xyXG5cclxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcclxuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XHJcblx0XHRpZiAoIHJlc3VsdCApIHtcclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcclxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxyXG5cdFx0XHRcdFx0alF1ZXJ5LnByb3h5KCByZXN1bHQuc3RvcCwgcmVzdWx0ICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XHJcblxyXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XHJcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcclxuXHR9XHJcblxyXG5cdGpRdWVyeS5meC50aW1lcihcclxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcclxuXHRcdFx0ZWxlbTogZWxlbSxcclxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxyXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcclxuXHRcdH0gKVxyXG5cdCk7XHJcblxyXG5cdC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXHJcblx0cmV0dXJuIGFuaW1hdGlvbi5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxyXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcclxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcclxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xyXG59XHJcblxyXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XHJcblx0dHdlZW5lcnM6IHtcclxuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcclxuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcclxuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XHJcblx0XHRcdHJldHVybiB0d2VlbjtcclxuXHRcdH0gXVxyXG5cdH0sXHJcblxyXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xyXG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xyXG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3R3aGl0ZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBwcm9wLFxyXG5cdFx0XHRpbmRleCA9IDAsXHJcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcclxuXHJcblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcclxuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xyXG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xyXG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxyXG5cclxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcclxuXHRcdGlmICggcHJlcGVuZCApIHtcclxuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XHJcblx0XHR9XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XHJcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xyXG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcclxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXHJcblx0XHRkdXJhdGlvbjogc3BlZWQsXHJcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcclxuXHR9O1xyXG5cclxuXHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZngub2ZmID8gMCA6IHR5cGVvZiBvcHQuZHVyYXRpb24gPT09IFwibnVtYmVyXCIgP1xyXG5cdFx0b3B0LmR1cmF0aW9uIDogb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgP1xyXG5cdFx0XHRqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXSA6IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XHJcblxyXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxyXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xyXG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xyXG5cdH1cclxuXHJcblx0Ly8gUXVldWVpbmdcclxuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xyXG5cclxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcclxuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XHJcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gb3B0O1xyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcclxuXHJcblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcclxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW4gKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXHJcblxyXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcclxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcclxuXHR9LFxyXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcclxuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXHJcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcclxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3RcclxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XHJcblxyXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxyXG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XHJcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xyXG5cclxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cclxuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcclxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xyXG5cdH0sXHJcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XHJcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xyXG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XHJcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xyXG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XHJcblx0XHR9O1xyXG5cclxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xyXG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcclxuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcclxuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcclxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXHJcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcclxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XHJcblxyXG5cdFx0XHRpZiAoIGluZGV4ICkge1xyXG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XHJcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcclxuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xyXG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XHJcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxyXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xyXG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXHJcblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcclxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxyXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cdH0sXHJcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcclxuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgaW5kZXgsXHJcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxyXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxyXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXHJcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcclxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XHJcblxyXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXHJcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcclxuXHJcblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxyXG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XHJcblxyXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XHJcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXHJcblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XHJcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XHJcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XHJcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cclxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcclxuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcclxuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xyXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XHJcblx0XHR9ICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XHJcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cclxuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcclxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xyXG5cdH07XHJcbn0gKTtcclxuXHJcbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcclxualF1ZXJ5LmVhY2goIHtcclxuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxyXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxyXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxyXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxyXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcclxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxyXG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XHJcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcclxuXHR9O1xyXG59ICk7XHJcblxyXG5qUXVlcnkudGltZXJzID0gW107XHJcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIHRpbWVyLFxyXG5cdFx0aSA9IDAsXHJcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xyXG5cclxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcclxuXHJcblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xyXG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcclxuXHJcblx0XHQvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWRcclxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xyXG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XHJcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xyXG5cdH1cclxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcclxufTtcclxuXHJcbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcclxuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XHJcblx0aWYgKCB0aW1lcigpICkge1xyXG5cdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XHJcblx0fSBlbHNlIHtcclxuXHRcdGpRdWVyeS50aW1lcnMucG9wKCk7XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XHJcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xyXG5cdGlmICggIXRpbWVySWQgKSB7XHJcblx0XHR0aW1lcklkID0gd2luZG93LnNldEludGVydmFsKCBqUXVlcnkuZngudGljaywgalF1ZXJ5LmZ4LmludGVydmFsICk7XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcclxuXHR3aW5kb3cuY2xlYXJJbnRlcnZhbCggdGltZXJJZCApO1xyXG5cclxuXHR0aW1lcklkID0gbnVsbDtcclxufTtcclxuXHJcbmpRdWVyeS5meC5zcGVlZHMgPSB7XHJcblx0c2xvdzogNjAwLFxyXG5cdGZhc3Q6IDIwMCxcclxuXHJcblx0Ly8gRGVmYXVsdCBzcGVlZFxyXG5cdF9kZWZhdWx0OiA0MDBcclxufTtcclxuXHJcblxyXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXHJcbi8vIGh0dHA6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cclxualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XHJcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcclxuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XHJcblxyXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XHJcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XHJcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcclxuXHRcdH07XHJcblx0fSApO1xyXG59O1xyXG5cclxuXHJcbiggZnVuY3Rpb24oKSB7XHJcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXHJcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXHJcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xyXG5cclxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBpT1M8PTUuMSwgQW5kcm9pZDw9NC4yK1xyXG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxyXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXHJcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3RcclxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPD0yLjNcclxuXHQvLyBPcHRpb25zIGluc2lkZSBkaXNhYmxlZCBzZWxlY3RzIGFyZSBpbmNvcnJlY3RseSBtYXJrZWQgYXMgZGlzYWJsZWRcclxuXHRzZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xyXG5cdHN1cHBvcnQub3B0RGlzYWJsZWQgPSAhb3B0LmRpc2FibGVkO1xyXG5cclxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXHJcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cclxuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xyXG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XHJcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcclxuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XHJcbn0gKSgpO1xyXG5cclxuXHJcbnZhciBib29sSG9vayxcclxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XHJcblx0XHR2YXIgcmV0LCBob29rcyxcclxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xyXG5cclxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcclxuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxyXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XHJcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlXHJcblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXHJcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcclxuXHRcdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lIF0gfHxcclxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxyXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XHJcblx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xyXG5cdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcclxuXHJcblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxyXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xyXG5cdH0sXHJcblxyXG5cdGF0dHJIb29rczoge1xyXG5cdFx0dHlwZToge1xyXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxyXG5cdFx0XHRcdFx0alF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcclxuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xyXG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xyXG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XHJcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xyXG5cdFx0dmFyIG5hbWUsIHByb3BOYW1lLFxyXG5cdFx0XHRpID0gMCxcclxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApO1xyXG5cclxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XHJcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xyXG5cdFx0XHRcdHByb3BOYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xyXG5cclxuXHRcdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgZ2V0IHNwZWNpYWwgdHJlYXRtZW50ICgjMTA4NzApXHJcblx0XHRcdFx0aWYgKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBTZXQgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB0byBmYWxzZVxyXG5cdFx0XHRcdFx0ZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSApO1xyXG5cclxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xyXG5ib29sSG9vayA9IHtcclxuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcclxuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xyXG5cclxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxyXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBuYW1lO1xyXG5cdH1cclxufTtcclxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcclxuXHJcblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xyXG5cdFx0dmFyIHJldCwgaGFuZGxlO1xyXG5cdFx0aWYgKCAhaXNYTUwgKSB7XHJcblxyXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXHJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIG5hbWUgXTtcclxuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gcmV0O1xyXG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XHJcblx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIDpcclxuXHRcdFx0XHRudWxsO1xyXG5cdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSBoYW5kbGU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmV0O1xyXG5cdH07XHJcbn0gKTtcclxuXHJcblxyXG5cclxuXHJcbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcclxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcclxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcclxuXHR9LFxyXG5cclxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XHJcblx0XHR9ICk7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZXh0ZW5kKCB7XHJcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0dmFyIHJldCwgaG9va3MsXHJcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcclxuXHJcblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXHJcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXHJcblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XHJcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcclxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXHJcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcclxuXHRcdFx0cmV0dXJuIHJldDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xyXG5cdH0sXHJcblxyXG5cdHByb3BIb29rczoge1xyXG5cdFx0dGFiSW5kZXg6IHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHJcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXHJcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XHJcblx0XHRcdFx0Ly8gaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cclxuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxyXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gdGFiaW5kZXggP1xyXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRhYmluZGV4LCAxMCApIDpcclxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XHJcblx0XHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmIGVsZW0uaHJlZiA/XHJcblx0XHRcdFx0XHRcdFx0MCA6XHJcblx0XHRcdFx0XHRcdFx0LTE7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRwcm9wRml4OiB7XHJcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcclxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxyXG5cdH1cclxufSApO1xyXG5cclxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XHJcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxyXG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXHJcbi8vIG9uIHRoZSBvcHRpb25cclxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcclxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxyXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xyXG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xyXG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcclxuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XHJcblx0XHRcdGlmICggcGFyZW50ICkge1xyXG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xyXG5cclxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG59XHJcblxyXG5qUXVlcnkuZWFjaCggW1xyXG5cdFwidGFiSW5kZXhcIixcclxuXHRcInJlYWRPbmx5XCIsXHJcblx0XCJtYXhMZW5ndGhcIixcclxuXHRcImNlbGxTcGFjaW5nXCIsXHJcblx0XCJjZWxsUGFkZGluZ1wiLFxyXG5cdFwicm93U3BhblwiLFxyXG5cdFwiY29sU3BhblwiLFxyXG5cdFwidXNlTWFwXCIsXHJcblx0XCJmcmFtZUJvcmRlclwiLFxyXG5cdFwiY29udGVudEVkaXRhYmxlXCJcclxuXSwgZnVuY3Rpb24oKSB7XHJcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcclxufSApO1xyXG5cclxuXHJcblxyXG5cclxudmFyIHJjbGFzcyA9IC9bXFx0XFxyXFxuXFxmXS9nO1xyXG5cclxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XHJcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xyXG59XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XHJcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XHJcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xyXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0XHRcdCggXCIgXCIgKyBjdXJWYWx1ZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApO1xyXG5cclxuXHRcdFx0XHRpZiAoIGN1ciApIHtcclxuXHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xyXG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cclxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBqUXVlcnkudHJpbSggY3VyICk7XHJcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcclxuXHRcdFx0aSA9IDA7XHJcblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XHJcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XHJcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xyXG5cclxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxyXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcclxuXHRcdFx0XHRcdCggXCIgXCIgKyBjdXJWYWx1ZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApO1xyXG5cclxuXHRcdFx0XHRpZiAoIGN1ciApIHtcclxuXHRcdFx0XHRcdGogPSAwO1xyXG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcclxuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cclxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBqUXVlcnkudHJpbSggY3VyICk7XHJcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XHJcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXHJcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxyXG5cdFx0XHRcdFx0c3RhdGVWYWxcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XHJcblxyXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXHJcblx0XHRcdFx0aSA9IDA7XHJcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xyXG5cdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XHJcblxyXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxyXG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcclxuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxyXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xyXG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XHJcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxyXG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxyXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXHJcblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcclxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXHJcblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcclxuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXHJcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xyXG5cdFx0XHRcdFx0XHRcIlwiIDpcclxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9ICk7XHJcblx0fSxcclxuXHJcblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcclxuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXHJcblx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcclxuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcclxuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXHJcblx0XHRcdFx0KCBcIiBcIiArIGdldENsYXNzKCBlbGVtICkgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKVxyXG5cdFx0XHRcdFx0LmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTFcclxuXHRcdFx0KSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG52YXIgcnJldHVybiA9IC9cXHIvZyxcclxuXHRyc3BhY2VzID0gL1tcXHgyMFxcdFxcclxcblxcZl0rL2c7XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XHJcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcclxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcclxuXHJcblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xyXG5cdFx0XHRpZiAoIGVsZW0gKSB7XHJcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XHJcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xyXG5cclxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXHJcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXHJcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgP1xyXG5cclxuXHRcdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcclxuXHRcdFx0XHRcdHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICkgOlxyXG5cclxuXHRcdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxyXG5cdFx0XHRcdFx0cmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xyXG5cdFx0XHR2YXIgdmFsO1xyXG5cclxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xyXG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dmFsID0gdmFsdWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcclxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcclxuXHRcdFx0XHR2YWwgPSBcIlwiO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcclxuXHRcdFx0XHR2YWwgKz0gXCJcIjtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcclxuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcclxuXHRcdFx0XHR9ICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xyXG5cclxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcclxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHR2YWxIb29rczoge1xyXG5cdFx0b3B0aW9uOiB7XHJcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcclxuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xyXG5cdFx0XHRcdFx0dmFsIDpcclxuXHJcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTEwLTExK1xyXG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxyXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2VcclxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXHJcblx0XHRcdFx0XHRqUXVlcnkudHJpbSggalF1ZXJ5LnRleHQoIGVsZW0gKSApLnJlcGxhY2UoIHJzcGFjZXMsIFwiIFwiICk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRzZWxlY3Q6IHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbixcclxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXHJcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcclxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIgfHwgaW5kZXggPCAwLFxyXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxyXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGgsXHJcblx0XHRcdFx0XHRpID0gaW5kZXggPCAwID9cclxuXHRcdFx0XHRcdFx0bWF4IDpcclxuXHRcdFx0XHRcdFx0b25lID8gaW5kZXggOiAwO1xyXG5cclxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXHJcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XHJcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XHJcblxyXG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXHJcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxyXG5cdFx0XHRcdFx0XHRcdCggc3VwcG9ydC5vcHREaXNhYmxlZCA/XHJcblx0XHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkIDogb3B0aW9uLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT09IG51bGwgKSAmJlxyXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XHJcblx0XHRcdFx0XHRcdFx0XHQhalF1ZXJ5Lm5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cclxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcclxuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxyXG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXHJcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxyXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcclxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XHJcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XHJcblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XHJcblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcclxuXHRcdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcclxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XHJcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSApO1xyXG5cclxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XHJcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XHJcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcclxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggdmFsdWUgKSApIHtcclxuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XHJcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcclxuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XHJcblx0XHR9O1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcblxyXG5cclxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxyXG5cclxuXHJcbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztcclxuXHJcbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xyXG5cclxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcclxuXHJcblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxyXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcclxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcclxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XHJcblxyXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XHJcblxyXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcclxuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XHJcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xyXG5cclxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxyXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcclxuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcclxuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XHJcblx0XHR9XHJcblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XHJcblxyXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXHJcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cclxuXHRcdFx0ZXZlbnQgOlxyXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcclxuXHJcblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXHJcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcclxuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcclxuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xyXG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XHJcblx0XHRcdG51bGw7XHJcblxyXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXHJcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XHJcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XHJcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxyXG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XHJcblx0XHRcdFsgZXZlbnQgXSA6XHJcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xyXG5cclxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcclxuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xyXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcclxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXHJcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XHJcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XHJcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XHJcblx0XHRcdH1cclxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xyXG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcclxuXHRcdFx0XHR0bXAgPSBjdXI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxyXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcclxuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXHJcblx0XHRpID0gMDtcclxuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XHJcblxyXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xyXG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxyXG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcclxuXHJcblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXHJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcclxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xyXG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcclxuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcclxuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xyXG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XHJcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xyXG5cclxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcclxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XHJcblxyXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcclxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxyXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxyXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcclxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xyXG5cclxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2RcclxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdG1wICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xyXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdFx0XHRcdGlmICggdG1wICkge1xyXG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xyXG5cdH0sXHJcblxyXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxyXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXHJcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcclxuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcclxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxyXG5cdFx0XHRldmVudCxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHR5cGU6IHR5cGUsXHJcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcclxuXHRcdFx0fVxyXG5cdFx0KTtcclxuXHJcblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xyXG5cdH1cclxuXHJcbn0gKTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHJcblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcclxuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xyXG5cdFx0aWYgKCBlbGVtICkge1xyXG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcclxuXHRcdH1cclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIFwiICtcclxuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcclxuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxyXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xyXG5cclxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xyXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cclxuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XHJcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xyXG5cdH07XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5cclxuXHJcbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xyXG5cclxuXHJcbi8vIFN1cHBvcnQ6IEZpcmVmb3hcclxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xyXG4vL1xyXG4vLyBTdXBwb3J0OiBDaHJvbWUsIFNhZmFyaVxyXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcclxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXHJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xyXG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XHJcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcclxuXHJcblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxyXG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcclxuXHRcdH07XHJcblxyXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xyXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxyXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XHJcblxyXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xyXG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XHJcblx0XHRcdH0sXHJcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXHJcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XHJcblxyXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xyXG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcclxuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH0gKTtcclxufVxyXG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XHJcblxyXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XHJcblxyXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xyXG5cclxuXHJcblxyXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xyXG4vLyBXb3JrYXJvdW5kIGZhaWx1cmUgdG8gc3RyaW5nLWNhc3QgbnVsbCBpbnB1dFxyXG5qUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7XHJcblx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKyBcIlwiICk7XHJcbn07XHJcblxyXG5cclxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xyXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHR2YXIgeG1sO1xyXG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblxyXG5cdC8vIFN1cHBvcnQ6IElFOVxyXG5cdHRyeSB7XHJcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xyXG5cdH0gY2F0Y2ggKCBlICkge1xyXG5cdFx0eG1sID0gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHJcblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xyXG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcclxuXHR9XHJcblx0cmV0dXJuIHhtbDtcclxufTtcclxuXHJcblxyXG52YXJcclxuXHRyaGFzaCA9IC8jLiokLyxcclxuXHRydHMgPSAvKFs/Jl0pXz1bXiZdKi8sXHJcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxyXG5cclxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cclxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxyXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxyXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcclxuXHJcblx0LyogUHJlZmlsdGVyc1xyXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXHJcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcclxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XHJcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxyXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcclxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXHJcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcclxuXHQgKi9cclxuXHRwcmVmaWx0ZXJzID0ge30sXHJcblxyXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3NcclxuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXHJcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxyXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxyXG5cdCAqL1xyXG5cdHRyYW5zcG9ydHMgPSB7fSxcclxuXHJcblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXHJcblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxyXG5cclxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cclxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xyXG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcclxuXHJcbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcclxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XHJcblxyXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcclxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcclxuXHJcblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XHJcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XHJcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBkYXRhVHlwZSxcclxuXHRcdFx0aSA9IDAsXHJcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcclxuXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XHJcblxyXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXHJcblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcclxuXHJcblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcclxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xyXG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xyXG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XHJcblxyXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXHJcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XHJcblxyXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcclxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xyXG5cclxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcclxuXHRcdHZhciBzZWxlY3RlZDtcclxuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XHJcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xyXG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xyXG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXHJcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xyXG5cclxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XHJcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcclxuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHRcdHJldHVybiBzZWxlY3RlZDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xyXG59XHJcblxyXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcclxuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcclxuLy8gRml4ZXMgIzk4ODdcclxuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XHJcblx0dmFyIGtleSwgZGVlcCxcclxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcclxuXHJcblx0Zm9yICgga2V5IGluIHNyYyApIHtcclxuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAoIGRlZXAgKSB7XHJcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiB0YXJnZXQ7XHJcbn1cclxuXHJcbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcclxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcclxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXHJcbiAqL1xyXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xyXG5cclxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXHJcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXHJcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcclxuXHJcblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3NcclxuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcclxuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxyXG5cdGlmICggY3QgKSB7XHJcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xyXG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xyXG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxyXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xyXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xyXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XHJcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcclxuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xyXG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXHJcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxyXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXHJcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxyXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcclxuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XHJcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XHJcblx0fVxyXG59XHJcblxyXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXHJcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxyXG4gKi9cclxuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xyXG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxyXG5cdFx0Y29udmVydGVycyA9IHt9LFxyXG5cclxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cclxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XHJcblxyXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xyXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XHJcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcclxuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcclxuXHJcblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcclxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XHJcblxyXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XHJcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXHJcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XHJcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xyXG5cdFx0fVxyXG5cclxuXHRcdHByZXYgPSBjdXJyZW50O1xyXG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xyXG5cclxuXHRcdGlmICggY3VycmVudCApIHtcclxuXHJcblx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXHJcblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XHJcblxyXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xyXG5cclxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxyXG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xyXG5cclxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xyXG5cclxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XHJcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XHJcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xyXG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcclxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XHJcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcclxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxyXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xyXG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcclxuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXHJcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcclxuXHRcdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XHJcbn1cclxuXHJcbmpRdWVyeS5leHRlbmQoIHtcclxuXHJcblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXHJcblx0YWN0aXZlOiAwLFxyXG5cclxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XHJcblx0bGFzdE1vZGlmaWVkOiB7fSxcclxuXHRldGFnOiB7fSxcclxuXHJcblx0YWpheFNldHRpbmdzOiB7XHJcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXHJcblx0XHR0eXBlOiBcIkdFVFwiLFxyXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcclxuXHRcdGdsb2JhbDogdHJ1ZSxcclxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxyXG5cdFx0YXN5bmM6IHRydWUsXHJcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcclxuXHRcdC8qXHJcblx0XHR0aW1lb3V0OiAwLFxyXG5cdFx0ZGF0YTogbnVsbCxcclxuXHRcdGRhdGFUeXBlOiBudWxsLFxyXG5cdFx0dXNlcm5hbWU6IG51bGwsXHJcblx0XHRwYXNzd29yZDogbnVsbCxcclxuXHRcdGNhY2hlOiBudWxsLFxyXG5cdFx0dGhyb3dzOiBmYWxzZSxcclxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcclxuXHRcdGhlYWRlcnM6IHt9LFxyXG5cdFx0Ki9cclxuXHJcblx0XHRhY2NlcHRzOiB7XHJcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcclxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXHJcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXHJcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXHJcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcclxuXHRcdH0sXHJcblxyXG5cdFx0Y29udGVudHM6IHtcclxuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcclxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxyXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cclxuXHRcdH0sXHJcblxyXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcclxuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXHJcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXHJcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXHJcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXHJcblx0XHRjb252ZXJ0ZXJzOiB7XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcclxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxyXG5cclxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXHJcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXHJcblxyXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXHJcblx0XHRcdFwidGV4dCBqc29uXCI6IGpRdWVyeS5wYXJzZUpTT04sXHJcblxyXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxyXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxyXG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxyXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcclxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxyXG5cdFx0ZmxhdE9wdGlvbnM6IHtcclxuXHRcdFx0dXJsOiB0cnVlLFxyXG5cdFx0XHRjb250ZXh0OiB0cnVlXHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcclxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXHJcblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cclxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xyXG5cdFx0cmV0dXJuIHNldHRpbmdzID9cclxuXHJcblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XHJcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcclxuXHJcblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3NcclxuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XHJcblx0fSxcclxuXHJcblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXHJcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXHJcblxyXG5cdC8vIE1haW4gbWV0aG9kXHJcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcclxuXHJcblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxyXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRvcHRpb25zID0gdXJsO1xyXG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3RcclxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuXHRcdHZhciB0cmFuc3BvcnQsXHJcblxyXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXHJcblx0XHRcdGNhY2hlVVJMLFxyXG5cclxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xyXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXHJcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcclxuXHJcblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXHJcblx0XHRcdHRpbWVvdXRUaW1lcixcclxuXHJcblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxyXG5cdFx0XHR1cmxBbmNob3IsXHJcblxyXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcclxuXHRcdFx0ZmlyZUdsb2JhbHMsXHJcblxyXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXHJcblx0XHRcdGksXHJcblxyXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XHJcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxyXG5cclxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcclxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXHJcblxyXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXHJcblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxyXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XHJcblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcclxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcclxuXHJcblx0XHRcdC8vIERlZmVycmVkc1xyXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxyXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXHJcblxyXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xyXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxyXG5cclxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcclxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcclxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxyXG5cclxuXHRcdFx0Ly8gVGhlIGpxWEhSIHN0YXRlXHJcblx0XHRcdHN0YXRlID0gMCxcclxuXHJcblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxyXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcclxuXHJcblx0XHRcdC8vIEZha2UgeGhyXHJcblx0XHRcdGpxWEhSID0ge1xyXG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXHJcblxyXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcclxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcclxuXHRcdFx0XHRcdHZhciBtYXRjaDtcclxuXHRcdFx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XHJcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcclxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xyXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGUgPT09IDIgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xyXG5cdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXHJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xyXG5cdFx0XHRcdFx0dmFyIGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XHJcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSB8fCBuYW1lO1xyXG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xyXG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XHJcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3NcclxuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xyXG5cdFx0XHRcdFx0dmFyIGNvZGU7XHJcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcclxuXHRcdFx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XHJcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFjayBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xyXG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3NcclxuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XHJcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xyXG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XHJcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcclxuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcclxuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICkuY29tcGxldGUgPSBjb21wbGV0ZURlZmVycmVkLmFkZDtcclxuXHRcdGpxWEhSLnN1Y2Nlc3MgPSBqcVhIUi5kb25lO1xyXG5cdFx0anFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsO1xyXG5cclxuXHRcdC8vIFJlbW92ZSBoYXNoIGNoYXJhY3RlciAoIzc1MzE6IGFuZCBzdHJpbmcgcHJvbW90aW9uKVxyXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXHJcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxyXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXHJcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApLnJlcGxhY2UoIHJoYXNoLCBcIlwiIClcclxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcclxuXHJcblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcclxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XHJcblxyXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxyXG5cdFx0cy5kYXRhVHlwZXMgPSBqUXVlcnkudHJpbSggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xyXG5cclxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxyXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XHJcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XHJcblxyXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgtMTErXHJcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gaWYgdXJsIGlzIG1hbGZvcm1lZCwgZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XHJcblxyXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFOC0xMStcclxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxyXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XHJcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxyXG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XHJcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xyXG5cclxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcclxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXHJcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcclxuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXHJcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcclxuXHJcblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxyXG5cdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcclxuXHRcdFx0cmV0dXJuIGpxWEhSO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXHJcblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxyXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XHJcblxyXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xyXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XHJcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXHJcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcclxuXHJcblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxyXG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XHJcblxyXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXHJcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cclxuXHRcdGNhY2hlVVJMID0gcy51cmw7XHJcblxyXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcclxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcclxuXHJcblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcclxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XHJcblx0XHRcdFx0Y2FjaGVVUkwgPSAoIHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGEgKTtcclxuXHJcblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxyXG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWRcclxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcclxuXHRcdFx0XHRzLnVybCA9IHJ0cy50ZXN0KCBjYWNoZVVSTCApID9cclxuXHJcblx0XHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgJ18nIHBhcmFtZXRlciwgc2V0IGl0cyB2YWx1ZVxyXG5cdFx0XHRcdFx0Y2FjaGVVUkwucmVwbGFjZSggcnRzLCBcIiQxXz1cIiArIG5vbmNlKysgKSA6XHJcblxyXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFkZCBvbmUgdG8gdGhlIGVuZFxyXG5cdFx0XHRcdFx0Y2FjaGVVUkwgKyAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgbm9uY2UrKztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXHJcblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcclxuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xyXG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XHJcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcclxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xyXG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxyXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcclxuXHRcdFx0XCJBY2NlcHRcIixcclxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XHJcblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xyXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcclxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cclxuXHRcdCk7XHJcblxyXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXHJcblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcclxuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XHJcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxyXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IHN0YXRlID09PSAyICkgKSB7XHJcblxyXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cclxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXHJcblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcclxuXHJcblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcclxuXHRcdGZvciAoIGkgaW4geyBzdWNjZXNzOiAxLCBlcnJvcjogMSwgY29tcGxldGU6IDEgfSApIHtcclxuXHRcdFx0anFYSFJbIGkgXSggc1sgaSBdICk7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxyXG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XHJcblxyXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XHJcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XHJcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcclxuXHJcblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XHJcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XHJcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXHJcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XHJcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBUaW1lb3V0XHJcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xyXG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xyXG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdHN0YXRlID0gMTtcclxuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcclxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBleGNlcHRpb24gYXMgZXJyb3IgaWYgbm90IGRvbmVcclxuXHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcclxuXHRcdFx0XHRcdGRvbmUoIC0xLCBlICk7XHJcblxyXG5cdFx0XHRcdC8vIFNpbXBseSByZXRocm93IG90aGVyd2lzZVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR0aHJvdyBlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxyXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XHJcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXHJcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XHJcblxyXG5cdFx0XHQvLyBDYWxsZWQgb25jZVxyXG5cdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU3RhdGUgaXMgXCJkb25lXCIgbm93XHJcblx0XHRcdHN0YXRlID0gMjtcclxuXHJcblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXHJcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xyXG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxyXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxyXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXHJcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcclxuXHJcblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXHJcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XHJcblxyXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxyXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcclxuXHJcblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXHJcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xyXG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXHJcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XHJcblxyXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xyXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcclxuXHJcblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cclxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XHJcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xyXG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xyXG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcclxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcclxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcclxuXHJcblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXHJcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XHJcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xyXG5cclxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xyXG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XHJcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xyXG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xyXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcclxuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcclxuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XHJcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XHJcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxyXG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XHJcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcclxuXHJcblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3JcclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXHJcblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcclxuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XHJcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXHJcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDb21wbGV0ZVxyXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xyXG5cclxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcclxuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XHJcblxyXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGpxWEhSO1xyXG5cdH0sXHJcblxyXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xyXG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XHJcblx0fSxcclxuXHJcblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcclxuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XHJcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xyXG5cclxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXHJcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XHJcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xyXG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XHJcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXHJcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcclxuXHRcdFx0dXJsOiB1cmwsXHJcblx0XHRcdHR5cGU6IG1ldGhvZCxcclxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXHJcblx0XHRcdGRhdGE6IGRhdGEsXHJcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXHJcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcclxuXHR9O1xyXG59ICk7XHJcblxyXG5cclxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcclxuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcclxuXHRcdHVybDogdXJsLFxyXG5cclxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxyXG5cdFx0dHlwZTogXCJHRVRcIixcclxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxyXG5cdFx0YXN5bmM6IGZhbHNlLFxyXG5cdFx0Z2xvYmFsOiBmYWxzZSxcclxuXHRcdFwidGhyb3dzXCI6IHRydWVcclxuXHR9ICk7XHJcbn07XHJcblxyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xyXG5cdFx0dmFyIHdyYXA7XHJcblxyXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XHJcblxyXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxyXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcclxuXHJcblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XHJcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xyXG5cclxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XHJcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBlbGVtO1xyXG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fSxcclxuXHJcblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xyXG5cdFx0XHR9ICk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXHJcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XHJcblxyXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcclxuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XHJcblx0XHRcdH1cclxuXHRcdH0gKTtcclxuXHR9LFxyXG5cclxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcclxuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcclxuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xyXG5cdFx0fSApO1xyXG5cdH0sXHJcblxyXG5cdHVud3JhcDogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImJvZHlcIiApICkge1xyXG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSApLmVuZCgpO1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcbmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblx0cmV0dXJuICFqUXVlcnkuZXhwci5maWx0ZXJzLnZpc2libGUoIGVsZW0gKTtcclxufTtcclxualF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XHJcblxyXG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDw9IDEyLjEyXHJcblx0Ly8gT3BlcmEgcmVwb3J0cyBvZmZzZXRXaWR0aHMgYW5kIG9mZnNldEhlaWdodHMgbGVzcyB0aGFuIHplcm8gb24gc29tZSBlbGVtZW50c1xyXG5cdC8vIFVzZSBPUiBpbnN0ZWFkIG9mIEFORCBhcyB0aGUgZWxlbWVudCBpcyBub3QgdmlzaWJsZSBpZiBlaXRoZXIgaXMgdHJ1ZVxyXG5cdC8vIFNlZSB0aWNrZXRzICMxMDQwNiBhbmQgIzEzMTMyXHJcblx0cmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPiAwIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0ID4gMCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoID4gMDtcclxufTtcclxuXHJcblxyXG5cclxuXHJcbnZhciByMjAgPSAvJTIwL2csXHJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXHJcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxyXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcclxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XHJcblxyXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XHJcblx0dmFyIG5hbWU7XHJcblxyXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkge1xyXG5cclxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxyXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XHJcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XHJcblxyXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cclxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXHJcblx0XHRcdFx0YnVpbGRQYXJhbXMoXHJcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxyXG5cdFx0XHRcdFx0dixcclxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxyXG5cdFx0XHRcdFx0YWRkXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0fSApO1xyXG5cclxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xyXG5cclxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cclxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xyXG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XHJcblx0XHR9XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxyXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xyXG5cdH1cclxufVxyXG5cclxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2ZcclxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXHJcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcclxuXHR2YXIgcHJlZml4LFxyXG5cdFx0cyA9IFtdLFxyXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XHJcblxyXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHJldHVybiBpdHMgdmFsdWVcclxuXHRcdFx0dmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSA/IHZhbHVlKCkgOiAoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcclxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgKTtcclxuXHRcdH07XHJcblxyXG5cdC8vIFNldCB0cmFkaXRpb25hbCB0byB0cnVlIGZvciBqUXVlcnkgPD0gMS4zLjIgYmVoYXZpb3IuXHJcblx0aWYgKCB0cmFkaXRpb25hbCA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0dHJhZGl0aW9uYWwgPSBqUXVlcnkuYWpheFNldHRpbmdzICYmIGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7XHJcblx0fVxyXG5cclxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxyXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XHJcblxyXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXHJcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XHJcblx0XHR9ICk7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxyXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XHJcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXHJcblx0cmV0dXJuIHMuam9pbiggXCImXCIgKS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XHJcbn07XHJcblxyXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XHJcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xyXG5cdH0sXHJcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcclxuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xyXG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcclxuXHRcdH0gKVxyXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xyXG5cclxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXHJcblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcclxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXHJcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xyXG5cdFx0fSApXHJcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcclxuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xyXG5cclxuXHRcdFx0cmV0dXJuIHZhbCA9PSBudWxsID9cclxuXHRcdFx0XHRudWxsIDpcclxuXHRcdFx0XHRqUXVlcnkuaXNBcnJheSggdmFsICkgP1xyXG5cdFx0XHRcdFx0alF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xyXG5cdFx0XHRcdFx0fSApIDpcclxuXHRcdFx0XHRcdHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcclxuXHRcdH0gKS5nZXQoKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcblxyXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xyXG5cdHRyeSB7XHJcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xyXG5cdH0gY2F0Y2ggKCBlICkge31cclxufTtcclxuXHJcbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xyXG5cclxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXHJcblx0XHQwOiAyMDAsXHJcblxyXG5cdFx0Ly8gU3VwcG9ydDogSUU5XHJcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcclxuXHRcdDEyMjM6IDIwNFxyXG5cdH0sXHJcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcclxuXHJcbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcclxuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XHJcblxyXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xyXG5cclxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XHJcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xyXG5cdFx0XHRcdHZhciBpLFxyXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcclxuXHJcblx0XHRcdFx0eGhyLm9wZW4oXHJcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXHJcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcclxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXHJcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxyXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcclxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xyXG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcclxuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxyXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcclxuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcclxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxyXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxyXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxyXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XHJcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcclxuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XHJcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBDYWxsYmFja1xyXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XHJcblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOVxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XHJcblx0XHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcclxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTkgb25seVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXHJcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcclxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXHJcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxyXG5cdFx0XHRcdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xyXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xyXG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcclxuXHJcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5XHJcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcclxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXHJcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcclxuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXHJcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XHJcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcclxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcclxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xyXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xyXG5cclxuXHRcdFx0XHR0cnkge1xyXG5cclxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcclxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcclxuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcclxuXHJcblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxyXG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdFx0dGhyb3cgZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcblxyXG5cclxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcclxualF1ZXJ5LmFqYXhTZXR1cCgge1xyXG5cdGFjY2VwdHM6IHtcclxuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcclxuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxyXG5cdH0sXHJcblx0Y29udGVudHM6IHtcclxuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXHJcblx0fSxcclxuXHRjb252ZXJ0ZXJzOiB7XHJcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xyXG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xyXG5cdFx0XHRyZXR1cm4gdGV4dDtcclxuXHRcdH1cclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cclxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xyXG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xyXG5cdH1cclxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XHJcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xyXG5cdH1cclxufSApO1xyXG5cclxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XHJcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcclxuXHJcblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xyXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcclxuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xyXG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xyXG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxyXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxyXG5cdFx0XHRcdH0gKS5vbihcclxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxyXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xyXG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcclxuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcclxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcclxuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxufSApO1xyXG5cclxuXHJcblxyXG5cclxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxyXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XHJcblxyXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXHJcbmpRdWVyeS5hamF4U2V0dXAoIHtcclxuXHRqc29ucDogXCJjYWxsYmFja1wiLFxyXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XHJcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcclxuXHRcdHJldHVybiBjYWxsYmFjaztcclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xyXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcclxuXHJcblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxyXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cclxuXHRcdFx0XCJ1cmxcIiA6XHJcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcclxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXHJcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXHJcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXHJcblx0XHQpO1xyXG5cclxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XHJcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XHJcblxyXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxyXG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cclxuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxyXG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XHJcblxyXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxyXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcclxuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcclxuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xyXG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cclxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XHJcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcclxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcclxuXHJcblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXHJcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XHJcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcclxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcclxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XHJcblxyXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcclxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcclxuXHJcblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXHJcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xyXG5cclxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXHJcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2VcclxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcclxuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xyXG5cdFx0fSApO1xyXG5cclxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxyXG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XHJcblx0fVxyXG59ICk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcclxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxyXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxyXG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXHJcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XHJcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcclxuXHRcdHJldHVybiBudWxsO1xyXG5cdH1cclxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcclxuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcclxuXHRcdGNvbnRleHQgPSBmYWxzZTtcclxuXHR9XHJcblx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XHJcblxyXG5cdHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSxcclxuXHRcdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XHJcblxyXG5cdC8vIFNpbmdsZSB0YWdcclxuXHRpZiAoIHBhcnNlZCApIHtcclxuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xyXG5cdH1cclxuXHJcblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcclxuXHJcblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xyXG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcclxufTtcclxuXHJcblxyXG4vLyBLZWVwIGEgY29weSBvZiB0aGUgb2xkIGxvYWQgbWV0aG9kXHJcbnZhciBfbG9hZCA9IGpRdWVyeS5mbi5sb2FkO1xyXG5cclxuLyoqXHJcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcclxuICovXHJcbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcclxuXHRpZiAoIHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIgJiYgX2xvYWQgKSB7XHJcblx0XHRyZXR1cm4gX2xvYWQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xyXG5cdH1cclxuXHJcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcclxuXHRcdHNlbGYgPSB0aGlzLFxyXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XHJcblxyXG5cdGlmICggb2ZmID4gLTEgKSB7XHJcblx0XHRzZWxlY3RvciA9IGpRdWVyeS50cmltKCB1cmwuc2xpY2UoIG9mZiApICk7XHJcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xyXG5cdH1cclxuXHJcblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXHJcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XHJcblxyXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcclxuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xyXG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xyXG5cclxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXHJcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XHJcblx0XHR0eXBlID0gXCJQT1NUXCI7XHJcblx0fVxyXG5cclxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxyXG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xyXG5cdFx0alF1ZXJ5LmFqYXgoIHtcclxuXHRcdFx0dXJsOiB1cmwsXHJcblxyXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxyXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2VcclxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXHJcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcclxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxyXG5cdFx0XHRkYXRhOiBwYXJhbXNcclxuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xyXG5cclxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXHJcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xyXG5cclxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XHJcblxyXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxyXG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xyXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxyXG5cclxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxyXG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xyXG5cclxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxyXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxyXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxyXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XHJcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcclxuXHRcdFx0fSApO1xyXG5cdFx0fSApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xyXG5qUXVlcnkuZWFjaCggW1xyXG5cdFwiYWpheFN0YXJ0XCIsXHJcblx0XCJhamF4U3RvcFwiLFxyXG5cdFwiYWpheENvbXBsZXRlXCIsXHJcblx0XCJhamF4RXJyb3JcIixcclxuXHRcImFqYXhTdWNjZXNzXCIsXHJcblx0XCJhamF4U2VuZFwiXHJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xyXG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XHJcblx0fTtcclxufSApO1xyXG5cclxuXHJcblxyXG5cclxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xyXG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xyXG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XHJcblx0fSApLmxlbmd0aDtcclxufTtcclxuXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xyXG5cdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/IGVsZW0gOiBlbGVtLm5vZGVUeXBlID09PSA5ICYmIGVsZW0uZGVmYXVsdFZpZXc7XHJcbn1cclxuXHJcbmpRdWVyeS5vZmZzZXQgPSB7XHJcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcclxuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXHJcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXHJcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcclxuXHRcdFx0cHJvcHMgPSB7fTtcclxuXHJcblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXHJcblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xyXG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XHJcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XHJcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcclxuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxyXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XHJcblxyXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxyXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcclxuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XHJcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcclxuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcclxuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcclxuXHJcblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxyXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XHJcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XHJcblx0XHR9XHJcblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xyXG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xyXG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxualF1ZXJ5LmZuLmV4dGVuZCgge1xyXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XHJcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xyXG5cdFx0XHRcdHRoaXMgOlxyXG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XHJcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xyXG5cdFx0XHRcdH0gKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZG9jRWxlbSwgd2luLFxyXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxyXG5cdFx0XHRib3ggPSB7IHRvcDogMCwgbGVmdDogMCB9LFxyXG5cdFx0XHRkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDtcclxuXHJcblx0XHRpZiAoICFkb2MgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcclxuXHJcblx0XHQvLyBNYWtlIHN1cmUgaXQncyBub3QgYSBkaXNjb25uZWN0ZWQgRE9NIG5vZGVcclxuXHRcdGlmICggIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkge1xyXG5cdFx0XHRyZXR1cm4gYm94O1xyXG5cdFx0fVxyXG5cclxuXHRcdGJveCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dG9wOiBib3gudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXHJcblx0XHRcdGxlZnQ6IGJveC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XHJcblx0XHR9O1xyXG5cdH0sXHJcblxyXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcclxuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcclxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcclxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcclxuXHJcblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxyXG5cdFx0Ly8gYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XHJcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XHJcblxyXG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcclxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcclxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcclxuXHJcblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcclxuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcclxuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcclxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xyXG5cdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcclxuXHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxyXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxyXG5cdFx0fTtcclxuXHR9LFxyXG5cclxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcclxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXHJcblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XHJcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxyXG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcclxuXHQvL1xyXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xyXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxyXG5cdC8vXHJcblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcclxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xyXG5cclxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcclxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcclxuXHRcdH0gKTtcclxuXHR9XHJcbn0gKTtcclxuXHJcbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xyXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XHJcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcclxuXHJcblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XHJcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XHJcblx0XHRcdHZhciB3aW4gPSBnZXRXaW5kb3coIGVsZW0gKTtcclxuXHJcblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICggd2luICkge1xyXG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcclxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXHJcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcclxuXHRcdFx0fVxyXG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcclxuXHR9O1xyXG59ICk7XHJcblxyXG4vLyBTdXBwb3J0OiBTYWZhcmk8Ny04KywgQ2hyb21lPDM3LTQ0K1xyXG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxyXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcclxuLy8gQmxpbmsgYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MjgwXHJcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XHJcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXHJcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xyXG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXHJcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XHJcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XHJcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcclxuXHJcblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XHJcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cclxuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XHJcblx0XHRcdFx0XHRjb21wdXRlZDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdCk7XHJcbn0gKTtcclxuXHJcblxyXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcclxualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xyXG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcclxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xyXG5cclxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxyXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XHJcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXHJcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xyXG5cclxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xyXG5cdFx0XHRcdHZhciBkb2M7XHJcblxyXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gQXMgb2YgNS84LzIwMTIgdGhpcyB3aWxsIHlpZWxkIGluY29ycmVjdCByZXN1bHRzIGZvciBNb2JpbGUgU2FmYXJpLCBidXQgdGhlcmVcclxuXHRcdFx0XHRcdC8vIGlzbid0IGEgd2hvbGUgbG90IHdlIGNhbiBkby4gU2VlIHB1bGwgcmVxdWVzdCBhdCB0aGlzIFVSTCBmb3IgZGlzY3Vzc2lvbjpcclxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNzY0XHJcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XHJcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xyXG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxyXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XHJcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXHJcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxyXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcclxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xyXG5cclxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcclxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxyXG5cclxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcclxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XHJcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlLCBudWxsICk7XHJcblx0XHR9O1xyXG5cdH0gKTtcclxufSApO1xyXG5cclxuXHJcbmpRdWVyeS5mbi5leHRlbmQoIHtcclxuXHJcblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcclxuXHR9LFxyXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcclxuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XHJcblx0fSxcclxuXHJcblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcclxuXHR9LFxyXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xyXG5cclxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cclxuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XHJcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xyXG5cdH0sXHJcblx0c2l6ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5sZW5ndGg7XHJcblx0fVxyXG59ICk7XHJcblxyXG5qUXVlcnkuZm4uYW5kU2VsZiA9IGpRdWVyeS5mbi5hZGRCYWNrO1xyXG5cclxuXHJcblxyXG5cclxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXHJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcclxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XHJcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcclxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXHJcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xyXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXHJcblxyXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxyXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXHJcbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cclxuXHJcbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XHJcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4galF1ZXJ5O1xyXG5cdH0gKTtcclxufVxyXG5cclxuXHJcblxyXG52YXJcclxuXHJcblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXHJcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXHJcblxyXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXHJcblx0XyQgPSB3aW5kb3cuJDtcclxuXHJcbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XHJcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xyXG5cdFx0d2luZG93LiQgPSBfJDtcclxuXHR9XHJcblxyXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XHJcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBqUXVlcnk7XHJcbn07XHJcblxyXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxyXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXHJcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcclxuaWYgKCAhbm9HbG9iYWwgKSB7XHJcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xyXG59XHJcblxyXG5yZXR1cm4galF1ZXJ5O1xyXG59KSk7XHJcbi8qIVxyXG4gKiBCb290c3RyYXAgdjMuMy43IChodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbSlcclxuICogQ29weXJpZ2h0IDIwMTEtMjAxNyBUd2l0dGVyLCBJbmMuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAqL1xyXG5cclxuLyohXHJcbiAqIEdlbmVyYXRlZCB1c2luZyB0aGUgQm9vdHN0cmFwIEN1c3RvbWl6ZXIgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS9kb2NzLzMuMy9jdXN0b21pemUvP2lkPWE1MzdmOTAyMGMzNDZkYzJkNTViNzIyOTk4MWFlMTIwKVxyXG4gKiBDb25maWcgc2F2ZWQgdG8gY29uZmlnLmpzb24gYW5kIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2E1MzdmOTAyMGMzNDZkYzJkNTViNzIyOTk4MWFlMTIwXHJcbiAqL1xyXG5pZiAodHlwZW9mIGpRdWVyeSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnknKVxyXG59XHJcbitmdW5jdGlvbiAoJCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICB2YXIgdmVyc2lvbiA9ICQuZm4uanF1ZXJ5LnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKVxyXG4gIGlmICgodmVyc2lvblswXSA8IDIgJiYgdmVyc2lvblsxXSA8IDkpIHx8ICh2ZXJzaW9uWzBdID09IDEgJiYgdmVyc2lvblsxXSA9PSA5ICYmIHZlcnNpb25bMl0gPCAxKSB8fCAodmVyc2lvblswXSA+IDMpKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkgdmVyc2lvbiAxLjkuMSBvciBoaWdoZXIsIGJ1dCBsb3dlciB0aGFuIHZlcnNpb24gNCcpXHJcbiAgfVxyXG59KGpRdWVyeSk7XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQm9vdHN0cmFwOiBhbGVydC5qcyB2My4zLjdcclxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYWxlcnRzXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cclxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG5cclxuK2Z1bmN0aW9uICgkKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAvLyBBTEVSVCBDTEFTUyBERUZJTklUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICB2YXIgZGlzbWlzcyA9ICdbZGF0YS1kaXNtaXNzPVwiYWxlcnRcIl0nXHJcbiAgdmFyIEFsZXJ0ICAgPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICQoZWwpLm9uKCdjbGljaycsIGRpc21pc3MsIHRoaXMuY2xvc2UpXHJcbiAgfVxyXG5cclxuICBBbGVydC5WRVJTSU9OID0gJzMuMy43J1xyXG5cclxuICBBbGVydC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXHJcblxyXG4gIEFsZXJ0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICB2YXIgJHRoaXMgICAgPSAkKHRoaXMpXHJcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpXHJcblxyXG4gICAgaWYgKCFzZWxlY3Rvcikge1xyXG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxyXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XHJcbiAgICB9XHJcblxyXG4gICAgdmFyICRwYXJlbnQgPSAkKHNlbGVjdG9yID09PSAnIycgPyBbXSA6IHNlbGVjdG9yKVxyXG5cclxuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICBpZiAoISRwYXJlbnQubGVuZ3RoKSB7XHJcbiAgICAgICRwYXJlbnQgPSAkdGhpcy5jbG9zZXN0KCcuYWxlcnQnKVxyXG4gICAgfVxyXG5cclxuICAgICRwYXJlbnQudHJpZ2dlcihlID0gJC5FdmVudCgnY2xvc2UuYnMuYWxlcnQnKSlcclxuXHJcbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXHJcblxyXG4gICAgJHBhcmVudC5yZW1vdmVDbGFzcygnaW4nKVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoKSB7XHJcbiAgICAgIC8vIGRldGFjaCBmcm9tIHBhcmVudCwgZmlyZSBldmVudCB0aGVuIGNsZWFuIHVwIGRhdGFcclxuICAgICAgJHBhcmVudC5kZXRhY2goKS50cmlnZ2VyKCdjbG9zZWQuYnMuYWxlcnQnKS5yZW1vdmUoKVxyXG4gICAgfVxyXG5cclxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmICRwYXJlbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XHJcbiAgICAgICRwYXJlbnRcclxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCByZW1vdmVFbGVtZW50KVxyXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChBbGVydC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XHJcbiAgICAgIHJlbW92ZUVsZW1lbnQoKVxyXG4gIH1cclxuXHJcblxyXG4gIC8vIEFMRVJUIFBMVUdJTiBERUZJTklUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xyXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcclxuICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMuYWxlcnQnKVxyXG5cclxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5hbGVydCcsIChkYXRhID0gbmV3IEFsZXJ0KHRoaXMpKSlcclxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXS5jYWxsKCR0aGlzKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHZhciBvbGQgPSAkLmZuLmFsZXJ0XHJcblxyXG4gICQuZm4uYWxlcnQgICAgICAgICAgICAgPSBQbHVnaW5cclxuICAkLmZuLmFsZXJ0LkNvbnN0cnVjdG9yID0gQWxlcnRcclxuXHJcblxyXG4gIC8vIEFMRVJUIE5PIENPTkZMSUNUXHJcbiAgLy8gPT09PT09PT09PT09PT09PT1cclxuXHJcbiAgJC5mbi5hbGVydC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJC5mbi5hbGVydCA9IG9sZFxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG5cclxuICAvLyBBTEVSVCBEQVRBLUFQSVxyXG4gIC8vID09PT09PT09PT09PT09XHJcblxyXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5hbGVydC5kYXRhLWFwaScsIGRpc21pc3MsIEFsZXJ0LnByb3RvdHlwZS5jbG9zZSlcclxuXHJcbn0oalF1ZXJ5KTtcclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBCb290c3RyYXA6IGJ1dHRvbi5qcyB2My4zLjdcclxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYnV0dG9uc1xyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuXHJcbitmdW5jdGlvbiAoJCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgLy8gQlVUVE9OIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIHZhciBCdXR0b24gPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgdGhpcy4kZWxlbWVudCAgPSAkKGVsZW1lbnQpXHJcbiAgICB0aGlzLm9wdGlvbnMgICA9ICQuZXh0ZW5kKHt9LCBCdXR0b24uREVGQVVMVFMsIG9wdGlvbnMpXHJcbiAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlXHJcbiAgfVxyXG5cclxuICBCdXR0b24uVkVSU0lPTiAgPSAnMy4zLjcnXHJcblxyXG4gIEJ1dHRvbi5ERUZBVUxUUyA9IHtcclxuICAgIGxvYWRpbmdUZXh0OiAnbG9hZGluZy4uLidcclxuICB9XHJcblxyXG4gIEJ1dHRvbi5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgIHZhciBkICAgID0gJ2Rpc2FibGVkJ1xyXG4gICAgdmFyICRlbCAgPSB0aGlzLiRlbGVtZW50XHJcbiAgICB2YXIgdmFsICA9ICRlbC5pcygnaW5wdXQnKSA/ICd2YWwnIDogJ2h0bWwnXHJcbiAgICB2YXIgZGF0YSA9ICRlbC5kYXRhKClcclxuXHJcbiAgICBzdGF0ZSArPSAnVGV4dCdcclxuXHJcbiAgICBpZiAoZGF0YS5yZXNldFRleHQgPT0gbnVsbCkgJGVsLmRhdGEoJ3Jlc2V0VGV4dCcsICRlbFt2YWxdKCkpXHJcblxyXG4gICAgLy8gcHVzaCB0byBldmVudCBsb29wIHRvIGFsbG93IGZvcm1zIHRvIHN1Ym1pdFxyXG4gICAgc2V0VGltZW91dCgkLnByb3h5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgJGVsW3ZhbF0oZGF0YVtzdGF0ZV0gPT0gbnVsbCA/IHRoaXMub3B0aW9uc1tzdGF0ZV0gOiBkYXRhW3N0YXRlXSlcclxuXHJcbiAgICAgIGlmIChzdGF0ZSA9PSAnbG9hZGluZ1RleHQnKSB7XHJcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlXHJcbiAgICAgICAgJGVsLmFkZENsYXNzKGQpLmF0dHIoZCwgZCkucHJvcChkLCB0cnVlKVxyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNMb2FkaW5nKSB7XHJcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZVxyXG4gICAgICAgICRlbC5yZW1vdmVDbGFzcyhkKS5yZW1vdmVBdHRyKGQpLnByb3AoZCwgZmFsc2UpXHJcbiAgICAgIH1cclxuICAgIH0sIHRoaXMpLCAwKVxyXG4gIH1cclxuXHJcbiAgQnV0dG9uLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgY2hhbmdlZCA9IHRydWVcclxuICAgIHZhciAkcGFyZW50ID0gdGhpcy4kZWxlbWVudC5jbG9zZXN0KCdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdJylcclxuXHJcbiAgICBpZiAoJHBhcmVudC5sZW5ndGgpIHtcclxuICAgICAgdmFyICRpbnB1dCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQnKVxyXG4gICAgICBpZiAoJGlucHV0LnByb3AoJ3R5cGUnKSA9PSAncmFkaW8nKSB7XHJcbiAgICAgICAgaWYgKCRpbnB1dC5wcm9wKCdjaGVja2VkJykpIGNoYW5nZWQgPSBmYWxzZVxyXG4gICAgICAgICRwYXJlbnQuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxyXG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2FjdGl2ZScpXHJcbiAgICAgIH0gZWxzZSBpZiAoJGlucHV0LnByb3AoJ3R5cGUnKSA9PSAnY2hlY2tib3gnKSB7XHJcbiAgICAgICAgaWYgKCgkaW5wdXQucHJvcCgnY2hlY2tlZCcpKSAhPT0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpIGNoYW5nZWQgPSBmYWxzZVxyXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXHJcbiAgICAgIH1cclxuICAgICAgJGlucHV0LnByb3AoJ2NoZWNrZWQnLCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSlcclxuICAgICAgaWYgKGNoYW5nZWQpICRpbnB1dC50cmlnZ2VyKCdjaGFuZ2UnKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLXByZXNzZWQnLCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpXHJcbiAgICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gQlVUVE9OIFBMVUdJTiBERUZJTklUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcclxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcclxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5idXR0b24nKVxyXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXHJcblxyXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmJ1dHRvbicsIChkYXRhID0gbmV3IEJ1dHRvbih0aGlzLCBvcHRpb25zKSkpXHJcblxyXG4gICAgICBpZiAob3B0aW9uID09ICd0b2dnbGUnKSBkYXRhLnRvZ2dsZSgpXHJcbiAgICAgIGVsc2UgaWYgKG9wdGlvbikgZGF0YS5zZXRTdGF0ZShvcHRpb24pXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgdmFyIG9sZCA9ICQuZm4uYnV0dG9uXHJcblxyXG4gICQuZm4uYnV0dG9uICAgICAgICAgICAgID0gUGx1Z2luXHJcbiAgJC5mbi5idXR0b24uQ29uc3RydWN0b3IgPSBCdXR0b25cclxuXHJcblxyXG4gIC8vIEJVVFRPTiBOTyBDT05GTElDVFxyXG4gIC8vID09PT09PT09PT09PT09PT09PVxyXG5cclxuICAkLmZuLmJ1dHRvbi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJC5mbi5idXR0b24gPSBvbGRcclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gQlVUVE9OIERBVEEtQVBJXHJcbiAgLy8gPT09PT09PT09PT09PT09XHJcblxyXG4gICQoZG9jdW1lbnQpXHJcbiAgICAub24oJ2NsaWNrLmJzLmJ1dHRvbi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgdmFyICRidG4gPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuYnRuJylcclxuICAgICAgUGx1Z2luLmNhbGwoJGJ0biwgJ3RvZ2dsZScpXHJcbiAgICAgIGlmICghKCQoZS50YXJnZXQpLmlzKCdpbnB1dFt0eXBlPVwicmFkaW9cIl0sIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXScpKSkge1xyXG4gICAgICAgIC8vIFByZXZlbnQgZG91YmxlIGNsaWNrIG9uIHJhZGlvcywgYW5kIHRoZSBkb3VibGUgc2VsZWN0aW9ucyAoc28gY2FuY2VsbGF0aW9uKSBvbiBjaGVja2JveGVzXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgLy8gVGhlIHRhcmdldCBjb21wb25lbnQgc3RpbGwgcmVjZWl2ZSB0aGUgZm9jdXNcclxuICAgICAgICBpZiAoJGJ0bi5pcygnaW5wdXQsYnV0dG9uJykpICRidG4udHJpZ2dlcignZm9jdXMnKVxyXG4gICAgICAgIGVsc2UgJGJ0bi5maW5kKCdpbnB1dDp2aXNpYmxlLGJ1dHRvbjp2aXNpYmxlJykuZmlyc3QoKS50cmlnZ2VyKCdmb2N1cycpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICAub24oJ2ZvY3VzLmJzLmJ1dHRvbi5kYXRhLWFwaSBibHVyLmJzLmJ1dHRvbi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgJChlLnRhcmdldCkuY2xvc2VzdCgnLmJ0bicpLnRvZ2dsZUNsYXNzKCdmb2N1cycsIC9eZm9jdXMoaW4pPyQvLnRlc3QoZS50eXBlKSlcclxuICAgIH0pXHJcblxyXG59KGpRdWVyeSk7XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQm9vdHN0cmFwOiBjYXJvdXNlbC5qcyB2My4zLjdcclxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jY2Fyb3VzZWxcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxyXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcblxyXG4rZnVuY3Rpb24gKCQpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIC8vIENBUk9VU0VMIENMQVNTIERFRklOSVRJT05cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIHZhciBDYXJvdXNlbCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLiRlbGVtZW50ICAgID0gJChlbGVtZW50KVxyXG4gICAgdGhpcy4kaW5kaWNhdG9ycyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmNhcm91c2VsLWluZGljYXRvcnMnKVxyXG4gICAgdGhpcy5vcHRpb25zICAgICA9IG9wdGlvbnNcclxuICAgIHRoaXMucGF1c2VkICAgICAgPSBudWxsXHJcbiAgICB0aGlzLnNsaWRpbmcgICAgID0gbnVsbFxyXG4gICAgdGhpcy5pbnRlcnZhbCAgICA9IG51bGxcclxuICAgIHRoaXMuJGFjdGl2ZSAgICAgPSBudWxsXHJcbiAgICB0aGlzLiRpdGVtcyAgICAgID0gbnVsbFxyXG5cclxuICAgIHRoaXMub3B0aW9ucy5rZXlib2FyZCAmJiB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLmtleWRvd24sIHRoaXMpKVxyXG5cclxuICAgIHRoaXMub3B0aW9ucy5wYXVzZSA9PSAnaG92ZXInICYmICEoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSAmJiB0aGlzLiRlbGVtZW50XHJcbiAgICAgIC5vbignbW91c2VlbnRlci5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5wYXVzZSwgdGhpcykpXHJcbiAgICAgIC5vbignbW91c2VsZWF2ZS5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5jeWNsZSwgdGhpcykpXHJcbiAgfVxyXG5cclxuICBDYXJvdXNlbC5WRVJTSU9OICA9ICczLjMuNydcclxuXHJcbiAgQ2Fyb3VzZWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDYwMFxyXG5cclxuICBDYXJvdXNlbC5ERUZBVUxUUyA9IHtcclxuICAgIGludGVydmFsOiA1MDAwLFxyXG4gICAgcGF1c2U6ICdob3ZlcicsXHJcbiAgICB3cmFwOiB0cnVlLFxyXG4gICAga2V5Ym9hcmQ6IHRydWVcclxuICB9XHJcblxyXG4gIENhcm91c2VsLnByb3RvdHlwZS5rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm5cclxuICAgIHN3aXRjaCAoZS53aGljaCkge1xyXG4gICAgICBjYXNlIDM3OiB0aGlzLnByZXYoKTsgYnJlYWtcclxuICAgICAgY2FzZSAzOTogdGhpcy5uZXh0KCk7IGJyZWFrXHJcbiAgICAgIGRlZmF1bHQ6IHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gIH1cclxuXHJcbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmN5Y2xlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIGUgfHwgKHRoaXMucGF1c2VkID0gZmFsc2UpXHJcblxyXG4gICAgdGhpcy5pbnRlcnZhbCAmJiBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpXHJcblxyXG4gICAgdGhpcy5vcHRpb25zLmludGVydmFsXHJcbiAgICAgICYmICF0aGlzLnBhdXNlZFxyXG4gICAgICAmJiAodGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCQucHJveHkodGhpcy5uZXh0LCB0aGlzKSwgdGhpcy5vcHRpb25zLmludGVydmFsKSlcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmdldEl0ZW1JbmRleCA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICB0aGlzLiRpdGVtcyA9IGl0ZW0ucGFyZW50KCkuY2hpbGRyZW4oJy5pdGVtJylcclxuICAgIHJldHVybiB0aGlzLiRpdGVtcy5pbmRleChpdGVtIHx8IHRoaXMuJGFjdGl2ZSlcclxuICB9XHJcblxyXG4gIENhcm91c2VsLnByb3RvdHlwZS5nZXRJdGVtRm9yRGlyZWN0aW9uID0gZnVuY3Rpb24gKGRpcmVjdGlvbiwgYWN0aXZlKSB7XHJcbiAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleChhY3RpdmUpXHJcbiAgICB2YXIgd2lsbFdyYXAgPSAoZGlyZWN0aW9uID09ICdwcmV2JyAmJiBhY3RpdmVJbmRleCA9PT0gMClcclxuICAgICAgICAgICAgICAgIHx8IChkaXJlY3Rpb24gPT0gJ25leHQnICYmIGFjdGl2ZUluZGV4ID09ICh0aGlzLiRpdGVtcy5sZW5ndGggLSAxKSlcclxuICAgIGlmICh3aWxsV3JhcCAmJiAhdGhpcy5vcHRpb25zLndyYXApIHJldHVybiBhY3RpdmVcclxuICAgIHZhciBkZWx0YSA9IGRpcmVjdGlvbiA9PSAncHJldicgPyAtMSA6IDFcclxuICAgIHZhciBpdGVtSW5kZXggPSAoYWN0aXZlSW5kZXggKyBkZWx0YSkgJSB0aGlzLiRpdGVtcy5sZW5ndGhcclxuICAgIHJldHVybiB0aGlzLiRpdGVtcy5lcShpdGVtSW5kZXgpXHJcbiAgfVxyXG5cclxuICBDYXJvdXNlbC5wcm90b3R5cGUudG8gPSBmdW5jdGlvbiAocG9zKSB7XHJcbiAgICB2YXIgdGhhdCAgICAgICAgPSB0aGlzXHJcbiAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleCh0aGlzLiRhY3RpdmUgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pdGVtLmFjdGl2ZScpKVxyXG5cclxuICAgIGlmIChwb3MgPiAodGhpcy4kaXRlbXMubGVuZ3RoIC0gMSkgfHwgcG9zIDwgMCkgcmV0dXJuXHJcblxyXG4gICAgaWYgKHRoaXMuc2xpZGluZykgICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnQub25lKCdzbGlkLmJzLmNhcm91c2VsJywgZnVuY3Rpb24gKCkgeyB0aGF0LnRvKHBvcykgfSkgLy8geWVzLCBcInNsaWRcIlxyXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09IHBvcykgcmV0dXJuIHRoaXMucGF1c2UoKS5jeWNsZSgpXHJcblxyXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUocG9zID4gYWN0aXZlSW5kZXggPyAnbmV4dCcgOiAncHJldicsIHRoaXMuJGl0ZW1zLmVxKHBvcykpXHJcbiAgfVxyXG5cclxuICBDYXJvdXNlbC5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgZSB8fCAodGhpcy5wYXVzZWQgPSB0cnVlKVxyXG5cclxuICAgIGlmICh0aGlzLiRlbGVtZW50LmZpbmQoJy5uZXh0LCAucHJldicpLmxlbmd0aCAmJiAkLnN1cHBvcnQudHJhbnNpdGlvbikge1xyXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKVxyXG4gICAgICB0aGlzLmN5Y2xlKHRydWUpXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5pbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbClcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcbiAgQ2Fyb3VzZWwucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5zbGlkaW5nKSByZXR1cm5cclxuICAgIHJldHVybiB0aGlzLnNsaWRlKCduZXh0JylcclxuICB9XHJcblxyXG4gIENhcm91c2VsLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuXHJcbiAgICByZXR1cm4gdGhpcy5zbGlkZSgncHJldicpXHJcbiAgfVxyXG5cclxuICBDYXJvdXNlbC5wcm90b3R5cGUuc2xpZGUgPSBmdW5jdGlvbiAodHlwZSwgbmV4dCkge1xyXG4gICAgdmFyICRhY3RpdmUgICA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLml0ZW0uYWN0aXZlJylcclxuICAgIHZhciAkbmV4dCAgICAgPSBuZXh0IHx8IHRoaXMuZ2V0SXRlbUZvckRpcmVjdGlvbih0eXBlLCAkYWN0aXZlKVxyXG4gICAgdmFyIGlzQ3ljbGluZyA9IHRoaXMuaW50ZXJ2YWxcclxuICAgIHZhciBkaXJlY3Rpb24gPSB0eXBlID09ICduZXh0JyA/ICdsZWZ0JyA6ICdyaWdodCdcclxuICAgIHZhciB0aGF0ICAgICAgPSB0aGlzXHJcblxyXG4gICAgaWYgKCRuZXh0Lmhhc0NsYXNzKCdhY3RpdmUnKSkgcmV0dXJuICh0aGlzLnNsaWRpbmcgPSBmYWxzZSlcclxuXHJcbiAgICB2YXIgcmVsYXRlZFRhcmdldCA9ICRuZXh0WzBdXHJcbiAgICB2YXIgc2xpZGVFdmVudCA9ICQuRXZlbnQoJ3NsaWRlLmJzLmNhcm91c2VsJywge1xyXG4gICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LFxyXG4gICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxyXG4gICAgfSlcclxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzbGlkZUV2ZW50KVxyXG4gICAgaWYgKHNsaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxyXG5cclxuICAgIHRoaXMuc2xpZGluZyA9IHRydWVcclxuXHJcbiAgICBpc0N5Y2xpbmcgJiYgdGhpcy5wYXVzZSgpXHJcblxyXG4gICAgaWYgKHRoaXMuJGluZGljYXRvcnMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMuJGluZGljYXRvcnMuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxyXG4gICAgICB2YXIgJG5leHRJbmRpY2F0b3IgPSAkKHRoaXMuJGluZGljYXRvcnMuY2hpbGRyZW4oKVt0aGlzLmdldEl0ZW1JbmRleCgkbmV4dCldKVxyXG4gICAgICAkbmV4dEluZGljYXRvciAmJiAkbmV4dEluZGljYXRvci5hZGRDbGFzcygnYWN0aXZlJylcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc2xpZEV2ZW50ID0gJC5FdmVudCgnc2xpZC5icy5jYXJvdXNlbCcsIHsgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCwgZGlyZWN0aW9uOiBkaXJlY3Rpb24gfSkgLy8geWVzLCBcInNsaWRcIlxyXG4gICAgaWYgKCQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ3NsaWRlJykpIHtcclxuICAgICAgJG5leHQuYWRkQ2xhc3ModHlwZSlcclxuICAgICAgJG5leHRbMF0ub2Zmc2V0V2lkdGggLy8gZm9yY2UgcmVmbG93XHJcbiAgICAgICRhY3RpdmUuYWRkQ2xhc3MoZGlyZWN0aW9uKVxyXG4gICAgICAkbmV4dC5hZGRDbGFzcyhkaXJlY3Rpb24pXHJcbiAgICAgICRhY3RpdmVcclxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAkbmV4dC5yZW1vdmVDbGFzcyhbdHlwZSwgZGlyZWN0aW9uXS5qb2luKCcgJykpLmFkZENsYXNzKCdhY3RpdmUnKVxyXG4gICAgICAgICAgJGFjdGl2ZS5yZW1vdmVDbGFzcyhbJ2FjdGl2ZScsIGRpcmVjdGlvbl0uam9pbignICcpKVxyXG4gICAgICAgICAgdGhhdC5zbGlkaW5nID0gZmFsc2VcclxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoc2xpZEV2ZW50KVxyXG4gICAgICAgICAgfSwgMClcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDYXJvdXNlbC5UUkFOU0lUSU9OX0RVUkFUSU9OKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJGFjdGl2ZS5yZW1vdmVDbGFzcygnYWN0aXZlJylcclxuICAgICAgJG5leHQuYWRkQ2xhc3MoJ2FjdGl2ZScpXHJcbiAgICAgIHRoaXMuc2xpZGluZyA9IGZhbHNlXHJcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzbGlkRXZlbnQpXHJcbiAgICB9XHJcblxyXG4gICAgaXNDeWNsaW5nICYmIHRoaXMuY3ljbGUoKVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gQ0FST1VTRUwgUExVR0lOIERFRklOSVRJT05cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXHJcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuY2Fyb3VzZWwnKVxyXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDYXJvdXNlbC5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcclxuICAgICAgdmFyIGFjdGlvbiAgPSB0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnID8gb3B0aW9uIDogb3B0aW9ucy5zbGlkZVxyXG5cclxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jYXJvdXNlbCcsIChkYXRhID0gbmV3IENhcm91c2VsKHRoaXMsIG9wdGlvbnMpKSlcclxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ251bWJlcicpIGRhdGEudG8ob3B0aW9uKVxyXG4gICAgICBlbHNlIGlmIChhY3Rpb24pIGRhdGFbYWN0aW9uXSgpXHJcbiAgICAgIGVsc2UgaWYgKG9wdGlvbnMuaW50ZXJ2YWwpIGRhdGEucGF1c2UoKS5jeWNsZSgpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgdmFyIG9sZCA9ICQuZm4uY2Fyb3VzZWxcclxuXHJcbiAgJC5mbi5jYXJvdXNlbCAgICAgICAgICAgICA9IFBsdWdpblxyXG4gICQuZm4uY2Fyb3VzZWwuQ29uc3RydWN0b3IgPSBDYXJvdXNlbFxyXG5cclxuXHJcbiAgLy8gQ0FST1VTRUwgTk8gQ09ORkxJQ1RcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAkLmZuLmNhcm91c2VsLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAkLmZuLmNhcm91c2VsID0gb2xkXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcblxyXG4gIC8vIENBUk9VU0VMIERBVEEtQVBJXHJcbiAgLy8gPT09PT09PT09PT09PT09PT1cclxuXHJcbiAgdmFyIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICB2YXIgaHJlZlxyXG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXHJcbiAgICB2YXIgJHRhcmdldCA9ICQoJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCAoaHJlZiA9ICR0aGlzLmF0dHIoJ2hyZWYnKSkgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykpIC8vIHN0cmlwIGZvciBpZTdcclxuICAgIGlmICghJHRhcmdldC5oYXNDbGFzcygnY2Fyb3VzZWwnKSkgcmV0dXJuXHJcbiAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkdGFyZ2V0LmRhdGEoKSwgJHRoaXMuZGF0YSgpKVxyXG4gICAgdmFyIHNsaWRlSW5kZXggPSAkdGhpcy5hdHRyKCdkYXRhLXNsaWRlLXRvJylcclxuICAgIGlmIChzbGlkZUluZGV4KSBvcHRpb25zLmludGVydmFsID0gZmFsc2VcclxuXHJcbiAgICBQbHVnaW4uY2FsbCgkdGFyZ2V0LCBvcHRpb25zKVxyXG5cclxuICAgIGlmIChzbGlkZUluZGV4KSB7XHJcbiAgICAgICR0YXJnZXQuZGF0YSgnYnMuY2Fyb3VzZWwnKS50byhzbGlkZUluZGV4KVxyXG4gICAgfVxyXG5cclxuICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gIH1cclxuXHJcbiAgJChkb2N1bWVudClcclxuICAgIC5vbignY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGknLCAnW2RhdGEtc2xpZGVdJywgY2xpY2tIYW5kbGVyKVxyXG4gICAgLm9uKCdjbGljay5icy5jYXJvdXNlbC5kYXRhLWFwaScsICdbZGF0YS1zbGlkZS10b10nLCBjbGlja0hhbmRsZXIpXHJcblxyXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICQoJ1tkYXRhLXJpZGU9XCJjYXJvdXNlbFwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgJGNhcm91c2VsID0gJCh0aGlzKVxyXG4gICAgICBQbHVnaW4uY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpXHJcbiAgICB9KVxyXG4gIH0pXHJcblxyXG59KGpRdWVyeSk7XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQm9vdHN0cmFwOiBkcm9wZG93bi5qcyB2My4zLjdcclxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jZHJvcGRvd25zXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cclxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG5cclxuK2Z1bmN0aW9uICgkKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAvLyBEUk9QRE9XTiBDTEFTUyBERUZJTklUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICB2YXIgYmFja2Ryb3AgPSAnLmRyb3Bkb3duLWJhY2tkcm9wJ1xyXG4gIHZhciB0b2dnbGUgICA9ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXSdcclxuICB2YXIgRHJvcGRvd24gPSBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgJChlbGVtZW50KS5vbignY2xpY2suYnMuZHJvcGRvd24nLCB0aGlzLnRvZ2dsZSlcclxuICB9XHJcblxyXG4gIERyb3Bkb3duLlZFUlNJT04gPSAnMy4zLjcnXHJcblxyXG4gIGZ1bmN0aW9uIGdldFBhcmVudCgkdGhpcykge1xyXG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKVxyXG5cclxuICAgIGlmICghc2VsZWN0b3IpIHtcclxuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJylcclxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiAvI1tBLVphLXpdLy50ZXN0KHNlbGVjdG9yKSAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xyXG4gICAgfVxyXG5cclxuICAgIHZhciAkcGFyZW50ID0gc2VsZWN0b3IgJiYgJChzZWxlY3RvcilcclxuXHJcbiAgICByZXR1cm4gJHBhcmVudCAmJiAkcGFyZW50Lmxlbmd0aCA/ICRwYXJlbnQgOiAkdGhpcy5wYXJlbnQoKVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2xlYXJNZW51cyhlKSB7XHJcbiAgICBpZiAoZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm5cclxuICAgICQoYmFja2Ryb3ApLnJlbW92ZSgpXHJcbiAgICAkKHRvZ2dsZSkuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkdGhpcyAgICAgICAgID0gJCh0aGlzKVxyXG4gICAgICB2YXIgJHBhcmVudCAgICAgICA9IGdldFBhcmVudCgkdGhpcylcclxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7IHJlbGF0ZWRUYXJnZXQ6IHRoaXMgfVxyXG5cclxuICAgICAgaWYgKCEkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJykpIHJldHVyblxyXG5cclxuICAgICAgaWYgKGUgJiYgZS50eXBlID09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSAmJiAkLmNvbnRhaW5zKCRwYXJlbnRbMF0sIGUudGFyZ2V0KSkgcmV0dXJuXHJcblxyXG4gICAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ2hpZGUuYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcclxuXHJcbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cclxuXHJcbiAgICAgICR0aGlzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxyXG4gICAgICAkcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuJykudHJpZ2dlcigkLkV2ZW50KCdoaWRkZW4uYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIHZhciAkdGhpcyA9ICQodGhpcylcclxuXHJcbiAgICBpZiAoJHRoaXMuaXMoJy5kaXNhYmxlZCwgOmRpc2FibGVkJykpIHJldHVyblxyXG5cclxuICAgIHZhciAkcGFyZW50ICA9IGdldFBhcmVudCgkdGhpcylcclxuICAgIHZhciBpc0FjdGl2ZSA9ICRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKVxyXG5cclxuICAgIGNsZWFyTWVudXMoKVxyXG5cclxuICAgIGlmICghaXNBY3RpdmUpIHtcclxuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAhJHBhcmVudC5jbG9zZXN0KCcubmF2YmFyLW5hdicpLmxlbmd0aCkge1xyXG4gICAgICAgIC8vIGlmIG1vYmlsZSB3ZSB1c2UgYSBiYWNrZHJvcCBiZWNhdXNlIGNsaWNrIGV2ZW50cyBkb24ndCBkZWxlZ2F0ZVxyXG4gICAgICAgICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXHJcbiAgICAgICAgICAuYWRkQ2xhc3MoJ2Ryb3Bkb3duLWJhY2tkcm9wJylcclxuICAgICAgICAgIC5pbnNlcnRBZnRlcigkKHRoaXMpKVxyXG4gICAgICAgICAgLm9uKCdjbGljaycsIGNsZWFyTWVudXMpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0geyByZWxhdGVkVGFyZ2V0OiB0aGlzIH1cclxuICAgICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdzaG93LmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXHJcblxyXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXHJcblxyXG4gICAgICAkdGhpc1xyXG4gICAgICAgIC50cmlnZ2VyKCdmb2N1cycpXHJcbiAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpXHJcblxyXG4gICAgICAkcGFyZW50XHJcbiAgICAgICAgLnRvZ2dsZUNsYXNzKCdvcGVuJylcclxuICAgICAgICAudHJpZ2dlcigkLkV2ZW50KCdzaG93bi5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24gPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgaWYgKCEvKDM4fDQwfDI3fDMyKS8udGVzdChlLndoaWNoKSB8fCAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm5cclxuXHJcbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXHJcblxyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXHJcblxyXG4gICAgaWYgKCR0aGlzLmlzKCcuZGlzYWJsZWQsIDpkaXNhYmxlZCcpKSByZXR1cm5cclxuXHJcbiAgICB2YXIgJHBhcmVudCAgPSBnZXRQYXJlbnQoJHRoaXMpXHJcbiAgICB2YXIgaXNBY3RpdmUgPSAkcGFyZW50Lmhhc0NsYXNzKCdvcGVuJylcclxuXHJcbiAgICBpZiAoIWlzQWN0aXZlICYmIGUud2hpY2ggIT0gMjcgfHwgaXNBY3RpdmUgJiYgZS53aGljaCA9PSAyNykge1xyXG4gICAgICBpZiAoZS53aGljaCA9PSAyNykgJHBhcmVudC5maW5kKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKVxyXG4gICAgICByZXR1cm4gJHRoaXMudHJpZ2dlcignY2xpY2snKVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBkZXNjID0gJyBsaTpub3QoLmRpc2FibGVkKTp2aXNpYmxlIGEnXHJcbiAgICB2YXIgJGl0ZW1zID0gJHBhcmVudC5maW5kKCcuZHJvcGRvd24tbWVudScgKyBkZXNjKVxyXG5cclxuICAgIGlmICghJGl0ZW1zLmxlbmd0aCkgcmV0dXJuXHJcblxyXG4gICAgdmFyIGluZGV4ID0gJGl0ZW1zLmluZGV4KGUudGFyZ2V0KVxyXG5cclxuICAgIGlmIChlLndoaWNoID09IDM4ICYmIGluZGV4ID4gMCkgICAgICAgICAgICAgICAgIGluZGV4LS0gICAgICAgICAvLyB1cFxyXG4gICAgaWYgKGUud2hpY2ggPT0gNDAgJiYgaW5kZXggPCAkaXRlbXMubGVuZ3RoIC0gMSkgaW5kZXgrKyAgICAgICAgIC8vIGRvd25cclxuICAgIGlmICghfmluZGV4KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMFxyXG5cclxuICAgICRpdGVtcy5lcShpbmRleCkudHJpZ2dlcignZm9jdXMnKVxyXG4gIH1cclxuXHJcblxyXG4gIC8vIERST1BET1dOIFBMVUdJTiBERUZJTklUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xyXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcclxuICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMuZHJvcGRvd24nKVxyXG5cclxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5kcm9wZG93bicsIChkYXRhID0gbmV3IERyb3Bkb3duKHRoaXMpKSlcclxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXS5jYWxsKCR0aGlzKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHZhciBvbGQgPSAkLmZuLmRyb3Bkb3duXHJcblxyXG4gICQuZm4uZHJvcGRvd24gICAgICAgICAgICAgPSBQbHVnaW5cclxuICAkLmZuLmRyb3Bkb3duLkNvbnN0cnVjdG9yID0gRHJvcGRvd25cclxuXHJcblxyXG4gIC8vIERST1BET1dOIE5PIENPTkZMSUNUXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgJC5mbi5kcm9wZG93bi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJC5mbi5kcm9wZG93biA9IG9sZFxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG5cclxuICAvLyBBUFBMWSBUTyBTVEFOREFSRCBEUk9QRE9XTiBFTEVNRU5UU1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICQoZG9jdW1lbnQpXHJcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgY2xlYXJNZW51cylcclxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCAnLmRyb3Bkb3duIGZvcm0nLCBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpIH0pXHJcbiAgICAub24oJ2NsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgdG9nZ2xlLCBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlKVxyXG4gICAgLm9uKCdrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpJywgdG9nZ2xlLCBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93bilcclxuICAgIC5vbigna2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaScsICcuZHJvcGRvd24tbWVudScsIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duKVxyXG5cclxufShqUXVlcnkpO1xyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIEJvb3RzdHJhcDogbW9kYWwuanMgdjMuMy43XHJcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI21vZGFsc1xyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuXHJcbitmdW5jdGlvbiAoJCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgLy8gTU9EQUwgQ0xBU1MgREVGSU5JVElPTlxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgdmFyIE1vZGFsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgIHRoaXMub3B0aW9ucyAgICAgICAgICAgICA9IG9wdGlvbnNcclxuICAgIHRoaXMuJGJvZHkgICAgICAgICAgICAgICA9ICQoZG9jdW1lbnQuYm9keSlcclxuICAgIHRoaXMuJGVsZW1lbnQgICAgICAgICAgICA9ICQoZWxlbWVudClcclxuICAgIHRoaXMuJGRpYWxvZyAgICAgICAgICAgICA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLm1vZGFsLWRpYWxvZycpXHJcbiAgICB0aGlzLiRiYWNrZHJvcCAgICAgICAgICAgPSBudWxsXHJcbiAgICB0aGlzLmlzU2hvd24gICAgICAgICAgICAgPSBudWxsXHJcbiAgICB0aGlzLm9yaWdpbmFsQm9keVBhZCAgICAgPSBudWxsXHJcbiAgICB0aGlzLnNjcm9sbGJhcldpZHRoICAgICAgPSAwXHJcbiAgICB0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZVxyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbnMucmVtb3RlKSB7XHJcbiAgICAgIHRoaXMuJGVsZW1lbnRcclxuICAgICAgICAuZmluZCgnLm1vZGFsLWNvbnRlbnQnKVxyXG4gICAgICAgIC5sb2FkKHRoaXMub3B0aW9ucy5yZW1vdGUsICQucHJveHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdsb2FkZWQuYnMubW9kYWwnKVxyXG4gICAgICAgIH0sIHRoaXMpKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgTW9kYWwuVkVSU0lPTiAgPSAnMy4zLjcnXHJcblxyXG4gIE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzMDBcclxuICBNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXHJcblxyXG4gIE1vZGFsLkRFRkFVTFRTID0ge1xyXG4gICAgYmFja2Ryb3A6IHRydWUsXHJcbiAgICBrZXlib2FyZDogdHJ1ZSxcclxuICAgIHNob3c6IHRydWVcclxuICB9XHJcblxyXG4gIE1vZGFsLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcclxuICAgIHJldHVybiB0aGlzLmlzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhfcmVsYXRlZFRhcmdldClcclxuICB9XHJcblxyXG4gIE1vZGFsLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKF9yZWxhdGVkVGFyZ2V0KSB7XHJcbiAgICB2YXIgdGhhdCA9IHRoaXNcclxuICAgIHZhciBlICAgID0gJC5FdmVudCgnc2hvdy5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcclxuXHJcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcclxuXHJcbiAgICBpZiAodGhpcy5pc1Nob3duIHx8IGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxyXG5cclxuICAgIHRoaXMuaXNTaG93biA9IHRydWVcclxuXHJcbiAgICB0aGlzLmNoZWNrU2Nyb2xsYmFyKClcclxuICAgIHRoaXMuc2V0U2Nyb2xsYmFyKClcclxuICAgIHRoaXMuJGJvZHkuYWRkQ2xhc3MoJ21vZGFsLW9wZW4nKVxyXG5cclxuICAgIHRoaXMuZXNjYXBlKClcclxuICAgIHRoaXMucmVzaXplKClcclxuXHJcbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsICQucHJveHkodGhpcy5oaWRlLCB0aGlzKSlcclxuXHJcbiAgICB0aGlzLiRkaWFsb2cub24oJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICB0aGF0LiRlbGVtZW50Lm9uZSgnbW91c2V1cC5kaXNtaXNzLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBpZiAoJChlLnRhcmdldCkuaXModGhhdC4kZWxlbWVudCkpIHRoYXQuaWdub3JlQmFja2Ryb3BDbGljayA9IHRydWVcclxuICAgICAgfSlcclxuICAgIH0pXHJcblxyXG4gICAgdGhpcy5iYWNrZHJvcChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhhdC4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpXHJcblxyXG4gICAgICBpZiAoIXRoYXQuJGVsZW1lbnQucGFyZW50KCkubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhhdC4kZWxlbWVudC5hcHBlbmRUbyh0aGF0LiRib2R5KSAvLyBkb24ndCBtb3ZlIG1vZGFscyBkb20gcG9zaXRpb25cclxuICAgICAgfVxyXG5cclxuICAgICAgdGhhdC4kZWxlbWVudFxyXG4gICAgICAgIC5zaG93KClcclxuICAgICAgICAuc2Nyb2xsVG9wKDApXHJcblxyXG4gICAgICB0aGF0LmFkanVzdERpYWxvZygpXHJcblxyXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xyXG4gICAgICAgIHRoYXQuJGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGggLy8gZm9yY2UgcmVmbG93XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoYXQuJGVsZW1lbnQuYWRkQ2xhc3MoJ2luJylcclxuXHJcbiAgICAgIHRoYXQuZW5mb3JjZUZvY3VzKClcclxuXHJcbiAgICAgIHZhciBlID0gJC5FdmVudCgnc2hvd24uYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXHJcblxyXG4gICAgICB0cmFuc2l0aW9uID9cclxuICAgICAgICB0aGF0LiRkaWFsb2cgLy8gd2FpdCBmb3IgbW9kYWwgdG8gc2xpZGUgaW5cclxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpLnRyaWdnZXIoZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOlxyXG4gICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKS50cmlnZ2VyKGUpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgTW9kYWwucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKVxyXG5cclxuICAgIGUgPSAkLkV2ZW50KCdoaWRlLmJzLm1vZGFsJylcclxuXHJcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcclxuXHJcbiAgICBpZiAoIXRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cclxuXHJcbiAgICB0aGlzLmlzU2hvd24gPSBmYWxzZVxyXG5cclxuICAgIHRoaXMuZXNjYXBlKClcclxuICAgIHRoaXMucmVzaXplKClcclxuXHJcbiAgICAkKGRvY3VtZW50KS5vZmYoJ2ZvY3VzaW4uYnMubW9kYWwnKVxyXG5cclxuICAgIHRoaXMuJGVsZW1lbnRcclxuICAgICAgLnJlbW92ZUNsYXNzKCdpbicpXHJcbiAgICAgIC5vZmYoJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnKVxyXG4gICAgICAub2ZmKCdtb3VzZXVwLmRpc21pc3MuYnMubW9kYWwnKVxyXG5cclxuICAgIHRoaXMuJGRpYWxvZy5vZmYoJ21vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsJylcclxuXHJcbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJykgP1xyXG4gICAgICB0aGlzLiRlbGVtZW50XHJcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eSh0aGlzLmhpZGVNb2RhbCwgdGhpcykpXHJcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcclxuICAgICAgdGhpcy5oaWRlTW9kYWwoKVxyXG4gIH1cclxuXHJcbiAgTW9kYWwucHJvdG90eXBlLmVuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICQoZG9jdW1lbnQpXHJcbiAgICAgIC5vZmYoJ2ZvY3VzaW4uYnMubW9kYWwnKSAvLyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcclxuICAgICAgLm9uKCdmb2N1c2luLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmIChkb2N1bWVudCAhPT0gZS50YXJnZXQgJiZcclxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudFswXSAhPT0gZS50YXJnZXQgJiZcclxuICAgICAgICAgICAgIXRoaXMuJGVsZW1lbnQuaGFzKGUudGFyZ2V0KS5sZW5ndGgpIHtcclxuICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKVxyXG4gICAgICAgIH1cclxuICAgICAgfSwgdGhpcykpXHJcbiAgfVxyXG5cclxuICBNb2RhbC5wcm90b3R5cGUuZXNjYXBlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMuaXNTaG93biAmJiB0aGlzLm9wdGlvbnMua2V5Ym9hcmQpIHtcclxuICAgICAgdGhpcy4kZWxlbWVudC5vbigna2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGUud2hpY2ggPT0gMjcgJiYgdGhpcy5oaWRlKClcclxuICAgICAgfSwgdGhpcykpXHJcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24pIHtcclxuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2tleWRvd24uZGlzbWlzcy5icy5tb2RhbCcpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBNb2RhbC5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMuaXNTaG93bikge1xyXG4gICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5icy5tb2RhbCcsICQucHJveHkodGhpcy5oYW5kbGVVcGRhdGUsIHRoaXMpKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLmJzLm1vZGFsJylcclxuICAgIH1cclxuICB9XHJcblxyXG4gIE1vZGFsLnByb3RvdHlwZS5oaWRlTW9kYWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdGhhdCA9IHRoaXNcclxuICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpXHJcbiAgICB0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhhdC4kYm9keS5yZW1vdmVDbGFzcygnbW9kYWwtb3BlbicpXHJcbiAgICAgIHRoYXQucmVzZXRBZGp1c3RtZW50cygpXHJcbiAgICAgIHRoYXQucmVzZXRTY3JvbGxiYXIoKVxyXG4gICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2hpZGRlbi5icy5tb2RhbCcpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgTW9kYWwucHJvdG90eXBlLnJlbW92ZUJhY2tkcm9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy4kYmFja2Ryb3AgJiYgdGhpcy4kYmFja2Ryb3AucmVtb3ZlKClcclxuICAgIHRoaXMuJGJhY2tkcm9wID0gbnVsbFxyXG4gIH1cclxuXHJcbiAgTW9kYWwucHJvdG90eXBlLmJhY2tkcm9wID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgdGhhdCA9IHRoaXNcclxuICAgIHZhciBhbmltYXRlID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID8gJ2ZhZGUnIDogJydcclxuXHJcbiAgICBpZiAodGhpcy5pc1Nob3duICYmIHRoaXMub3B0aW9ucy5iYWNrZHJvcCkge1xyXG4gICAgICB2YXIgZG9BbmltYXRlID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgYW5pbWF0ZVxyXG5cclxuICAgICAgdGhpcy4kYmFja2Ryb3AgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKVxyXG4gICAgICAgIC5hZGRDbGFzcygnbW9kYWwtYmFja2Ryb3AgJyArIGFuaW1hdGUpXHJcbiAgICAgICAgLmFwcGVuZFRvKHRoaXMuJGJvZHkpXHJcblxyXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2spIHtcclxuICAgICAgICAgIHRoaXMuaWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlXHJcbiAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQpIHJldHVyblxyXG4gICAgICAgIHRoaXMub3B0aW9ucy5iYWNrZHJvcCA9PSAnc3RhdGljJ1xyXG4gICAgICAgICAgPyB0aGlzLiRlbGVtZW50WzBdLmZvY3VzKClcclxuICAgICAgICAgIDogdGhpcy5oaWRlKClcclxuICAgICAgfSwgdGhpcykpXHJcblxyXG4gICAgICBpZiAoZG9BbmltYXRlKSB0aGlzLiRiYWNrZHJvcFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcclxuXHJcbiAgICAgIHRoaXMuJGJhY2tkcm9wLmFkZENsYXNzKCdpbicpXHJcblxyXG4gICAgICBpZiAoIWNhbGxiYWNrKSByZXR1cm5cclxuXHJcbiAgICAgIGRvQW5pbWF0ZSA/XHJcbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcclxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNhbGxiYWNrKVxyXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pIDpcclxuICAgICAgICBjYWxsYmFjaygpXHJcblxyXG4gICAgfSBlbHNlIGlmICghdGhpcy5pc1Nob3duICYmIHRoaXMuJGJhY2tkcm9wKSB7XHJcbiAgICAgIHRoaXMuJGJhY2tkcm9wLnJlbW92ZUNsYXNzKCdpbicpXHJcblxyXG4gICAgICB2YXIgY2FsbGJhY2tSZW1vdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhhdC5yZW1vdmVCYWNrZHJvcCgpXHJcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxyXG4gICAgICB9XHJcbiAgICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XHJcbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcclxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNhbGxiYWNrUmVtb3ZlKVxyXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pIDpcclxuICAgICAgICBjYWxsYmFja1JlbW92ZSgpXHJcblxyXG4gICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xyXG4gICAgICBjYWxsYmFjaygpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyB0aGVzZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgdXNlZCB0byBoYW5kbGUgb3ZlcmZsb3dpbmcgbW9kYWxzXHJcblxyXG4gIE1vZGFsLnByb3RvdHlwZS5oYW5kbGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmFkanVzdERpYWxvZygpXHJcbiAgfVxyXG5cclxuICBNb2RhbC5wcm90b3R5cGUuYWRqdXN0RGlhbG9nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZGFsSXNPdmVyZmxvd2luZyA9IHRoaXMuJGVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxyXG5cclxuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcclxuICAgICAgcGFkZGluZ0xlZnQ6ICAhdGhpcy5ib2R5SXNPdmVyZmxvd2luZyAmJiBtb2RhbElzT3ZlcmZsb3dpbmcgPyB0aGlzLnNjcm9sbGJhcldpZHRoIDogJycsXHJcbiAgICAgIHBhZGRpbmdSaWdodDogdGhpcy5ib2R5SXNPdmVyZmxvd2luZyAmJiAhbW9kYWxJc092ZXJmbG93aW5nID8gdGhpcy5zY3JvbGxiYXJXaWR0aCA6ICcnXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgTW9kYWwucHJvdG90eXBlLnJlc2V0QWRqdXN0bWVudHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7XHJcbiAgICAgIHBhZGRpbmdMZWZ0OiAnJyxcclxuICAgICAgcGFkZGluZ1JpZ2h0OiAnJ1xyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIE1vZGFsLnByb3RvdHlwZS5jaGVja1Njcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBmdWxsV2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxyXG4gICAgaWYgKCFmdWxsV2luZG93V2lkdGgpIHsgLy8gd29ya2Fyb3VuZCBmb3IgbWlzc2luZyB3aW5kb3cuaW5uZXJXaWR0aCBpbiBJRThcclxuICAgICAgdmFyIGRvY3VtZW50RWxlbWVudFJlY3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICAgICAgZnVsbFdpbmRvd1dpZHRoID0gZG9jdW1lbnRFbGVtZW50UmVjdC5yaWdodCAtIE1hdGguYWJzKGRvY3VtZW50RWxlbWVudFJlY3QubGVmdClcclxuICAgIH1cclxuICAgIHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDwgZnVsbFdpbmRvd1dpZHRoXHJcbiAgICB0aGlzLnNjcm9sbGJhcldpZHRoID0gdGhpcy5tZWFzdXJlU2Nyb2xsYmFyKClcclxuICB9XHJcblxyXG4gIE1vZGFsLnByb3RvdHlwZS5zZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgYm9keVBhZCA9IHBhcnNlSW50KCh0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcpIHx8IDApLCAxMClcclxuICAgIHRoaXMub3JpZ2luYWxCb2R5UGFkID0gZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgfHwgJydcclxuICAgIGlmICh0aGlzLmJvZHlJc092ZXJmbG93aW5nKSB0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcsIGJvZHlQYWQgKyB0aGlzLnNjcm9sbGJhcldpZHRoKVxyXG4gIH1cclxuXHJcbiAgTW9kYWwucHJvdG90eXBlLnJlc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnLCB0aGlzLm9yaWdpbmFsQm9keVBhZClcclxuICB9XHJcblxyXG4gIE1vZGFsLnByb3RvdHlwZS5tZWFzdXJlU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkgeyAvLyB0aHggd2Fsc2hcclxuICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgc2Nyb2xsRGl2LmNsYXNzTmFtZSA9ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZSdcclxuICAgIHRoaXMuJGJvZHkuYXBwZW5kKHNjcm9sbERpdilcclxuICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aFxyXG4gICAgdGhpcy4kYm9keVswXS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpXHJcbiAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGhcclxuICB9XHJcblxyXG5cclxuICAvLyBNT0RBTCBQTFVHSU4gREVGSU5JVElPTlxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24sIF9yZWxhdGVkVGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXHJcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMubW9kYWwnKVxyXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBNb2RhbC5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcclxuXHJcbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMubW9kYWwnLCAoZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBvcHRpb25zKSkpXHJcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oX3JlbGF0ZWRUYXJnZXQpXHJcbiAgICAgIGVsc2UgaWYgKG9wdGlvbnMuc2hvdykgZGF0YS5zaG93KF9yZWxhdGVkVGFyZ2V0KVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHZhciBvbGQgPSAkLmZuLm1vZGFsXHJcblxyXG4gICQuZm4ubW9kYWwgICAgICAgICAgICAgPSBQbHVnaW5cclxuICAkLmZuLm1vZGFsLkNvbnN0cnVjdG9yID0gTW9kYWxcclxuXHJcblxyXG4gIC8vIE1PREFMIE5PIENPTkZMSUNUXHJcbiAgLy8gPT09PT09PT09PT09PT09PT1cclxuXHJcbiAgJC5mbi5tb2RhbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJC5mbi5tb2RhbCA9IG9sZFxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG5cclxuICAvLyBNT0RBTCBEQVRBLUFQSVxyXG4gIC8vID09PT09PT09PT09PT09XHJcblxyXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5tb2RhbC5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcclxuICAgIHZhciBocmVmICAgID0gJHRoaXMuYXR0cignaHJlZicpXHJcbiAgICB2YXIgJHRhcmdldCA9ICQoJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCAoaHJlZiAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSkpIC8vIHN0cmlwIGZvciBpZTdcclxuICAgIHZhciBvcHRpb24gID0gJHRhcmdldC5kYXRhKCdicy5tb2RhbCcpID8gJ3RvZ2dsZScgOiAkLmV4dGVuZCh7IHJlbW90ZTogIS8jLy50ZXN0KGhyZWYpICYmIGhyZWYgfSwgJHRhcmdldC5kYXRhKCksICR0aGlzLmRhdGEoKSlcclxuXHJcbiAgICBpZiAoJHRoaXMuaXMoJ2EnKSkgZS5wcmV2ZW50RGVmYXVsdCgpXHJcblxyXG4gICAgJHRhcmdldC5vbmUoJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbiAoc2hvd0V2ZW50KSB7XHJcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybiAvLyBvbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXHJcbiAgICAgICR0YXJnZXQub25lKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJHRoaXMuaXMoJzp2aXNpYmxlJykgJiYgJHRoaXMudHJpZ2dlcignZm9jdXMnKVxyXG4gICAgICB9KVxyXG4gICAgfSlcclxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbiwgdGhpcylcclxuICB9KVxyXG5cclxufShqUXVlcnkpO1xyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIEJvb3RzdHJhcDogdG9vbHRpcC5qcyB2My4zLjdcclxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdG9vbHRpcFxyXG4gKiBJbnNwaXJlZCBieSB0aGUgb3JpZ2luYWwgalF1ZXJ5LnRpcHN5IGJ5IEphc29uIEZyYW1lXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cclxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG5cclxuK2Z1bmN0aW9uICgkKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAvLyBUT09MVElQIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICB2YXIgVG9vbHRpcCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLnR5cGUgICAgICAgPSBudWxsXHJcbiAgICB0aGlzLm9wdGlvbnMgICAgPSBudWxsXHJcbiAgICB0aGlzLmVuYWJsZWQgICAgPSBudWxsXHJcbiAgICB0aGlzLnRpbWVvdXQgICAgPSBudWxsXHJcbiAgICB0aGlzLmhvdmVyU3RhdGUgPSBudWxsXHJcbiAgICB0aGlzLiRlbGVtZW50ICAgPSBudWxsXHJcbiAgICB0aGlzLmluU3RhdGUgICAgPSBudWxsXHJcblxyXG4gICAgdGhpcy5pbml0KCd0b29sdGlwJywgZWxlbWVudCwgb3B0aW9ucylcclxuICB9XHJcblxyXG4gIFRvb2x0aXAuVkVSU0lPTiAgPSAnMy4zLjcnXHJcblxyXG4gIFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MFxyXG5cclxuICBUb29sdGlwLkRFRkFVTFRTID0ge1xyXG4gICAgYW5pbWF0aW9uOiB0cnVlLFxyXG4gICAgcGxhY2VtZW50OiAndG9wJyxcclxuICAgIHNlbGVjdG9yOiBmYWxzZSxcclxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJ0b29sdGlwLWFycm93XCI+PC9kaXY+PGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIj48L2Rpdj48L2Rpdj4nLFxyXG4gICAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcclxuICAgIHRpdGxlOiAnJyxcclxuICAgIGRlbGF5OiAwLFxyXG4gICAgaHRtbDogZmFsc2UsXHJcbiAgICBjb250YWluZXI6IGZhbHNlLFxyXG4gICAgdmlld3BvcnQ6IHtcclxuICAgICAgc2VsZWN0b3I6ICdib2R5JyxcclxuICAgICAgcGFkZGluZzogMFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgVG9vbHRpcC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICh0eXBlLCBlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLmVuYWJsZWQgICA9IHRydWVcclxuICAgIHRoaXMudHlwZSAgICAgID0gdHlwZVxyXG4gICAgdGhpcy4kZWxlbWVudCAgPSAkKGVsZW1lbnQpXHJcbiAgICB0aGlzLm9wdGlvbnMgICA9IHRoaXMuZ2V0T3B0aW9ucyhvcHRpb25zKVxyXG4gICAgdGhpcy4kdmlld3BvcnQgPSB0aGlzLm9wdGlvbnMudmlld3BvcnQgJiYgJCgkLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLnZpZXdwb3J0KSA/IHRoaXMub3B0aW9ucy52aWV3cG9ydC5jYWxsKHRoaXMsIHRoaXMuJGVsZW1lbnQpIDogKHRoaXMub3B0aW9ucy52aWV3cG9ydC5zZWxlY3RvciB8fCB0aGlzLm9wdGlvbnMudmlld3BvcnQpKVxyXG4gICAgdGhpcy5pblN0YXRlICAgPSB7IGNsaWNrOiBmYWxzZSwgaG92ZXI6IGZhbHNlLCBmb2N1czogZmFsc2UgfVxyXG5cclxuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdIGluc3RhbmNlb2YgZG9jdW1lbnQuY29uc3RydWN0b3IgJiYgIXRoaXMub3B0aW9ucy5zZWxlY3Rvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BzZWxlY3RvcmAgb3B0aW9uIG11c3QgYmUgc3BlY2lmaWVkIHdoZW4gaW5pdGlhbGl6aW5nICcgKyB0aGlzLnR5cGUgKyAnIG9uIHRoZSB3aW5kb3cuZG9jdW1lbnQgb2JqZWN0IScpXHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHRyaWdnZXJzID0gdGhpcy5vcHRpb25zLnRyaWdnZXIuc3BsaXQoJyAnKVxyXG5cclxuICAgIGZvciAodmFyIGkgPSB0cmlnZ2Vycy5sZW5ndGg7IGktLTspIHtcclxuICAgICAgdmFyIHRyaWdnZXIgPSB0cmlnZ2Vyc1tpXVxyXG5cclxuICAgICAgaWYgKHRyaWdnZXIgPT0gJ2NsaWNrJykge1xyXG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLicgKyB0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgJC5wcm94eSh0aGlzLnRvZ2dsZSwgdGhpcykpXHJcbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPSAnbWFudWFsJykge1xyXG4gICAgICAgIHZhciBldmVudEluICA9IHRyaWdnZXIgPT0gJ2hvdmVyJyA/ICdtb3VzZWVudGVyJyA6ICdmb2N1c2luJ1xyXG4gICAgICAgIHZhciBldmVudE91dCA9IHRyaWdnZXIgPT0gJ2hvdmVyJyA/ICdtb3VzZWxlYXZlJyA6ICdmb2N1c291dCdcclxuXHJcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudEluICArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMuZW50ZXIsIHRoaXMpKVxyXG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oZXZlbnRPdXQgKyAnLicgKyB0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgJC5wcm94eSh0aGlzLmxlYXZlLCB0aGlzKSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMub3B0aW9ucy5zZWxlY3RvciA/XHJcbiAgICAgICh0aGlzLl9vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgeyB0cmlnZ2VyOiAnbWFudWFsJywgc2VsZWN0b3I6ICcnIH0pKSA6XHJcbiAgICAgIHRoaXMuZml4VGl0bGUoKVxyXG4gIH1cclxuXHJcbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gVG9vbHRpcC5ERUZBVUxUU1xyXG4gIH1cclxuXHJcbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMuZ2V0RGVmYXVsdHMoKSwgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpXHJcblxyXG4gICAgaWYgKG9wdGlvbnMuZGVsYXkgJiYgdHlwZW9mIG9wdGlvbnMuZGVsYXkgPT0gJ251bWJlcicpIHtcclxuICAgICAgb3B0aW9ucy5kZWxheSA9IHtcclxuICAgICAgICBzaG93OiBvcHRpb25zLmRlbGF5LFxyXG4gICAgICAgIGhpZGU6IG9wdGlvbnMuZGVsYXlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvcHRpb25zXHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWxlZ2F0ZU9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgb3B0aW9ucyAgPSB7fVxyXG4gICAgdmFyIGRlZmF1bHRzID0gdGhpcy5nZXREZWZhdWx0cygpXHJcblxyXG4gICAgdGhpcy5fb3B0aW9ucyAmJiAkLmVhY2godGhpcy5fb3B0aW9ucywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgaWYgKGRlZmF1bHRzW2tleV0gIT0gdmFsdWUpIG9wdGlvbnNba2V5XSA9IHZhbHVlXHJcbiAgICB9KVxyXG5cclxuICAgIHJldHVybiBvcHRpb25zXHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS5lbnRlciA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIHZhciBzZWxmID0gb2JqIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvciA/XHJcbiAgICAgIG9iaiA6ICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXHJcblxyXG4gICAgaWYgKCFzZWxmKSB7XHJcbiAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmouY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcclxuICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcclxuICAgIH1cclxuXHJcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xyXG4gICAgICBzZWxmLmluU3RhdGVbb2JqLnR5cGUgPT0gJ2ZvY3VzaW4nID8gJ2ZvY3VzJyA6ICdob3ZlciddID0gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChzZWxmLnRpcCgpLmhhc0NsYXNzKCdpbicpIHx8IHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSB7XHJcbiAgICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdpbidcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dClcclxuXHJcbiAgICBzZWxmLmhvdmVyU3RhdGUgPSAnaW4nXHJcblxyXG4gICAgaWYgKCFzZWxmLm9wdGlvbnMuZGVsYXkgfHwgIXNlbGYub3B0aW9ucy5kZWxheS5zaG93KSByZXR1cm4gc2VsZi5zaG93KClcclxuXHJcbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHNlbGYuaG92ZXJTdGF0ZSA9PSAnaW4nKSBzZWxmLnNob3coKVxyXG4gICAgfSwgc2VsZi5vcHRpb25zLmRlbGF5LnNob3cpXHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS5pc0luU3RhdGVUcnVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuaW5TdGF0ZSkge1xyXG4gICAgICBpZiAodGhpcy5pblN0YXRlW2tleV0pIHJldHVybiB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS5sZWF2ZSA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgIHZhciBzZWxmID0gb2JqIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvciA/XHJcbiAgICAgIG9iaiA6ICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXHJcblxyXG4gICAgaWYgKCFzZWxmKSB7XHJcbiAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmouY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcclxuICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcclxuICAgIH1cclxuXHJcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xyXG4gICAgICBzZWxmLmluU3RhdGVbb2JqLnR5cGUgPT0gJ2ZvY3Vzb3V0JyA/ICdmb2N1cycgOiAnaG92ZXInXSA9IGZhbHNlXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNlbGYuaXNJblN0YXRlVHJ1ZSgpKSByZXR1cm5cclxuXHJcbiAgICBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxyXG5cclxuICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdvdXQnXHJcblxyXG4gICAgaWYgKCFzZWxmLm9wdGlvbnMuZGVsYXkgfHwgIXNlbGYub3B0aW9ucy5kZWxheS5oaWRlKSByZXR1cm4gc2VsZi5oaWRlKClcclxuXHJcbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKHNlbGYuaG92ZXJTdGF0ZSA9PSAnb3V0Jykgc2VsZi5oaWRlKClcclxuICAgIH0sIHNlbGYub3B0aW9ucy5kZWxheS5oaWRlKVxyXG4gIH1cclxuXHJcbiAgVG9vbHRpcC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBlID0gJC5FdmVudCgnc2hvdy5icy4nICsgdGhpcy50eXBlKVxyXG5cclxuICAgIGlmICh0aGlzLmhhc0NvbnRlbnQoKSAmJiB0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXHJcblxyXG4gICAgICB2YXIgaW5Eb20gPSAkLmNvbnRhaW5zKHRoaXMuJGVsZW1lbnRbMF0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuJGVsZW1lbnRbMF0pXHJcbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICFpbkRvbSkgcmV0dXJuXHJcbiAgICAgIHZhciB0aGF0ID0gdGhpc1xyXG5cclxuICAgICAgdmFyICR0aXAgPSB0aGlzLnRpcCgpXHJcblxyXG4gICAgICB2YXIgdGlwSWQgPSB0aGlzLmdldFVJRCh0aGlzLnR5cGUpXHJcblxyXG4gICAgICB0aGlzLnNldENvbnRlbnQoKVxyXG4gICAgICAkdGlwLmF0dHIoJ2lkJywgdGlwSWQpXHJcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1kZXNjcmliZWRieScsIHRpcElkKVxyXG5cclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pICR0aXAuYWRkQ2xhc3MoJ2ZhZGUnKVxyXG5cclxuICAgICAgdmFyIHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLm9wdGlvbnMucGxhY2VtZW50ID09ICdmdW5jdGlvbicgP1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQuY2FsbCh0aGlzLCAkdGlwWzBdLCB0aGlzLiRlbGVtZW50WzBdKSA6XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnBsYWNlbWVudFxyXG5cclxuICAgICAgdmFyIGF1dG9Ub2tlbiA9IC9cXHM/YXV0bz9cXHM/L2lcclxuICAgICAgdmFyIGF1dG9QbGFjZSA9IGF1dG9Ub2tlbi50ZXN0KHBsYWNlbWVudClcclxuICAgICAgaWYgKGF1dG9QbGFjZSkgcGxhY2VtZW50ID0gcGxhY2VtZW50LnJlcGxhY2UoYXV0b1Rva2VuLCAnJykgfHwgJ3RvcCdcclxuXHJcbiAgICAgICR0aXBcclxuICAgICAgICAuZGV0YWNoKClcclxuICAgICAgICAuY3NzKHsgdG9wOiAwLCBsZWZ0OiAwLCBkaXNwbGF5OiAnYmxvY2snIH0pXHJcbiAgICAgICAgLmFkZENsYXNzKHBsYWNlbWVudClcclxuICAgICAgICAuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgdGhpcylcclxuXHJcbiAgICAgIHRoaXMub3B0aW9ucy5jb250YWluZXIgPyAkdGlwLmFwcGVuZFRvKHRoaXMub3B0aW9ucy5jb250YWluZXIpIDogJHRpcC5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KVxyXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2luc2VydGVkLmJzLicgKyB0aGlzLnR5cGUpXHJcblxyXG4gICAgICB2YXIgcG9zICAgICAgICAgID0gdGhpcy5nZXRQb3NpdGlvbigpXHJcbiAgICAgIHZhciBhY3R1YWxXaWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXHJcbiAgICAgIHZhciBhY3R1YWxIZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodFxyXG5cclxuICAgICAgaWYgKGF1dG9QbGFjZSkge1xyXG4gICAgICAgIHZhciBvcmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRcclxuICAgICAgICB2YXIgdmlld3BvcnREaW0gPSB0aGlzLmdldFBvc2l0aW9uKHRoaXMuJHZpZXdwb3J0KVxyXG5cclxuICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgJiYgcG9zLmJvdHRvbSArIGFjdHVhbEhlaWdodCA+IHZpZXdwb3J0RGltLmJvdHRvbSA/ICd0b3AnICAgIDpcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgJiYgcG9zLnRvcCAgICAtIGFjdHVhbEhlaWdodCA8IHZpZXdwb3J0RGltLnRvcCAgICA/ICdib3R0b20nIDpcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3JpZ2h0JyAgJiYgcG9zLnJpZ2h0ICArIGFjdHVhbFdpZHRoICA+IHZpZXdwb3J0RGltLndpZHRoICA/ICdsZWZ0JyAgIDpcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgJiYgcG9zLmxlZnQgICAtIGFjdHVhbFdpZHRoICA8IHZpZXdwb3J0RGltLmxlZnQgICA/ICdyaWdodCcgIDpcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRcclxuXHJcbiAgICAgICAgJHRpcFxyXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKG9yZ1BsYWNlbWVudClcclxuICAgICAgICAgIC5hZGRDbGFzcyhwbGFjZW1lbnQpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBjYWxjdWxhdGVkT2Zmc2V0ID0gdGhpcy5nZXRDYWxjdWxhdGVkT2Zmc2V0KHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KVxyXG5cclxuICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChjYWxjdWxhdGVkT2Zmc2V0LCBwbGFjZW1lbnQpXHJcblxyXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gdGhhdC5ob3ZlclN0YXRlXHJcbiAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdzaG93bi5icy4nICsgdGhhdC50eXBlKVxyXG4gICAgICAgIHRoYXQuaG92ZXJTdGF0ZSA9IG51bGxcclxuXHJcbiAgICAgICAgaWYgKHByZXZIb3ZlclN0YXRlID09ICdvdXQnKSB0aGF0LmxlYXZlKHRoYXQpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJHRpcC5oYXNDbGFzcygnZmFkZScpID9cclxuICAgICAgICAkdGlwXHJcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcclxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChUb29sdGlwLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcclxuICAgICAgICBjb21wbGV0ZSgpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS5hcHBseVBsYWNlbWVudCA9IGZ1bmN0aW9uIChvZmZzZXQsIHBsYWNlbWVudCkge1xyXG4gICAgdmFyICR0aXAgICA9IHRoaXMudGlwKClcclxuICAgIHZhciB3aWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXHJcbiAgICB2YXIgaGVpZ2h0ID0gJHRpcFswXS5vZmZzZXRIZWlnaHRcclxuXHJcbiAgICAvLyBtYW51YWxseSByZWFkIG1hcmdpbnMgYmVjYXVzZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaW5jbHVkZXMgZGlmZmVyZW5jZVxyXG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlSW50KCR0aXAuY3NzKCdtYXJnaW4tdG9wJyksIDEwKVxyXG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUludCgkdGlwLmNzcygnbWFyZ2luLWxlZnQnKSwgMTApXHJcblxyXG4gICAgLy8gd2UgbXVzdCBjaGVjayBmb3IgTmFOIGZvciBpZSA4LzlcclxuICAgIGlmIChpc05hTihtYXJnaW5Ub3ApKSAgbWFyZ2luVG9wICA9IDBcclxuICAgIGlmIChpc05hTihtYXJnaW5MZWZ0KSkgbWFyZ2luTGVmdCA9IDBcclxuXHJcbiAgICBvZmZzZXQudG9wICArPSBtYXJnaW5Ub3BcclxuICAgIG9mZnNldC5sZWZ0ICs9IG1hcmdpbkxlZnRcclxuXHJcbiAgICAvLyAkLmZuLm9mZnNldCBkb2Vzbid0IHJvdW5kIHBpeGVsIHZhbHVlc1xyXG4gICAgLy8gc28gd2UgdXNlIHNldE9mZnNldCBkaXJlY3RseSB3aXRoIG91ciBvd24gZnVuY3Rpb24gQi0wXHJcbiAgICAkLm9mZnNldC5zZXRPZmZzZXQoJHRpcFswXSwgJC5leHRlbmQoe1xyXG4gICAgICB1c2luZzogZnVuY3Rpb24gKHByb3BzKSB7XHJcbiAgICAgICAgJHRpcC5jc3Moe1xyXG4gICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKHByb3BzLnRvcCksXHJcbiAgICAgICAgICBsZWZ0OiBNYXRoLnJvdW5kKHByb3BzLmxlZnQpXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSwgb2Zmc2V0KSwgMClcclxuXHJcbiAgICAkdGlwLmFkZENsYXNzKCdpbicpXHJcblxyXG4gICAgLy8gY2hlY2sgdG8gc2VlIGlmIHBsYWNpbmcgdGlwIGluIG5ldyBvZmZzZXQgY2F1c2VkIHRoZSB0aXAgdG8gcmVzaXplIGl0c2VsZlxyXG4gICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcclxuICAgIHZhciBhY3R1YWxIZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodFxyXG5cclxuICAgIGlmIChwbGFjZW1lbnQgPT0gJ3RvcCcgJiYgYWN0dWFsSGVpZ2h0ICE9IGhlaWdodCkge1xyXG4gICAgICBvZmZzZXQudG9wID0gb2Zmc2V0LnRvcCArIGhlaWdodCAtIGFjdHVhbEhlaWdodFxyXG4gICAgfVxyXG5cclxuICAgIHZhciBkZWx0YSA9IHRoaXMuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhKHBsYWNlbWVudCwgb2Zmc2V0LCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KVxyXG5cclxuICAgIGlmIChkZWx0YS5sZWZ0KSBvZmZzZXQubGVmdCArPSBkZWx0YS5sZWZ0XHJcbiAgICBlbHNlIG9mZnNldC50b3AgKz0gZGVsdGEudG9wXHJcblxyXG4gICAgdmFyIGlzVmVydGljYWwgICAgICAgICAgPSAvdG9wfGJvdHRvbS8udGVzdChwbGFjZW1lbnQpXHJcbiAgICB2YXIgYXJyb3dEZWx0YSAgICAgICAgICA9IGlzVmVydGljYWwgPyBkZWx0YS5sZWZ0ICogMiAtIHdpZHRoICsgYWN0dWFsV2lkdGggOiBkZWx0YS50b3AgKiAyIC0gaGVpZ2h0ICsgYWN0dWFsSGVpZ2h0XHJcbiAgICB2YXIgYXJyb3dPZmZzZXRQb3NpdGlvbiA9IGlzVmVydGljYWwgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCdcclxuXHJcbiAgICAkdGlwLm9mZnNldChvZmZzZXQpXHJcbiAgICB0aGlzLnJlcGxhY2VBcnJvdyhhcnJvd0RlbHRhLCAkdGlwWzBdW2Fycm93T2Zmc2V0UG9zaXRpb25dLCBpc1ZlcnRpY2FsKVxyXG4gIH1cclxuXHJcbiAgVG9vbHRpcC5wcm90b3R5cGUucmVwbGFjZUFycm93ID0gZnVuY3Rpb24gKGRlbHRhLCBkaW1lbnNpb24sIGlzVmVydGljYWwpIHtcclxuICAgIHRoaXMuYXJyb3coKVxyXG4gICAgICAuY3NzKGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJywgNTAgKiAoMSAtIGRlbHRhIC8gZGltZW5zaW9uKSArICclJylcclxuICAgICAgLmNzcyhpc1ZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCcsICcnKVxyXG4gIH1cclxuXHJcbiAgVG9vbHRpcC5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciAkdGlwICA9IHRoaXMudGlwKClcclxuICAgIHZhciB0aXRsZSA9IHRoaXMuZ2V0VGl0bGUoKVxyXG5cclxuICAgICR0aXAuZmluZCgnLnRvb2x0aXAtaW5uZXInKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpXHJcbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdmYWRlIGluIHRvcCBib3R0b20gbGVmdCByaWdodCcpXHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgdGhhdCA9IHRoaXNcclxuICAgIHZhciAkdGlwID0gJCh0aGlzLiR0aXApXHJcbiAgICB2YXIgZSAgICA9ICQuRXZlbnQoJ2hpZGUuYnMuJyArIHRoaXMudHlwZSlcclxuXHJcbiAgICBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcclxuICAgICAgaWYgKHRoYXQuaG92ZXJTdGF0ZSAhPSAnaW4nKSAkdGlwLmRldGFjaCgpXHJcbiAgICAgIGlmICh0aGF0LiRlbGVtZW50KSB7IC8vIFRPRE86IENoZWNrIHdoZXRoZXIgZ3VhcmRpbmcgdGhpcyBjb2RlIHdpdGggdGhpcyBgaWZgIGlzIHJlYWxseSBuZWNlc3NhcnkuXHJcbiAgICAgICAgdGhhdC4kZWxlbWVudFxyXG4gICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknKVxyXG4gICAgICAgICAgLnRyaWdnZXIoJ2hpZGRlbi5icy4nICsgdGhhdC50eXBlKVxyXG4gICAgICB9XHJcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcclxuXHJcbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXHJcblxyXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnaW4nKVxyXG5cclxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmICR0aXAuaGFzQ2xhc3MoJ2ZhZGUnKSA/XHJcbiAgICAgICR0aXBcclxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcclxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XHJcbiAgICAgIGNvbXBsZXRlKClcclxuXHJcbiAgICB0aGlzLmhvdmVyU3RhdGUgPSBudWxsXHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG4gIFRvb2x0aXAucHJvdG90eXBlLmZpeFRpdGxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICRlID0gdGhpcy4kZWxlbWVudFxyXG4gICAgaWYgKCRlLmF0dHIoJ3RpdGxlJykgfHwgdHlwZW9mICRlLmF0dHIoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKSAhPSAnc3RyaW5nJykge1xyXG4gICAgICAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgJGUuYXR0cigndGl0bGUnKSB8fCAnJykuYXR0cigndGl0bGUnLCAnJylcclxuICAgIH1cclxuICB9XHJcblxyXG4gIFRvb2x0aXAucHJvdG90eXBlLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpXHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgkZWxlbWVudCkge1xyXG4gICAgJGVsZW1lbnQgICA9ICRlbGVtZW50IHx8IHRoaXMuJGVsZW1lbnRcclxuXHJcbiAgICB2YXIgZWwgICAgID0gJGVsZW1lbnRbMF1cclxuICAgIHZhciBpc0JvZHkgPSBlbC50YWdOYW1lID09ICdCT0RZJ1xyXG5cclxuICAgIHZhciBlbFJlY3QgICAgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgaWYgKGVsUmVjdC53aWR0aCA9PSBudWxsKSB7XHJcbiAgICAgIC8vIHdpZHRoIGFuZCBoZWlnaHQgYXJlIG1pc3NpbmcgaW4gSUU4LCBzbyBjb21wdXRlIHRoZW0gbWFudWFsbHk7IHNlZSBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzE0MDkzXHJcbiAgICAgIGVsUmVjdCA9ICQuZXh0ZW5kKHt9LCBlbFJlY3QsIHsgd2lkdGg6IGVsUmVjdC5yaWdodCAtIGVsUmVjdC5sZWZ0LCBoZWlnaHQ6IGVsUmVjdC5ib3R0b20gLSBlbFJlY3QudG9wIH0pXHJcbiAgICB9XHJcbiAgICB2YXIgaXNTdmcgPSB3aW5kb3cuU1ZHRWxlbWVudCAmJiBlbCBpbnN0YW5jZW9mIHdpbmRvdy5TVkdFbGVtZW50XHJcbiAgICAvLyBBdm9pZCB1c2luZyAkLm9mZnNldCgpIG9uIFNWR3Mgc2luY2UgaXQgZ2l2ZXMgaW5jb3JyZWN0IHJlc3VsdHMgaW4galF1ZXJ5IDMuXHJcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8yMDI4MFxyXG4gICAgdmFyIGVsT2Zmc2V0ICA9IGlzQm9keSA/IHsgdG9wOiAwLCBsZWZ0OiAwIH0gOiAoaXNTdmcgPyBudWxsIDogJGVsZW1lbnQub2Zmc2V0KCkpXHJcbiAgICB2YXIgc2Nyb2xsICAgID0geyBzY3JvbGw6IGlzQm9keSA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgOiAkZWxlbWVudC5zY3JvbGxUb3AoKSB9XHJcbiAgICB2YXIgb3V0ZXJEaW1zID0gaXNCb2R5ID8geyB3aWR0aDogJCh3aW5kb3cpLndpZHRoKCksIGhlaWdodDogJCh3aW5kb3cpLmhlaWdodCgpIH0gOiBudWxsXHJcblxyXG4gICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBlbFJlY3QsIHNjcm9sbCwgb3V0ZXJEaW1zLCBlbE9mZnNldClcclxuICB9XHJcblxyXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldENhbGN1bGF0ZWRPZmZzZXQgPSBmdW5jdGlvbiAocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpIHtcclxuICAgIHJldHVybiBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgPyB7IHRvcDogcG9zLnRvcCArIHBvcy5oZWlnaHQsICAgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyIH0gOlxyXG4gICAgICAgICAgIHBsYWNlbWVudCA9PSAndG9wJyAgICA/IHsgdG9wOiBwb3MudG9wIC0gYWN0dWFsSGVpZ2h0LCBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCAvIDIgLSBhY3R1YWxXaWR0aCAvIDIgfSA6XHJcbiAgICAgICAgICAgcGxhY2VtZW50ID09ICdsZWZ0JyAgID8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0IC0gYWN0dWFsV2lkdGggfSA6XHJcbiAgICAgICAgLyogcGxhY2VtZW50ID09ICdyaWdodCcgKi8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIH1cclxuXHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEgPSBmdW5jdGlvbiAocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpIHtcclxuICAgIHZhciBkZWx0YSA9IHsgdG9wOiAwLCBsZWZ0OiAwIH1cclxuICAgIGlmICghdGhpcy4kdmlld3BvcnQpIHJldHVybiBkZWx0YVxyXG5cclxuICAgIHZhciB2aWV3cG9ydFBhZGRpbmcgPSB0aGlzLm9wdGlvbnMudmlld3BvcnQgJiYgdGhpcy5vcHRpb25zLnZpZXdwb3J0LnBhZGRpbmcgfHwgMFxyXG4gICAgdmFyIHZpZXdwb3J0RGltZW5zaW9ucyA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpXHJcblxyXG4gICAgaWYgKC9yaWdodHxsZWZ0Ly50ZXN0KHBsYWNlbWVudCkpIHtcclxuICAgICAgdmFyIHRvcEVkZ2VPZmZzZXQgICAgPSBwb3MudG9wIC0gdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbFxyXG4gICAgICB2YXIgYm90dG9tRWRnZU9mZnNldCA9IHBvcy50b3AgKyB2aWV3cG9ydFBhZGRpbmcgLSB2aWV3cG9ydERpbWVuc2lvbnMuc2Nyb2xsICsgYWN0dWFsSGVpZ2h0XHJcbiAgICAgIGlmICh0b3BFZGdlT2Zmc2V0IDwgdmlld3BvcnREaW1lbnNpb25zLnRvcCkgeyAvLyB0b3Agb3ZlcmZsb3dcclxuICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wIC0gdG9wRWRnZU9mZnNldFxyXG4gICAgICB9IGVsc2UgaWYgKGJvdHRvbUVkZ2VPZmZzZXQgPiB2aWV3cG9ydERpbWVuc2lvbnMudG9wICsgdmlld3BvcnREaW1lbnNpb25zLmhlaWdodCkgeyAvLyBib3R0b20gb3ZlcmZsb3dcclxuICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wICsgdmlld3BvcnREaW1lbnNpb25zLmhlaWdodCAtIGJvdHRvbUVkZ2VPZmZzZXRcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIGxlZnRFZGdlT2Zmc2V0ICA9IHBvcy5sZWZ0IC0gdmlld3BvcnRQYWRkaW5nXHJcbiAgICAgIHZhciByaWdodEVkZ2VPZmZzZXQgPSBwb3MubGVmdCArIHZpZXdwb3J0UGFkZGluZyArIGFjdHVhbFdpZHRoXHJcbiAgICAgIGlmIChsZWZ0RWRnZU9mZnNldCA8IHZpZXdwb3J0RGltZW5zaW9ucy5sZWZ0KSB7IC8vIGxlZnQgb3ZlcmZsb3dcclxuICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgLSBsZWZ0RWRnZU9mZnNldFxyXG4gICAgICB9IGVsc2UgaWYgKHJpZ2h0RWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy5yaWdodCkgeyAvLyByaWdodCBvdmVyZmxvd1xyXG4gICAgICAgIGRlbHRhLmxlZnQgPSB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCArIHZpZXdwb3J0RGltZW5zaW9ucy53aWR0aCAtIHJpZ2h0RWRnZU9mZnNldFxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRlbHRhXHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRUaXRsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0aXRsZVxyXG4gICAgdmFyICRlID0gdGhpcy4kZWxlbWVudFxyXG4gICAgdmFyIG8gID0gdGhpcy5vcHRpb25zXHJcblxyXG4gICAgdGl0bGUgPSAkZS5hdHRyKCdkYXRhLW9yaWdpbmFsLXRpdGxlJylcclxuICAgICAgfHwgKHR5cGVvZiBvLnRpdGxlID09ICdmdW5jdGlvbicgPyBvLnRpdGxlLmNhbGwoJGVbMF0pIDogIG8udGl0bGUpXHJcblxyXG4gICAgcmV0dXJuIHRpdGxlXHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRVSUQgPSBmdW5jdGlvbiAocHJlZml4KSB7XHJcbiAgICBkbyBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApXHJcbiAgICB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSlcclxuICAgIHJldHVybiBwcmVmaXhcclxuICB9XHJcblxyXG4gIFRvb2x0aXAucHJvdG90eXBlLnRpcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICghdGhpcy4kdGlwKSB7XHJcbiAgICAgIHRoaXMuJHRpcCA9ICQodGhpcy5vcHRpb25zLnRlbXBsYXRlKVxyXG4gICAgICBpZiAodGhpcy4kdGlwLmxlbmd0aCAhPSAxKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMudHlwZSArICcgYHRlbXBsYXRlYCBvcHRpb24gbXVzdCBjb25zaXN0IG9mIGV4YWN0bHkgMSB0b3AtbGV2ZWwgZWxlbWVudCEnKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy4kdGlwXHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS5hcnJvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAodGhpcy4kYXJyb3cgPSB0aGlzLiRhcnJvdyB8fCB0aGlzLnRpcCgpLmZpbmQoJy50b29sdGlwLWFycm93JykpXHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlXHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5lbmFibGVkID0gZmFsc2VcclxuICB9XHJcblxyXG4gIFRvb2x0aXAucHJvdG90eXBlLnRvZ2dsZUVuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmVuYWJsZWQgPSAhdGhpcy5lbmFibGVkXHJcbiAgfVxyXG5cclxuICBUb29sdGlwLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzXHJcbiAgICBpZiAoZSkge1xyXG4gICAgICBzZWxmID0gJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXHJcbiAgICAgIGlmICghc2VsZikge1xyXG4gICAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihlLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpXHJcbiAgICAgICAgJChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoZSkge1xyXG4gICAgICBzZWxmLmluU3RhdGUuY2xpY2sgPSAhc2VsZi5pblN0YXRlLmNsaWNrXHJcbiAgICAgIGlmIChzZWxmLmlzSW5TdGF0ZVRydWUoKSkgc2VsZi5lbnRlcihzZWxmKVxyXG4gICAgICBlbHNlIHNlbGYubGVhdmUoc2VsZilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNlbGYudGlwKCkuaGFzQ2xhc3MoJ2luJykgPyBzZWxmLmxlYXZlKHNlbGYpIDogc2VsZi5lbnRlcihzZWxmKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgVG9vbHRpcC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0aGF0ID0gdGhpc1xyXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dClcclxuICAgIHRoaXMuaGlkZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRoYXQuJGVsZW1lbnQub2ZmKCcuJyArIHRoYXQudHlwZSkucmVtb3ZlRGF0YSgnYnMuJyArIHRoYXQudHlwZSlcclxuICAgICAgaWYgKHRoYXQuJHRpcCkge1xyXG4gICAgICAgIHRoYXQuJHRpcC5kZXRhY2goKVxyXG4gICAgICB9XHJcbiAgICAgIHRoYXQuJHRpcCA9IG51bGxcclxuICAgICAgdGhhdC4kYXJyb3cgPSBudWxsXHJcbiAgICAgIHRoYXQuJHZpZXdwb3J0ID0gbnVsbFxyXG4gICAgICB0aGF0LiRlbGVtZW50ID0gbnVsbFxyXG4gICAgfSlcclxuICB9XHJcblxyXG5cclxuICAvLyBUT09MVElQIFBMVUdJTiBERUZJTklUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXHJcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMudG9vbHRpcCcpXHJcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cclxuXHJcbiAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KG9wdGlvbikpIHJldHVyblxyXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnRvb2x0aXAnLCAoZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIG9wdGlvbnMpKSlcclxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgdmFyIG9sZCA9ICQuZm4udG9vbHRpcFxyXG5cclxuICAkLmZuLnRvb2x0aXAgICAgICAgICAgICAgPSBQbHVnaW5cclxuICAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IgPSBUb29sdGlwXHJcblxyXG5cclxuICAvLyBUT09MVElQIE5PIENPTkZMSUNUXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAkLmZuLnRvb2x0aXAubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICQuZm4udG9vbHRpcCA9IG9sZFxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG59KGpRdWVyeSk7XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQm9vdHN0cmFwOiBwb3BvdmVyLmpzIHYzLjMuN1xyXG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNwb3BvdmVyc1xyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuXHJcbitmdW5jdGlvbiAoJCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgLy8gUE9QT1ZFUiBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgdmFyIFBvcG92ZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgdGhpcy5pbml0KCdwb3BvdmVyJywgZWxlbWVudCwgb3B0aW9ucylcclxuICB9XHJcblxyXG4gIGlmICghJC5mbi50b29sdGlwKSB0aHJvdyBuZXcgRXJyb3IoJ1BvcG92ZXIgcmVxdWlyZXMgdG9vbHRpcC5qcycpXHJcblxyXG4gIFBvcG92ZXIuVkVSU0lPTiAgPSAnMy4zLjcnXHJcblxyXG4gIFBvcG92ZXIuREVGQVVMVFMgPSAkLmV4dGVuZCh7fSwgJC5mbi50b29sdGlwLkNvbnN0cnVjdG9yLkRFRkFVTFRTLCB7XHJcbiAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXHJcbiAgICB0cmlnZ2VyOiAnY2xpY2snLFxyXG4gICAgY29udGVudDogJycsXHJcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj48aDMgY2xhc3M9XCJwb3BvdmVyLXRpdGxlXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1jb250ZW50XCI+PC9kaXY+PC9kaXY+J1xyXG4gIH0pXHJcblxyXG5cclxuICAvLyBOT1RFOiBQT1BPVkVSIEVYVEVORFMgdG9vbHRpcC5qc1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIFBvcG92ZXIucHJvdG90eXBlID0gJC5leHRlbmQoe30sICQuZm4udG9vbHRpcC5Db25zdHJ1Y3Rvci5wcm90b3R5cGUpXHJcblxyXG4gIFBvcG92ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9wb3ZlclxyXG5cclxuICBQb3BvdmVyLnByb3RvdHlwZS5nZXREZWZhdWx0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBQb3BvdmVyLkRFRkFVTFRTXHJcbiAgfVxyXG5cclxuICBQb3BvdmVyLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICR0aXAgICAgPSB0aGlzLnRpcCgpXHJcbiAgICB2YXIgdGl0bGUgICA9IHRoaXMuZ2V0VGl0bGUoKVxyXG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdldENvbnRlbnQoKVxyXG5cclxuICAgICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpXHJcbiAgICAkdGlwLmZpbmQoJy5wb3BvdmVyLWNvbnRlbnQnKS5jaGlsZHJlbigpLmRldGFjaCgpLmVuZCgpWyAvLyB3ZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXHJcbiAgICAgIHRoaXMub3B0aW9ucy5odG1sID8gKHR5cGVvZiBjb250ZW50ID09ICdzdHJpbmcnID8gJ2h0bWwnIDogJ2FwcGVuZCcpIDogJ3RleHQnXHJcbiAgICBdKGNvbnRlbnQpXHJcblxyXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnZmFkZSB0b3AgYm90dG9tIGxlZnQgcmlnaHQgaW4nKVxyXG5cclxuICAgIC8vIElFOCBkb2Vzbid0IGFjY2VwdCBoaWRpbmcgdmlhIHRoZSBgOmVtcHR5YCBwc2V1ZG8gc2VsZWN0b3IsIHdlIGhhdmUgdG8gZG9cclxuICAgIC8vIHRoaXMgbWFudWFsbHkgYnkgY2hlY2tpbmcgdGhlIGNvbnRlbnRzLlxyXG4gICAgaWYgKCEkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJykuaHRtbCgpKSAkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJykuaGlkZSgpXHJcbiAgfVxyXG5cclxuICBQb3BvdmVyLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLmdldENvbnRlbnQoKVxyXG4gIH1cclxuXHJcbiAgUG9wb3Zlci5wcm90b3R5cGUuZ2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcclxuICAgIHZhciBvICA9IHRoaXMub3B0aW9uc1xyXG5cclxuICAgIHJldHVybiAkZS5hdHRyKCdkYXRhLWNvbnRlbnQnKVxyXG4gICAgICB8fCAodHlwZW9mIG8uY29udGVudCA9PSAnZnVuY3Rpb24nID9cclxuICAgICAgICAgICAgby5jb250ZW50LmNhbGwoJGVbMF0pIDpcclxuICAgICAgICAgICAgby5jb250ZW50KVxyXG4gIH1cclxuXHJcbiAgUG9wb3Zlci5wcm90b3R5cGUuYXJyb3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gKHRoaXMuJGFycm93ID0gdGhpcy4kYXJyb3cgfHwgdGhpcy50aXAoKS5maW5kKCcuYXJyb3cnKSlcclxuICB9XHJcblxyXG5cclxuICAvLyBQT1BPVkVSIFBMVUdJTiBERUZJTklUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXHJcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicpXHJcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cclxuXHJcbiAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KG9wdGlvbikpIHJldHVyblxyXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnBvcG92ZXInLCAoZGF0YSA9IG5ldyBQb3BvdmVyKHRoaXMsIG9wdGlvbnMpKSlcclxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgdmFyIG9sZCA9ICQuZm4ucG9wb3ZlclxyXG5cclxuICAkLmZuLnBvcG92ZXIgICAgICAgICAgICAgPSBQbHVnaW5cclxuICAkLmZuLnBvcG92ZXIuQ29uc3RydWN0b3IgPSBQb3BvdmVyXHJcblxyXG5cclxuICAvLyBQT1BPVkVSIE5PIENPTkZMSUNUXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAkLmZuLnBvcG92ZXIubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICQuZm4ucG9wb3ZlciA9IG9sZFxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG59KGpRdWVyeSk7XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQm9vdHN0cmFwOiB0YWIuanMgdjMuMy43XHJcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3RhYnNcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxyXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcblxyXG4rZnVuY3Rpb24gKCQpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIC8vIFRBQiBDTEFTUyBERUZJTklUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgdmFyIFRhYiA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAvLyBqc2NzOmRpc2FibGUgcmVxdWlyZURvbGxhckJlZm9yZWpRdWVyeUFzc2lnbm1lbnRcclxuICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudClcclxuICAgIC8vIGpzY3M6ZW5hYmxlIHJlcXVpcmVEb2xsYXJCZWZvcmVqUXVlcnlBc3NpZ25tZW50XHJcbiAgfVxyXG5cclxuICBUYWIuVkVSU0lPTiA9ICczLjMuNydcclxuXHJcbiAgVGFiLlRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTBcclxuXHJcbiAgVGFiLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICR0aGlzICAgID0gdGhpcy5lbGVtZW50XHJcbiAgICB2YXIgJHVsICAgICAgPSAkdGhpcy5jbG9zZXN0KCd1bDpub3QoLmRyb3Bkb3duLW1lbnUpJylcclxuICAgIHZhciBzZWxlY3RvciA9ICR0aGlzLmRhdGEoJ3RhcmdldCcpXHJcblxyXG4gICAgaWYgKCFzZWxlY3Rvcikge1xyXG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxyXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCR0aGlzLnBhcmVudCgnbGknKS5oYXNDbGFzcygnYWN0aXZlJykpIHJldHVyblxyXG5cclxuICAgIHZhciAkcHJldmlvdXMgPSAkdWwuZmluZCgnLmFjdGl2ZTpsYXN0IGEnKVxyXG4gICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoJ2hpZGUuYnMudGFiJywge1xyXG4gICAgICByZWxhdGVkVGFyZ2V0OiAkdGhpc1swXVxyXG4gICAgfSlcclxuICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KCdzaG93LmJzLnRhYicsIHtcclxuICAgICAgcmVsYXRlZFRhcmdldDogJHByZXZpb3VzWzBdXHJcbiAgICB9KVxyXG5cclxuICAgICRwcmV2aW91cy50cmlnZ2VyKGhpZGVFdmVudClcclxuICAgICR0aGlzLnRyaWdnZXIoc2hvd0V2ZW50KVxyXG5cclxuICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cclxuXHJcbiAgICB2YXIgJHRhcmdldCA9ICQoc2VsZWN0b3IpXHJcblxyXG4gICAgdGhpcy5hY3RpdmF0ZSgkdGhpcy5jbG9zZXN0KCdsaScpLCAkdWwpXHJcbiAgICB0aGlzLmFjdGl2YXRlKCR0YXJnZXQsICR0YXJnZXQucGFyZW50KCksIGZ1bmN0aW9uICgpIHtcclxuICAgICAgJHByZXZpb3VzLnRyaWdnZXIoe1xyXG4gICAgICAgIHR5cGU6ICdoaWRkZW4uYnMudGFiJyxcclxuICAgICAgICByZWxhdGVkVGFyZ2V0OiAkdGhpc1swXVxyXG4gICAgICB9KVxyXG4gICAgICAkdGhpcy50cmlnZ2VyKHtcclxuICAgICAgICB0eXBlOiAnc2hvd24uYnMudGFiJyxcclxuICAgICAgICByZWxhdGVkVGFyZ2V0OiAkcHJldmlvdXNbMF1cclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBUYWIucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcclxuICAgIHZhciAkYWN0aXZlICAgID0gY29udGFpbmVyLmZpbmQoJz4gLmFjdGl2ZScpXHJcbiAgICB2YXIgdHJhbnNpdGlvbiA9IGNhbGxiYWNrXHJcbiAgICAgICYmICQuc3VwcG9ydC50cmFuc2l0aW9uXHJcbiAgICAgICYmICgkYWN0aXZlLmxlbmd0aCAmJiAkYWN0aXZlLmhhc0NsYXNzKCdmYWRlJykgfHwgISFjb250YWluZXIuZmluZCgnPiAuZmFkZScpLmxlbmd0aClcclxuXHJcbiAgICBmdW5jdGlvbiBuZXh0KCkge1xyXG4gICAgICAkYWN0aXZlXHJcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxyXG4gICAgICAgIC5maW5kKCc+IC5kcm9wZG93bi1tZW51ID4gLmFjdGl2ZScpXHJcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXHJcbiAgICAgICAgLmVuZCgpXHJcbiAgICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpXHJcbiAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKVxyXG5cclxuICAgICAgZWxlbWVudFxyXG4gICAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcclxuICAgICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJylcclxuICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcclxuXHJcbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyByZWZsb3cgZm9yIHRyYW5zaXRpb25cclxuICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdpbicpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZmFkZScpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChlbGVtZW50LnBhcmVudCgnLmRyb3Bkb3duLW1lbnUnKS5sZW5ndGgpIHtcclxuICAgICAgICBlbGVtZW50XHJcbiAgICAgICAgICAuY2xvc2VzdCgnbGkuZHJvcGRvd24nKVxyXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXHJcbiAgICAgICAgICAuZW5kKClcclxuICAgICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxyXG4gICAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcclxuICAgIH1cclxuXHJcbiAgICAkYWN0aXZlLmxlbmd0aCAmJiB0cmFuc2l0aW9uID9cclxuICAgICAgJGFjdGl2ZVxyXG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIG5leHQpXHJcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRhYi5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XHJcbiAgICAgIG5leHQoKVxyXG5cclxuICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoJ2luJylcclxuICB9XHJcblxyXG5cclxuICAvLyBUQUIgUExVR0lOIERFRklOSVRJT05cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xyXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcylcclxuICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMudGFiJylcclxuXHJcbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMudGFiJywgKGRhdGEgPSBuZXcgVGFiKHRoaXMpKSlcclxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgdmFyIG9sZCA9ICQuZm4udGFiXHJcblxyXG4gICQuZm4udGFiICAgICAgICAgICAgID0gUGx1Z2luXHJcbiAgJC5mbi50YWIuQ29uc3RydWN0b3IgPSBUYWJcclxuXHJcblxyXG4gIC8vIFRBQiBOTyBDT05GTElDVFxyXG4gIC8vID09PT09PT09PT09PT09PVxyXG5cclxuICAkLmZuLnRhYi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJC5mbi50YWIgPSBvbGRcclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gVEFCIERBVEEtQVBJXHJcbiAgLy8gPT09PT09PT09PT09XHJcblxyXG4gIHZhciBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICBQbHVnaW4uY2FsbCgkKHRoaXMpLCAnc2hvdycpXHJcbiAgfVxyXG5cclxuICAkKGRvY3VtZW50KVxyXG4gICAgLm9uKCdjbGljay5icy50YWIuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJywgY2xpY2tIYW5kbGVyKVxyXG4gICAgLm9uKCdjbGljay5icy50YWIuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwicGlsbFwiXScsIGNsaWNrSGFuZGxlcilcclxuXHJcbn0oalF1ZXJ5KTtcclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBCb290c3RyYXA6IGFmZml4LmpzIHYzLjMuN1xyXG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNhZmZpeFxyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuXHJcbitmdW5jdGlvbiAoJCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgLy8gQUZGSVggQ0xBU1MgREVGSU5JVElPTlxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgdmFyIEFmZml4ID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBZmZpeC5ERUZBVUxUUywgb3B0aW9ucylcclxuXHJcbiAgICB0aGlzLiR0YXJnZXQgPSAkKHRoaXMub3B0aW9ucy50YXJnZXQpXHJcbiAgICAgIC5vbignc2Nyb2xsLmJzLmFmZml4LmRhdGEtYXBpJywgJC5wcm94eSh0aGlzLmNoZWNrUG9zaXRpb24sIHRoaXMpKVxyXG4gICAgICAub24oJ2NsaWNrLmJzLmFmZml4LmRhdGEtYXBpJywgICQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCwgdGhpcykpXHJcblxyXG4gICAgdGhpcy4kZWxlbWVudCAgICAgPSAkKGVsZW1lbnQpXHJcbiAgICB0aGlzLmFmZml4ZWQgICAgICA9IG51bGxcclxuICAgIHRoaXMudW5waW4gICAgICAgID0gbnVsbFxyXG4gICAgdGhpcy5waW5uZWRPZmZzZXQgPSBudWxsXHJcblxyXG4gICAgdGhpcy5jaGVja1Bvc2l0aW9uKClcclxuICB9XHJcblxyXG4gIEFmZml4LlZFUlNJT04gID0gJzMuMy43J1xyXG5cclxuICBBZmZpeC5SRVNFVCAgICA9ICdhZmZpeCBhZmZpeC10b3AgYWZmaXgtYm90dG9tJ1xyXG5cclxuICBBZmZpeC5ERUZBVUxUUyA9IHtcclxuICAgIG9mZnNldDogMCxcclxuICAgIHRhcmdldDogd2luZG93XHJcbiAgfVxyXG5cclxuICBBZmZpeC5wcm90b3R5cGUuZ2V0U3RhdGUgPSBmdW5jdGlvbiAoc2Nyb2xsSGVpZ2h0LCBoZWlnaHQsIG9mZnNldFRvcCwgb2Zmc2V0Qm90dG9tKSB7XHJcbiAgICB2YXIgc2Nyb2xsVG9wICAgID0gdGhpcy4kdGFyZ2V0LnNjcm9sbFRvcCgpXHJcbiAgICB2YXIgcG9zaXRpb24gICAgID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxyXG4gICAgdmFyIHRhcmdldEhlaWdodCA9IHRoaXMuJHRhcmdldC5oZWlnaHQoKVxyXG5cclxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiB0aGlzLmFmZml4ZWQgPT0gJ3RvcCcpIHJldHVybiBzY3JvbGxUb3AgPCBvZmZzZXRUb3AgPyAndG9wJyA6IGZhbHNlXHJcblxyXG4gICAgaWYgKHRoaXMuYWZmaXhlZCA9PSAnYm90dG9tJykge1xyXG4gICAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwpIHJldHVybiAoc2Nyb2xsVG9wICsgdGhpcy51bnBpbiA8PSBwb3NpdGlvbi50b3ApID8gZmFsc2UgOiAnYm90dG9tJ1xyXG4gICAgICByZXR1cm4gKHNjcm9sbFRvcCArIHRhcmdldEhlaWdodCA8PSBzY3JvbGxIZWlnaHQgLSBvZmZzZXRCb3R0b20pID8gZmFsc2UgOiAnYm90dG9tJ1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpbml0aWFsaXppbmcgICA9IHRoaXMuYWZmaXhlZCA9PSBudWxsXHJcbiAgICB2YXIgY29sbGlkZXJUb3AgICAgPSBpbml0aWFsaXppbmcgPyBzY3JvbGxUb3AgOiBwb3NpdGlvbi50b3BcclxuICAgIHZhciBjb2xsaWRlckhlaWdodCA9IGluaXRpYWxpemluZyA/IHRhcmdldEhlaWdodCA6IGhlaWdodFxyXG5cclxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiBzY3JvbGxUb3AgPD0gb2Zmc2V0VG9wKSByZXR1cm4gJ3RvcCdcclxuICAgIGlmIChvZmZzZXRCb3R0b20gIT0gbnVsbCAmJiAoY29sbGlkZXJUb3AgKyBjb2xsaWRlckhlaWdodCA+PSBzY3JvbGxIZWlnaHQgLSBvZmZzZXRCb3R0b20pKSByZXR1cm4gJ2JvdHRvbSdcclxuXHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIEFmZml4LnByb3RvdHlwZS5nZXRQaW5uZWRPZmZzZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5waW5uZWRPZmZzZXQpIHJldHVybiB0aGlzLnBpbm5lZE9mZnNldFxyXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhBZmZpeC5SRVNFVCkuYWRkQ2xhc3MoJ2FmZml4JylcclxuICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcclxuICAgIHZhciBwb3NpdGlvbiAgPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpXHJcbiAgICByZXR1cm4gKHRoaXMucGlubmVkT2Zmc2V0ID0gcG9zaXRpb24udG9wIC0gc2Nyb2xsVG9wKVxyXG4gIH1cclxuXHJcbiAgQWZmaXgucHJvdG90eXBlLmNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgc2V0VGltZW91dCgkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcyksIDEpXHJcbiAgfVxyXG5cclxuICBBZmZpeC5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICghdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkgcmV0dXJuXHJcblxyXG4gICAgdmFyIGhlaWdodCAgICAgICA9IHRoaXMuJGVsZW1lbnQuaGVpZ2h0KClcclxuICAgIHZhciBvZmZzZXQgICAgICAgPSB0aGlzLm9wdGlvbnMub2Zmc2V0XHJcbiAgICB2YXIgb2Zmc2V0VG9wICAgID0gb2Zmc2V0LnRvcFxyXG4gICAgdmFyIG9mZnNldEJvdHRvbSA9IG9mZnNldC5ib3R0b21cclxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSBNYXRoLm1heCgkKGRvY3VtZW50KS5oZWlnaHQoKSwgJChkb2N1bWVudC5ib2R5KS5oZWlnaHQoKSlcclxuXHJcbiAgICBpZiAodHlwZW9mIG9mZnNldCAhPSAnb2JqZWN0JykgICAgICAgICBvZmZzZXRCb3R0b20gPSBvZmZzZXRUb3AgPSBvZmZzZXRcclxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0VG9wID09ICdmdW5jdGlvbicpICAgIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3AodGhpcy4kZWxlbWVudClcclxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0Qm90dG9tID09ICdmdW5jdGlvbicpIG9mZnNldEJvdHRvbSA9IG9mZnNldC5ib3R0b20odGhpcy4kZWxlbWVudClcclxuXHJcbiAgICB2YXIgYWZmaXggPSB0aGlzLmdldFN0YXRlKHNjcm9sbEhlaWdodCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldEJvdHRvbSlcclxuXHJcbiAgICBpZiAodGhpcy5hZmZpeGVkICE9IGFmZml4KSB7XHJcbiAgICAgIGlmICh0aGlzLnVucGluICE9IG51bGwpIHRoaXMuJGVsZW1lbnQuY3NzKCd0b3AnLCAnJylcclxuXHJcbiAgICAgIHZhciBhZmZpeFR5cGUgPSAnYWZmaXgnICsgKGFmZml4ID8gJy0nICsgYWZmaXggOiAnJylcclxuICAgICAgdmFyIGUgICAgICAgICA9ICQuRXZlbnQoYWZmaXhUeXBlICsgJy5icy5hZmZpeCcpXHJcblxyXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcclxuXHJcbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cclxuXHJcbiAgICAgIHRoaXMuYWZmaXhlZCA9IGFmZml4XHJcbiAgICAgIHRoaXMudW5waW4gPSBhZmZpeCA9PSAnYm90dG9tJyA/IHRoaXMuZ2V0UGlubmVkT2Zmc2V0KCkgOiBudWxsXHJcblxyXG4gICAgICB0aGlzLiRlbGVtZW50XHJcbiAgICAgICAgLnJlbW92ZUNsYXNzKEFmZml4LlJFU0VUKVxyXG4gICAgICAgIC5hZGRDbGFzcyhhZmZpeFR5cGUpXHJcbiAgICAgICAgLnRyaWdnZXIoYWZmaXhUeXBlLnJlcGxhY2UoJ2FmZml4JywgJ2FmZml4ZWQnKSArICcuYnMuYWZmaXgnKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChhZmZpeCA9PSAnYm90dG9tJykge1xyXG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZnNldCh7XHJcbiAgICAgICAgdG9wOiBzY3JvbGxIZWlnaHQgLSBoZWlnaHQgLSBvZmZzZXRCb3R0b21cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICAvLyBBRkZJWCBQTFVHSU4gREVGSU5JVElPTlxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcclxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcclxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5hZmZpeCcpXHJcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cclxuXHJcbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWZmaXgnLCAoZGF0YSA9IG5ldyBBZmZpeCh0aGlzLCBvcHRpb25zKSkpXHJcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHZhciBvbGQgPSAkLmZuLmFmZml4XHJcblxyXG4gICQuZm4uYWZmaXggICAgICAgICAgICAgPSBQbHVnaW5cclxuICAkLmZuLmFmZml4LkNvbnN0cnVjdG9yID0gQWZmaXhcclxuXHJcblxyXG4gIC8vIEFGRklYIE5PIENPTkZMSUNUXHJcbiAgLy8gPT09PT09PT09PT09PT09PT1cclxuXHJcbiAgJC5mbi5hZmZpeC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJC5mbi5hZmZpeCA9IG9sZFxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG5cclxuICAvLyBBRkZJWCBEQVRBLUFQSVxyXG4gIC8vID09PT09PT09PT09PT09XHJcblxyXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICQoJ1tkYXRhLXNweT1cImFmZml4XCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkc3B5ID0gJCh0aGlzKVxyXG4gICAgICB2YXIgZGF0YSA9ICRzcHkuZGF0YSgpXHJcblxyXG4gICAgICBkYXRhLm9mZnNldCA9IGRhdGEub2Zmc2V0IHx8IHt9XHJcblxyXG4gICAgICBpZiAoZGF0YS5vZmZzZXRCb3R0b20gIT0gbnVsbCkgZGF0YS5vZmZzZXQuYm90dG9tID0gZGF0YS5vZmZzZXRCb3R0b21cclxuICAgICAgaWYgKGRhdGEub2Zmc2V0VG9wICAgICE9IG51bGwpIGRhdGEub2Zmc2V0LnRvcCAgICA9IGRhdGEub2Zmc2V0VG9wXHJcblxyXG4gICAgICBQbHVnaW4uY2FsbCgkc3B5LCBkYXRhKVxyXG4gICAgfSlcclxuICB9KVxyXG5cclxufShqUXVlcnkpO1xyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAqIEJvb3RzdHJhcDogY29sbGFwc2UuanMgdjMuMy43XHJcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2NvbGxhcHNlXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cclxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKiBqc2hpbnQgbGF0ZWRlZjogZmFsc2UgKi9cclxuXHJcbitmdW5jdGlvbiAoJCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgLy8gQ09MTEFQU0UgUFVCTElDIENMQVNTIERFRklOSVRJT05cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICB2YXIgQ29sbGFwc2UgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgdGhpcy4kZWxlbWVudCAgICAgID0gJChlbGVtZW50KVxyXG4gICAgdGhpcy5vcHRpb25zICAgICAgID0gJC5leHRlbmQoe30sIENvbGxhcHNlLkRFRkFVTFRTLCBvcHRpb25zKVxyXG4gICAgdGhpcy4kdHJpZ2dlciAgICAgID0gJCgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1baHJlZj1cIiMnICsgZWxlbWVudC5pZCArICdcIl0sJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXRhcmdldD1cIiMnICsgZWxlbWVudC5pZCArICdcIl0nKVxyXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gbnVsbFxyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbnMucGFyZW50KSB7XHJcbiAgICAgIHRoaXMuJHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuJGVsZW1lbnQsIHRoaXMuJHRyaWdnZXIpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMub3B0aW9ucy50b2dnbGUpIHRoaXMudG9nZ2xlKClcclxuICB9XHJcblxyXG4gIENvbGxhcHNlLlZFUlNJT04gID0gJzMuMy43J1xyXG5cclxuICBDb2xsYXBzZS5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMzUwXHJcblxyXG4gIENvbGxhcHNlLkRFRkFVTFRTID0ge1xyXG4gICAgdG9nZ2xlOiB0cnVlXHJcbiAgfVxyXG5cclxuICBDb2xsYXBzZS5wcm90b3R5cGUuZGltZW5zaW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGhhc1dpZHRoID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnd2lkdGgnKVxyXG4gICAgcmV0dXJuIGhhc1dpZHRoID8gJ3dpZHRoJyA6ICdoZWlnaHQnXHJcbiAgfVxyXG5cclxuICBDb2xsYXBzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLnRyYW5zaXRpb25pbmcgfHwgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaW4nKSkgcmV0dXJuXHJcblxyXG4gICAgdmFyIGFjdGl2ZXNEYXRhXHJcbiAgICB2YXIgYWN0aXZlcyA9IHRoaXMuJHBhcmVudCAmJiB0aGlzLiRwYXJlbnQuY2hpbGRyZW4oJy5wYW5lbCcpLmNoaWxkcmVuKCcuaW4sIC5jb2xsYXBzaW5nJylcclxuXHJcbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xyXG4gICAgICBhY3RpdmVzRGF0YSA9IGFjdGl2ZXMuZGF0YSgnYnMuY29sbGFwc2UnKVxyXG4gICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEudHJhbnNpdGlvbmluZykgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KCdzaG93LmJzLmNvbGxhcHNlJylcclxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KVxyXG4gICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxyXG5cclxuICAgIGlmIChhY3RpdmVzICYmIGFjdGl2ZXMubGVuZ3RoKSB7XHJcbiAgICAgIFBsdWdpbi5jYWxsKGFjdGl2ZXMsICdoaWRlJylcclxuICAgICAgYWN0aXZlc0RhdGEgfHwgYWN0aXZlcy5kYXRhKCdicy5jb2xsYXBzZScsIG51bGwpXHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuZGltZW5zaW9uKClcclxuXHJcbiAgICB0aGlzLiRlbGVtZW50XHJcbiAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2UnKVxyXG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVtkaW1lbnNpb25dKDApXHJcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcclxuXHJcbiAgICB0aGlzLiR0cmlnZ2VyXHJcbiAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2VkJylcclxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxyXG5cclxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDFcclxuXHJcbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRoaXMuJGVsZW1lbnRcclxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNpbmcnKVxyXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UgaW4nKVtkaW1lbnNpb25dKCcnKVxyXG4gICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAwXHJcbiAgICAgIHRoaXMuJGVsZW1lbnRcclxuICAgICAgICAudHJpZ2dlcignc2hvd24uYnMuY29sbGFwc2UnKVxyXG4gICAgfVxyXG5cclxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXHJcblxyXG4gICAgdmFyIHNjcm9sbFNpemUgPSAkLmNhbWVsQ2FzZShbJ3Njcm9sbCcsIGRpbWVuc2lvbl0uam9pbignLScpKVxyXG5cclxuICAgIHRoaXMuJGVsZW1lbnRcclxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXHJcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDb2xsYXBzZS5UUkFOU0lUSU9OX0RVUkFUSU9OKVtkaW1lbnNpb25dKHRoaXMuJGVsZW1lbnRbMF1bc2Nyb2xsU2l6ZV0pXHJcbiAgfVxyXG5cclxuICBDb2xsYXBzZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLnRyYW5zaXRpb25pbmcgfHwgIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHJldHVyblxyXG5cclxuICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudCgnaGlkZS5icy5jb2xsYXBzZScpXHJcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc3RhcnRFdmVudClcclxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cclxuXHJcbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKVxyXG5cclxuICAgIHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0oKSlbMF0ub2Zmc2V0SGVpZ2h0XHJcblxyXG4gICAgdGhpcy4kZWxlbWVudFxyXG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVxyXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlIGluJylcclxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcclxuXHJcbiAgICB0aGlzLiR0cmlnZ2VyXHJcbiAgICAgIC5hZGRDbGFzcygnY29sbGFwc2VkJylcclxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcclxuXHJcbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxXHJcblxyXG4gICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAwXHJcbiAgICAgIHRoaXMuJGVsZW1lbnRcclxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNpbmcnKVxyXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UnKVxyXG4gICAgICAgIC50cmlnZ2VyKCdoaWRkZW4uYnMuY29sbGFwc2UnKVxyXG4gICAgfVxyXG5cclxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXHJcblxyXG4gICAgdGhpcy4kZWxlbWVudFxyXG4gICAgICBbZGltZW5zaW9uXSgwKVxyXG4gICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KGNvbXBsZXRlLCB0aGlzKSlcclxuICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKENvbGxhcHNlLlRSQU5TSVRJT05fRFVSQVRJT04pXHJcbiAgfVxyXG5cclxuICBDb2xsYXBzZS5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpc1t0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpID8gJ2hpZGUnIDogJ3Nob3cnXSgpXHJcbiAgfVxyXG5cclxuICBDb2xsYXBzZS5wcm90b3R5cGUuZ2V0UGFyZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICQodGhpcy5vcHRpb25zLnBhcmVudClcclxuICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtcGFyZW50PVwiJyArIHRoaXMub3B0aW9ucy5wYXJlbnQgKyAnXCJdJylcclxuICAgICAgLmVhY2goJC5wcm94eShmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xyXG4gICAgICAgIHZhciAkZWxlbWVudCA9ICQoZWxlbWVudClcclxuICAgICAgICB0aGlzLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhnZXRUYXJnZXRGcm9tVHJpZ2dlcigkZWxlbWVudCksICRlbGVtZW50KVxyXG4gICAgICB9LCB0aGlzKSlcclxuICAgICAgLmVuZCgpXHJcbiAgfVxyXG5cclxuICBDb2xsYXBzZS5wcm90b3R5cGUuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzID0gZnVuY3Rpb24gKCRlbGVtZW50LCAkdHJpZ2dlcikge1xyXG4gICAgdmFyIGlzT3BlbiA9ICRlbGVtZW50Lmhhc0NsYXNzKCdpbicpXHJcblxyXG4gICAgJGVsZW1lbnQuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT3BlbilcclxuICAgICR0cmlnZ2VyXHJcbiAgICAgIC50b2dnbGVDbGFzcygnY29sbGFwc2VkJywgIWlzT3BlbilcclxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXRUYXJnZXRGcm9tVHJpZ2dlcigkdHJpZ2dlcikge1xyXG4gICAgdmFyIGhyZWZcclxuICAgIHZhciB0YXJnZXQgPSAkdHJpZ2dlci5hdHRyKCdkYXRhLXRhcmdldCcpXHJcbiAgICAgIHx8IChocmVmID0gJHRyaWdnZXIuYXR0cignaHJlZicpKSAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XHJcblxyXG4gICAgcmV0dXJuICQodGFyZ2V0KVxyXG4gIH1cclxuXHJcblxyXG4gIC8vIENPTExBUFNFIFBMVUdJTiBERUZJTklUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xyXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxyXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLmNvbGxhcHNlJylcclxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQ29sbGFwc2UuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXHJcblxyXG4gICAgICBpZiAoIWRhdGEgJiYgb3B0aW9ucy50b2dnbGUgJiYgL3Nob3d8aGlkZS8udGVzdChvcHRpb24pKSBvcHRpb25zLnRvZ2dsZSA9IGZhbHNlXHJcbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuY29sbGFwc2UnLCAoZGF0YSA9IG5ldyBDb2xsYXBzZSh0aGlzLCBvcHRpb25zKSkpXHJcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHZhciBvbGQgPSAkLmZuLmNvbGxhcHNlXHJcblxyXG4gICQuZm4uY29sbGFwc2UgICAgICAgICAgICAgPSBQbHVnaW5cclxuICAkLmZuLmNvbGxhcHNlLkNvbnN0cnVjdG9yID0gQ29sbGFwc2VcclxuXHJcblxyXG4gIC8vIENPTExBUFNFIE5PIENPTkZMSUNUXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgJC5mbi5jb2xsYXBzZS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJC5mbi5jb2xsYXBzZSA9IG9sZFxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG5cclxuICAvLyBDT0xMQVBTRSBEQVRBLUFQSVxyXG4gIC8vID09PT09PT09PT09PT09PT09XHJcblxyXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5jb2xsYXBzZS5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXScsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcclxuXHJcbiAgICBpZiAoISR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykpIGUucHJldmVudERlZmF1bHQoKVxyXG5cclxuICAgIHZhciAkdGFyZ2V0ID0gZ2V0VGFyZ2V0RnJvbVRyaWdnZXIoJHRoaXMpXHJcbiAgICB2YXIgZGF0YSAgICA9ICR0YXJnZXQuZGF0YSgnYnMuY29sbGFwc2UnKVxyXG4gICAgdmFyIG9wdGlvbiAgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdGhpcy5kYXRhKClcclxuXHJcbiAgICBQbHVnaW4uY2FsbCgkdGFyZ2V0LCBvcHRpb24pXHJcbiAgfSlcclxuXHJcbn0oalF1ZXJ5KTtcclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBCb290c3RyYXA6IHNjcm9sbHNweS5qcyB2My4zLjdcclxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jc2Nyb2xsc3B5XHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cclxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcclxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG5cclxuK2Z1bmN0aW9uICgkKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAvLyBTQ1JPTExTUFkgQ0xBU1MgREVGSU5JVElPTlxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIGZ1bmN0aW9uIFNjcm9sbFNweShlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLiRib2R5ICAgICAgICAgID0gJChkb2N1bWVudC5ib2R5KVxyXG4gICAgdGhpcy4kc2Nyb2xsRWxlbWVudCA9ICQoZWxlbWVudCkuaXMoZG9jdW1lbnQuYm9keSkgPyAkKHdpbmRvdykgOiAkKGVsZW1lbnQpXHJcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgID0gJC5leHRlbmQoe30sIFNjcm9sbFNweS5ERUZBVUxUUywgb3B0aW9ucylcclxuICAgIHRoaXMuc2VsZWN0b3IgICAgICAgPSAodGhpcy5vcHRpb25zLnRhcmdldCB8fCAnJykgKyAnIC5uYXYgbGkgPiBhJ1xyXG4gICAgdGhpcy5vZmZzZXRzICAgICAgICA9IFtdXHJcbiAgICB0aGlzLnRhcmdldHMgICAgICAgID0gW11cclxuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ICAgPSBudWxsXHJcbiAgICB0aGlzLnNjcm9sbEhlaWdodCAgID0gMFxyXG5cclxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQub24oJ3Njcm9sbC5icy5zY3JvbGxzcHknLCAkLnByb3h5KHRoaXMucHJvY2VzcywgdGhpcykpXHJcbiAgICB0aGlzLnJlZnJlc2goKVxyXG4gICAgdGhpcy5wcm9jZXNzKClcclxuICB9XHJcblxyXG4gIFNjcm9sbFNweS5WRVJTSU9OICA9ICczLjMuNydcclxuXHJcbiAgU2Nyb2xsU3B5LkRFRkFVTFRTID0ge1xyXG4gICAgb2Zmc2V0OiAxMFxyXG4gIH1cclxuXHJcbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kc2Nyb2xsRWxlbWVudFswXS5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgodGhpcy4kYm9keVswXS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpXHJcbiAgfVxyXG5cclxuICBTY3JvbGxTcHkucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdGhhdCAgICAgICAgICA9IHRoaXNcclxuICAgIHZhciBvZmZzZXRNZXRob2QgID0gJ29mZnNldCdcclxuICAgIHZhciBvZmZzZXRCYXNlICAgID0gMFxyXG5cclxuICAgIHRoaXMub2Zmc2V0cyAgICAgID0gW11cclxuICAgIHRoaXMudGFyZ2V0cyAgICAgID0gW11cclxuICAgIHRoaXMuc2Nyb2xsSGVpZ2h0ID0gdGhpcy5nZXRTY3JvbGxIZWlnaHQoKVxyXG5cclxuICAgIGlmICghJC5pc1dpbmRvdyh0aGlzLiRzY3JvbGxFbGVtZW50WzBdKSkge1xyXG4gICAgICBvZmZzZXRNZXRob2QgPSAncG9zaXRpb24nXHJcbiAgICAgIG9mZnNldEJhc2UgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKClcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiRib2R5XHJcbiAgICAgIC5maW5kKHRoaXMuc2VsZWN0b3IpXHJcbiAgICAgIC5tYXAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciAkZWwgICA9ICQodGhpcylcclxuICAgICAgICB2YXIgaHJlZiAgPSAkZWwuZGF0YSgndGFyZ2V0JykgfHwgJGVsLmF0dHIoJ2hyZWYnKVxyXG4gICAgICAgIHZhciAkaHJlZiA9IC9eIy4vLnRlc3QoaHJlZikgJiYgJChocmVmKVxyXG5cclxuICAgICAgICByZXR1cm4gKCRocmVmXHJcbiAgICAgICAgICAmJiAkaHJlZi5sZW5ndGhcclxuICAgICAgICAgICYmICRocmVmLmlzKCc6dmlzaWJsZScpXHJcbiAgICAgICAgICAmJiBbWyRocmVmW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLCBocmVmXV0pIHx8IG51bGxcclxuICAgICAgfSlcclxuICAgICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGFbMF0gLSBiWzBdIH0pXHJcbiAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGF0Lm9mZnNldHMucHVzaCh0aGlzWzBdKVxyXG4gICAgICAgIHRoYXQudGFyZ2V0cy5wdXNoKHRoaXNbMV0pXHJcbiAgICAgIH0pXHJcbiAgfVxyXG5cclxuICBTY3JvbGxTcHkucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2Nyb2xsVG9wICAgID0gdGhpcy4kc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3AoKSArIHRoaXMub3B0aW9ucy5vZmZzZXRcclxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSB0aGlzLmdldFNjcm9sbEhlaWdodCgpXHJcbiAgICB2YXIgbWF4U2Nyb2xsICAgID0gdGhpcy5vcHRpb25zLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuJHNjcm9sbEVsZW1lbnQuaGVpZ2h0KClcclxuICAgIHZhciBvZmZzZXRzICAgICAgPSB0aGlzLm9mZnNldHNcclxuICAgIHZhciB0YXJnZXRzICAgICAgPSB0aGlzLnRhcmdldHNcclxuICAgIHZhciBhY3RpdmVUYXJnZXQgPSB0aGlzLmFjdGl2ZVRhcmdldFxyXG4gICAgdmFyIGlcclxuXHJcbiAgICBpZiAodGhpcy5zY3JvbGxIZWlnaHQgIT0gc2Nyb2xsSGVpZ2h0KSB7XHJcbiAgICAgIHRoaXMucmVmcmVzaCgpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNjcm9sbFRvcCA+PSBtYXhTY3JvbGwpIHtcclxuICAgICAgcmV0dXJuIGFjdGl2ZVRhcmdldCAhPSAoaSA9IHRhcmdldHNbdGFyZ2V0cy5sZW5ndGggLSAxXSkgJiYgdGhpcy5hY3RpdmF0ZShpKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChhY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgb2Zmc2V0c1swXSkge1xyXG4gICAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IG51bGxcclxuICAgICAgcmV0dXJuIHRoaXMuY2xlYXIoKVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAoaSA9IG9mZnNldHMubGVuZ3RoOyBpLS07KSB7XHJcbiAgICAgIGFjdGl2ZVRhcmdldCAhPSB0YXJnZXRzW2ldXHJcbiAgICAgICAgJiYgc2Nyb2xsVG9wID49IG9mZnNldHNbaV1cclxuICAgICAgICAmJiAob2Zmc2V0c1tpICsgMV0gPT09IHVuZGVmaW5lZCB8fCBzY3JvbGxUb3AgPCBvZmZzZXRzW2kgKyAxXSlcclxuICAgICAgICAmJiB0aGlzLmFjdGl2YXRlKHRhcmdldHNbaV0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBTY3JvbGxTcHkucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgdGhpcy5hY3RpdmVUYXJnZXQgPSB0YXJnZXRcclxuXHJcbiAgICB0aGlzLmNsZWFyKClcclxuXHJcbiAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yICtcclxuICAgICAgJ1tkYXRhLXRhcmdldD1cIicgKyB0YXJnZXQgKyAnXCJdLCcgK1xyXG4gICAgICB0aGlzLnNlbGVjdG9yICsgJ1tocmVmPVwiJyArIHRhcmdldCArICdcIl0nXHJcblxyXG4gICAgdmFyIGFjdGl2ZSA9ICQoc2VsZWN0b3IpXHJcbiAgICAgIC5wYXJlbnRzKCdsaScpXHJcbiAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcclxuXHJcbiAgICBpZiAoYWN0aXZlLnBhcmVudCgnLmRyb3Bkb3duLW1lbnUnKS5sZW5ndGgpIHtcclxuICAgICAgYWN0aXZlID0gYWN0aXZlXHJcbiAgICAgICAgLmNsb3Nlc3QoJ2xpLmRyb3Bkb3duJylcclxuICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXHJcbiAgICB9XHJcblxyXG4gICAgYWN0aXZlLnRyaWdnZXIoJ2FjdGl2YXRlLmJzLnNjcm9sbHNweScpXHJcbiAgfVxyXG5cclxuICBTY3JvbGxTcHkucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJCh0aGlzLnNlbGVjdG9yKVxyXG4gICAgICAucGFyZW50c1VudGlsKHRoaXMub3B0aW9ucy50YXJnZXQsICcuYWN0aXZlJylcclxuICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxyXG4gIH1cclxuXHJcblxyXG4gIC8vIFNDUk9MTFNQWSBQTFVHSU4gREVGSU5JVElPTlxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXHJcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuc2Nyb2xsc3B5JylcclxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxyXG5cclxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknLCAoZGF0YSA9IG5ldyBTY3JvbGxTcHkodGhpcywgb3B0aW9ucykpKVxyXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICB2YXIgb2xkID0gJC5mbi5zY3JvbGxzcHlcclxuXHJcbiAgJC5mbi5zY3JvbGxzcHkgICAgICAgICAgICAgPSBQbHVnaW5cclxuICAkLmZuLnNjcm9sbHNweS5Db25zdHJ1Y3RvciA9IFNjcm9sbFNweVxyXG5cclxuXHJcbiAgLy8gU0NST0xMU1BZIE5PIENPTkZMSUNUXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICQuZm4uc2Nyb2xsc3B5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAkLmZuLnNjcm9sbHNweSA9IG9sZFxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG5cclxuICAvLyBTQ1JPTExTUFkgREFUQS1BUElcclxuICAvLyA9PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgJCh3aW5kb3cpLm9uKCdsb2FkLmJzLnNjcm9sbHNweS5kYXRhLWFwaScsIGZ1bmN0aW9uICgpIHtcclxuICAgICQoJ1tkYXRhLXNweT1cInNjcm9sbFwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcclxuICAgICAgUGx1Z2luLmNhbGwoJHNweSwgJHNweS5kYXRhKCkpXHJcbiAgICB9KVxyXG4gIH0pXHJcblxyXG59KGpRdWVyeSk7XHJcblxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQm9vdHN0cmFwOiB0cmFuc2l0aW9uLmpzIHYzLjMuN1xyXG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyN0cmFuc2l0aW9uc1xyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuXHJcbitmdW5jdGlvbiAoJCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgLy8gQ1NTIFRSQU5TSVRJT04gU1VQUE9SVCAoU2hvdXRvdXQ6IGh0dHA6Ly93d3cubW9kZXJuaXpyLmNvbS8pXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoKSB7XHJcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdib290c3RyYXAnKVxyXG5cclxuICAgIHZhciB0cmFuc0VuZEV2ZW50TmFtZXMgPSB7XHJcbiAgICAgIFdlYmtpdFRyYW5zaXRpb24gOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXHJcbiAgICAgIE1velRyYW5zaXRpb24gICAgOiAndHJhbnNpdGlvbmVuZCcsXHJcbiAgICAgIE9UcmFuc2l0aW9uICAgICAgOiAnb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQnLFxyXG4gICAgICB0cmFuc2l0aW9uICAgICAgIDogJ3RyYW5zaXRpb25lbmQnXHJcbiAgICB9XHJcblxyXG4gICAgZm9yICh2YXIgbmFtZSBpbiB0cmFuc0VuZEV2ZW50TmFtZXMpIHtcclxuICAgICAgaWYgKGVsLnN0eWxlW25hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4geyBlbmQ6IHRyYW5zRW5kRXZlbnROYW1lc1tuYW1lXSB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2UgLy8gZXhwbGljaXQgZm9yIGllOCAoICAuXy4pXHJcbiAgfVxyXG5cclxuICAvLyBodHRwOi8vYmxvZy5hbGV4bWFjY2F3LmNvbS9jc3MtdHJhbnNpdGlvbnNcclxuICAkLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XHJcbiAgICB2YXIgY2FsbGVkID0gZmFsc2VcclxuICAgIHZhciAkZWwgPSB0aGlzXHJcbiAgICAkKHRoaXMpLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkgeyBjYWxsZWQgPSB0cnVlIH0pXHJcbiAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7IGlmICghY2FsbGVkKSAkKCRlbCkudHJpZ2dlcigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpIH1cclxuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIGR1cmF0aW9uKVxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG4gICQoZnVuY3Rpb24gKCkge1xyXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRW5kKClcclxuXHJcbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm5cclxuXHJcbiAgICAkLmV2ZW50LnNwZWNpYWwuYnNUcmFuc2l0aW9uRW5kID0ge1xyXG4gICAgICBiaW5kVHlwZTogJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLFxyXG4gICAgICBkZWxlZ2F0ZVR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxcclxuICAgICAgaGFuZGxlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyh0aGlzKSkgcmV0dXJuIGUuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSlcclxuXHJcbn0oalF1ZXJ5KTtcclxuLy8gSW9uLlJhbmdlU2xpZGVyXHJcbi8vIHZlcnNpb24gMi4yLjAgQnVpbGQ6IDM4MFxyXG4vLyDCqSBEZW5pcyBJbmVzaGluLCAyMDE3XHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Jb25EZW5cclxuLy9cclxuLy8gUHJvamVjdCBwYWdlOiAgICBodHRwOi8vaW9uZGVuLmNvbS9hL3BsdWdpbnMvaW9uLnJhbmdlU2xpZGVyL2VuLmh0bWxcclxuLy8gR2l0SHViIHBhZ2U6ICAgICBodHRwczovL2dpdGh1Yi5jb20vSW9uRGVuL2lvbi5yYW5nZVNsaWRlclxyXG4vL1xyXG4vLyBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5jZTpcclxuLy8gaHR0cDovL2lvbmRlbi5jb20vYS9wbHVnaW5zL2xpY2VuY2UtZW4uaHRtbFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gSW9uLlJhbmdlU2xpZGVyXHJcbi8vIHZlcnNpb24gMi4yLjAgQnVpbGQ6IDM4MFxyXG4vLyDCqSBEZW5pcyBJbmVzaGluLCAyMDE3XHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Jb25EZW5cclxuLy9cclxuLy8gUHJvamVjdCBwYWdlOiAgICBodHRwOi8vaW9uZGVuLmNvbS9hL3BsdWdpbnMvaW9uLnJhbmdlU2xpZGVyL2VuLmh0bWxcclxuLy8gR2l0SHViIHBhZ2U6ICAgICBodHRwczovL2dpdGh1Yi5jb20vSW9uRGVuL2lvbi5yYW5nZVNsaWRlclxyXG4vL1xyXG4vLyBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5jZTpcclxuLy8gaHR0cDovL2lvbmRlbi5jb20vYS9wbHVnaW5zL2xpY2VuY2UtZW4uaHRtbFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbjsoZnVuY3Rpb24oZmFjdG9yeSkge1xyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgZGVmaW5lKFtcImpxdWVyeVwiXSwgZnVuY3Rpb24gKGpRdWVyeSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFjdG9yeShqUXVlcnksIGRvY3VtZW50LCB3aW5kb3csIG5hdmlnYXRvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgZmFjdG9yeShyZXF1aXJlKFwianF1ZXJ5XCIpLCBkb2N1bWVudCwgd2luZG93LCBuYXZpZ2F0b3IpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmYWN0b3J5KGpRdWVyeSwgZG9jdW1lbnQsIHdpbmRvdywgbmF2aWdhdG9yKTtcclxuICAgIH1cclxufSAoZnVuY3Rpb24gKCQsIGRvY3VtZW50LCB3aW5kb3csIG5hdmlnYXRvciwgdW5kZWZpbmVkKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgLy8gU2VydmljZVxyXG5cclxuICAgIHZhciBwbHVnaW5fY291bnQgPSAwO1xyXG5cclxuICAgIC8vIElFOCBmaXhcclxuICAgIHZhciBpc19vbGRfaWUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuID0gbmF2aWdhdG9yLnVzZXJBZ2VudCxcclxuICAgICAgICAgICAgciA9IC9tc2llXFxzXFxkKy9pLFxyXG4gICAgICAgICAgICB2O1xyXG4gICAgICAgIGlmIChuLnNlYXJjaChyKSA+IDApIHtcclxuICAgICAgICAgICAgdiA9IHIuZXhlYyhuKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB2ID0gdi5zcGxpdChcIiBcIilbMV07XHJcbiAgICAgICAgICAgIGlmICh2IDwgOSkge1xyXG4gICAgICAgICAgICAgICAgJChcImh0bWxcIikuYWRkQ2xhc3MoXCJsdC1pZTlcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9ICgpKTtcclxuICAgIGlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcclxuICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIGJpbmQodGhhdCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBzbGljZSA9IFtdLnNsaWNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxyXG4gICAgICAgICAgICAgICAgYm91bmQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBGID0gZnVuY3Rpb24oKXt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBGLnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gbmV3IEYoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBib3VuZDtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xyXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24oc2VhcmNoRWxlbWVudCwgZnJvbUluZGV4KSB7XHJcbiAgICAgICAgICAgIHZhciBrO1xyXG4gICAgICAgICAgICBpZiAodGhpcyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInRoaXNcIiBpcyBudWxsIG9yIG5vdCBkZWZpbmVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIE8gPSBPYmplY3QodGhpcyk7XHJcbiAgICAgICAgICAgIHZhciBsZW4gPSBPLmxlbmd0aCA+Pj4gMDtcclxuICAgICAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBuID0gK2Zyb21JbmRleCB8fCAwO1xyXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMobikgPT09IEluZmluaXR5KSB7XHJcbiAgICAgICAgICAgICAgICBuID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobiA+PSBsZW4pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBrID0gTWF0aC5tYXgobiA+PSAwID8gbiA6IGxlbiAtIE1hdGguYWJzKG4pLCAwKTtcclxuICAgICAgICAgICAgd2hpbGUgKGsgPCBsZW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChrIGluIE8gJiYgT1trXSA9PT0gc2VhcmNoRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaysrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIC8vIFRlbXBsYXRlXHJcblxyXG4gICAgdmFyIGJhc2VfaHRtbCA9XHJcbiAgICAgICAgJzxzcGFuIGNsYXNzPVwiaXJzXCI+JyArXHJcbiAgICAgICAgJzxzcGFuIGNsYXNzPVwiaXJzLWxpbmVcIiB0YWJpbmRleD1cIjBcIj48c3BhbiBjbGFzcz1cImlycy1saW5lLWxlZnRcIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJpcnMtbGluZS1taWRcIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJpcnMtbGluZS1yaWdodFwiPjwvc3Bhbj48L3NwYW4+JyArXHJcbiAgICAgICAgJzxzcGFuIGNsYXNzPVwiaXJzLW1pblwiPjA8L3NwYW4+PHNwYW4gY2xhc3M9XCJpcnMtbWF4XCI+MTwvc3Bhbj4nICtcclxuICAgICAgICAnPHNwYW4gY2xhc3M9XCJpcnMtZnJvbVwiPjA8L3NwYW4+PHNwYW4gY2xhc3M9XCJpcnMtdG9cIj4wPC9zcGFuPjxzcGFuIGNsYXNzPVwiaXJzLXNpbmdsZVwiPjA8L3NwYW4+JyArXHJcbiAgICAgICAgJzwvc3Bhbj4nICtcclxuICAgICAgICAnPHNwYW4gY2xhc3M9XCJpcnMtZ3JpZFwiPjwvc3Bhbj4nICtcclxuICAgICAgICAnPHNwYW4gY2xhc3M9XCJpcnMtYmFyXCI+PC9zcGFuPic7XHJcblxyXG4gICAgdmFyIHNpbmdsZV9odG1sID1cclxuICAgICAgICAnPHNwYW4gY2xhc3M9XCJpcnMtYmFyLWVkZ2VcIj48L3NwYW4+JyArXHJcbiAgICAgICAgJzxzcGFuIGNsYXNzPVwiaXJzLXNoYWRvdyBzaGFkb3ctc2luZ2xlXCI+PC9zcGFuPicgK1xyXG4gICAgICAgICc8c3BhbiBjbGFzcz1cImlycy1zbGlkZXIgc2luZ2xlXCI+PC9zcGFuPic7XHJcblxyXG4gICAgdmFyIGRvdWJsZV9odG1sID1cclxuICAgICAgICAnPHNwYW4gY2xhc3M9XCJpcnMtc2hhZG93IHNoYWRvdy1mcm9tXCI+PC9zcGFuPicgK1xyXG4gICAgICAgICc8c3BhbiBjbGFzcz1cImlycy1zaGFkb3cgc2hhZG93LXRvXCI+PC9zcGFuPicgK1xyXG4gICAgICAgICc8c3BhbiBjbGFzcz1cImlycy1zbGlkZXIgZnJvbVwiPjwvc3Bhbj4nICtcclxuICAgICAgICAnPHNwYW4gY2xhc3M9XCJpcnMtc2xpZGVyIHRvXCI+PC9zcGFuPic7XHJcblxyXG4gICAgdmFyIGRpc2FibGVfaHRtbCA9XHJcbiAgICAgICAgJzxzcGFuIGNsYXNzPVwiaXJzLWRpc2FibGUtbWFza1wiPjwvc3Bhbj4nO1xyXG5cclxuXHJcblxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIC8vIENvcmVcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1haW4gcGx1Z2luIGNvbnN0cnVjdG9yXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlucHV0IHtPYmplY3R9IGxpbmsgdG8gYmFzZSBpbnB1dCBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fSBzbGlkZXIgY29uZmlnXHJcbiAgICAgKiBAcGFyYW0gcGx1Z2luX2NvdW50IHtOdW1iZXJ9XHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgdmFyIElvblJhbmdlU2xpZGVyID0gZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zLCBwbHVnaW5fY291bnQpIHtcclxuICAgICAgICB0aGlzLlZFUlNJT04gPSBcIjIuMi4wXCI7XHJcbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xyXG4gICAgICAgIHRoaXMucGx1Z2luX2NvdW50ID0gcGx1Z2luX2NvdW50O1xyXG4gICAgICAgIHRoaXMuY3VycmVudF9wbHVnaW4gPSAwO1xyXG4gICAgICAgIHRoaXMuY2FsY19jb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy51cGRhdGVfdG0gPSAwO1xyXG4gICAgICAgIHRoaXMub2xkX2Zyb20gPSAwO1xyXG4gICAgICAgIHRoaXMub2xkX3RvID0gMDtcclxuICAgICAgICB0aGlzLm9sZF9taW5faW50ZXJ2YWwgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucmFmX2lkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmRyYWdnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5mb3JjZV9yZWRyYXcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm5vX2RpYXBhc29uID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5oYXNfdGFiX2luZGV4ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlzX2tleSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNfdXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc19zdGFydCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pc19maW5pc2ggPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzX2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNfcmVzaXplID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc19jbGljayA9IGZhbHNlO1xyXG5cclxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgICAgICAgLy8gY2FjaGUgZm9yIGxpbmtzIHRvIGFsbCBET00gZWxlbWVudHNcclxuICAgICAgICB0aGlzLiRjYWNoZSA9IHtcclxuICAgICAgICAgICAgd2luOiAkKHdpbmRvdyksXHJcbiAgICAgICAgICAgIGJvZHk6ICQoZG9jdW1lbnQuYm9keSksXHJcbiAgICAgICAgICAgIGlucHV0OiAkKGlucHV0KSxcclxuICAgICAgICAgICAgY29udDogbnVsbCxcclxuICAgICAgICAgICAgcnM6IG51bGwsXHJcbiAgICAgICAgICAgIG1pbjogbnVsbCxcclxuICAgICAgICAgICAgbWF4OiBudWxsLFxyXG4gICAgICAgICAgICBmcm9tOiBudWxsLFxyXG4gICAgICAgICAgICB0bzogbnVsbCxcclxuICAgICAgICAgICAgc2luZ2xlOiBudWxsLFxyXG4gICAgICAgICAgICBiYXI6IG51bGwsXHJcbiAgICAgICAgICAgIGxpbmU6IG51bGwsXHJcbiAgICAgICAgICAgIHNfc2luZ2xlOiBudWxsLFxyXG4gICAgICAgICAgICBzX2Zyb206IG51bGwsXHJcbiAgICAgICAgICAgIHNfdG86IG51bGwsXHJcbiAgICAgICAgICAgIHNoYWRfc2luZ2xlOiBudWxsLFxyXG4gICAgICAgICAgICBzaGFkX2Zyb206IG51bGwsXHJcbiAgICAgICAgICAgIHNoYWRfdG86IG51bGwsXHJcbiAgICAgICAgICAgIGVkZ2U6IG51bGwsXHJcbiAgICAgICAgICAgIGdyaWQ6IG51bGwsXHJcbiAgICAgICAgICAgIGdyaWRfbGFiZWxzOiBbXVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHN0b3JhZ2UgZm9yIG1lYXN1cmUgdmFyaWFibGVzXHJcbiAgICAgICAgdGhpcy5jb29yZHMgPSB7XHJcbiAgICAgICAgICAgIC8vIGxlZnRcclxuICAgICAgICAgICAgeF9nYXA6IDAsXHJcbiAgICAgICAgICAgIHhfcG9pbnRlcjogMCxcclxuXHJcbiAgICAgICAgICAgIC8vIHdpZHRoXHJcbiAgICAgICAgICAgIHdfcnM6IDAsXHJcbiAgICAgICAgICAgIHdfcnNfb2xkOiAwLFxyXG4gICAgICAgICAgICB3X2hhbmRsZTogMCxcclxuXHJcbiAgICAgICAgICAgIC8vIHBlcmNlbnRzXHJcbiAgICAgICAgICAgIHBfZ2FwOiAwLFxyXG4gICAgICAgICAgICBwX2dhcF9sZWZ0OiAwLFxyXG4gICAgICAgICAgICBwX2dhcF9yaWdodDogMCxcclxuICAgICAgICAgICAgcF9zdGVwOiAwLFxyXG4gICAgICAgICAgICBwX3BvaW50ZXI6IDAsXHJcbiAgICAgICAgICAgIHBfaGFuZGxlOiAwLFxyXG4gICAgICAgICAgICBwX3NpbmdsZV9mYWtlOiAwLFxyXG4gICAgICAgICAgICBwX3NpbmdsZV9yZWFsOiAwLFxyXG4gICAgICAgICAgICBwX2Zyb21fZmFrZTogMCxcclxuICAgICAgICAgICAgcF9mcm9tX3JlYWw6IDAsXHJcbiAgICAgICAgICAgIHBfdG9fZmFrZTogMCxcclxuICAgICAgICAgICAgcF90b19yZWFsOiAwLFxyXG4gICAgICAgICAgICBwX2Jhcl94OiAwLFxyXG4gICAgICAgICAgICBwX2Jhcl93OiAwLFxyXG5cclxuICAgICAgICAgICAgLy8gZ3JpZFxyXG4gICAgICAgICAgICBncmlkX2dhcDogMCxcclxuICAgICAgICAgICAgYmlnX251bTogMCxcclxuICAgICAgICAgICAgYmlnOiBbXSxcclxuICAgICAgICAgICAgYmlnX3c6IFtdLFxyXG4gICAgICAgICAgICBiaWdfcDogW10sXHJcbiAgICAgICAgICAgIGJpZ194OiBbXVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHN0b3JhZ2UgZm9yIGxhYmVscyBtZWFzdXJlIHZhcmlhYmxlc1xyXG4gICAgICAgIHRoaXMubGFiZWxzID0ge1xyXG4gICAgICAgICAgICAvLyB3aWR0aFxyXG4gICAgICAgICAgICB3X21pbjogMCxcclxuICAgICAgICAgICAgd19tYXg6IDAsXHJcbiAgICAgICAgICAgIHdfZnJvbTogMCxcclxuICAgICAgICAgICAgd190bzogMCxcclxuICAgICAgICAgICAgd19zaW5nbGU6IDAsXHJcblxyXG4gICAgICAgICAgICAvLyBwZXJjZW50c1xyXG4gICAgICAgICAgICBwX21pbjogMCxcclxuICAgICAgICAgICAgcF9tYXg6IDAsXHJcbiAgICAgICAgICAgIHBfZnJvbV9mYWtlOiAwLFxyXG4gICAgICAgICAgICBwX2Zyb21fbGVmdDogMCxcclxuICAgICAgICAgICAgcF90b19mYWtlOiAwLFxyXG4gICAgICAgICAgICBwX3RvX2xlZnQ6IDAsXHJcbiAgICAgICAgICAgIHBfc2luZ2xlX2Zha2U6IDAsXHJcbiAgICAgICAgICAgIHBfc2luZ2xlX2xlZnQ6IDBcclxuICAgICAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGdldCBhbmQgdmFsaWRhdGUgY29uZmlnXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyICRpbnAgPSB0aGlzLiRjYWNoZS5pbnB1dCxcclxuICAgICAgICAgICAgdmFsID0gJGlucC5wcm9wKFwidmFsdWVcIiksXHJcbiAgICAgICAgICAgIGNvbmZpZywgY29uZmlnX2Zyb21fZGF0YSwgcHJvcDtcclxuXHJcbiAgICAgICAgLy8gZGVmYXVsdCBjb25maWdcclxuICAgICAgICBjb25maWcgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic2luZ2xlXCIsXHJcblxyXG4gICAgICAgICAgICBtaW46IDEwLFxyXG4gICAgICAgICAgICBtYXg6IDEwMCxcclxuICAgICAgICAgICAgZnJvbTogbnVsbCxcclxuICAgICAgICAgICAgdG86IG51bGwsXHJcbiAgICAgICAgICAgIHN0ZXA6IDEsXHJcblxyXG4gICAgICAgICAgICBtaW5faW50ZXJ2YWw6IDAsXHJcbiAgICAgICAgICAgIG1heF9pbnRlcnZhbDogMCxcclxuICAgICAgICAgICAgZHJhZ19pbnRlcnZhbDogZmFsc2UsXHJcblxyXG4gICAgICAgICAgICB2YWx1ZXM6IFtdLFxyXG4gICAgICAgICAgICBwX3ZhbHVlczogW10sXHJcblxyXG4gICAgICAgICAgICBmcm9tX2ZpeGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgZnJvbV9taW46IG51bGwsXHJcbiAgICAgICAgICAgIGZyb21fbWF4OiBudWxsLFxyXG4gICAgICAgICAgICBmcm9tX3NoYWRvdzogZmFsc2UsXHJcblxyXG4gICAgICAgICAgICB0b19maXhlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHRvX21pbjogbnVsbCxcclxuICAgICAgICAgICAgdG9fbWF4OiBudWxsLFxyXG4gICAgICAgICAgICB0b19zaGFkb3c6IGZhbHNlLFxyXG5cclxuICAgICAgICAgICAgcHJldHRpZnlfZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgcHJldHRpZnlfc2VwYXJhdG9yOiBcIiBcIixcclxuICAgICAgICAgICAgcHJldHRpZnk6IG51bGwsXHJcblxyXG4gICAgICAgICAgICBmb3JjZV9lZGdlczogZmFsc2UsXHJcblxyXG4gICAgICAgICAgICBrZXlib2FyZDogdHJ1ZSxcclxuXHJcbiAgICAgICAgICAgIGdyaWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBncmlkX21hcmdpbjogdHJ1ZSxcclxuICAgICAgICAgICAgZ3JpZF9udW06IDQsXHJcbiAgICAgICAgICAgIGdyaWRfc25hcDogZmFsc2UsXHJcblxyXG4gICAgICAgICAgICBoaWRlX21pbl9tYXg6IGZhbHNlLFxyXG4gICAgICAgICAgICBoaWRlX2Zyb21fdG86IGZhbHNlLFxyXG5cclxuICAgICAgICAgICAgcHJlZml4OiBcIlwiLFxyXG4gICAgICAgICAgICBwb3N0Zml4OiBcIlwiLFxyXG4gICAgICAgICAgICBtYXhfcG9zdGZpeDogXCJcIixcclxuICAgICAgICAgICAgZGVjb3JhdGVfYm90aDogdHJ1ZSxcclxuICAgICAgICAgICAgdmFsdWVzX3NlcGFyYXRvcjogXCIg4oCUIFwiLFxyXG5cclxuICAgICAgICAgICAgaW5wdXRfdmFsdWVzX3NlcGFyYXRvcjogXCI7XCIsXHJcblxyXG4gICAgICAgICAgICBkaXNhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgYmxvY2s6IGZhbHNlLFxyXG5cclxuICAgICAgICAgICAgZXh0cmFfY2xhc3NlczogXCJcIixcclxuXHJcbiAgICAgICAgICAgIHNjb3BlOiBudWxsLFxyXG4gICAgICAgICAgICBvblN0YXJ0OiBudWxsLFxyXG4gICAgICAgICAgICBvbkNoYW5nZTogbnVsbCxcclxuICAgICAgICAgICAgb25GaW5pc2g6IG51bGwsXHJcbiAgICAgICAgICAgIG9uVXBkYXRlOiBudWxsXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGlmIGJhc2UgZWxlbWVudCBpcyBpbnB1dFxyXG4gICAgICAgIGlmICgkaW5wWzBdLm5vZGVOYW1lICE9PSBcIklOUFVUXCIpIHtcclxuICAgICAgICAgICAgY29uc29sZSAmJiBjb25zb2xlLndhcm4gJiYgY29uc29sZS53YXJuKFwiQmFzZSBlbGVtZW50IHNob3VsZCBiZSA8aW5wdXQ+IVwiLCAkaW5wWzBdKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLyBjb25maWcgZnJvbSBkYXRhLWF0dHJpYnV0ZXMgZXh0ZW5kcyBqcyBjb25maWdcclxuICAgICAgICBjb25maWdfZnJvbV9kYXRhID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAkaW5wLmRhdGEoXCJ0eXBlXCIpLFxyXG5cclxuICAgICAgICAgICAgbWluOiAkaW5wLmRhdGEoXCJtaW5cIiksXHJcbiAgICAgICAgICAgIG1heDogJGlucC5kYXRhKFwibWF4XCIpLFxyXG4gICAgICAgICAgICBmcm9tOiAkaW5wLmRhdGEoXCJmcm9tXCIpLFxyXG4gICAgICAgICAgICB0bzogJGlucC5kYXRhKFwidG9cIiksXHJcbiAgICAgICAgICAgIHN0ZXA6ICRpbnAuZGF0YShcInN0ZXBcIiksXHJcblxyXG4gICAgICAgICAgICBtaW5faW50ZXJ2YWw6ICRpbnAuZGF0YShcIm1pbkludGVydmFsXCIpLFxyXG4gICAgICAgICAgICBtYXhfaW50ZXJ2YWw6ICRpbnAuZGF0YShcIm1heEludGVydmFsXCIpLFxyXG4gICAgICAgICAgICBkcmFnX2ludGVydmFsOiAkaW5wLmRhdGEoXCJkcmFnSW50ZXJ2YWxcIiksXHJcblxyXG4gICAgICAgICAgICB2YWx1ZXM6ICRpbnAuZGF0YShcInZhbHVlc1wiKSxcclxuXHJcbiAgICAgICAgICAgIGZyb21fZml4ZWQ6ICRpbnAuZGF0YShcImZyb21GaXhlZFwiKSxcclxuICAgICAgICAgICAgZnJvbV9taW46ICRpbnAuZGF0YShcImZyb21NaW5cIiksXHJcbiAgICAgICAgICAgIGZyb21fbWF4OiAkaW5wLmRhdGEoXCJmcm9tTWF4XCIpLFxyXG4gICAgICAgICAgICBmcm9tX3NoYWRvdzogJGlucC5kYXRhKFwiZnJvbVNoYWRvd1wiKSxcclxuXHJcbiAgICAgICAgICAgIHRvX2ZpeGVkOiAkaW5wLmRhdGEoXCJ0b0ZpeGVkXCIpLFxyXG4gICAgICAgICAgICB0b19taW46ICRpbnAuZGF0YShcInRvTWluXCIpLFxyXG4gICAgICAgICAgICB0b19tYXg6ICRpbnAuZGF0YShcInRvTWF4XCIpLFxyXG4gICAgICAgICAgICB0b19zaGFkb3c6ICRpbnAuZGF0YShcInRvU2hhZG93XCIpLFxyXG5cclxuICAgICAgICAgICAgcHJldHRpZnlfZW5hYmxlZDogJGlucC5kYXRhKFwicHJldHRpZnlFbmFibGVkXCIpLFxyXG4gICAgICAgICAgICBwcmV0dGlmeV9zZXBhcmF0b3I6ICRpbnAuZGF0YShcInByZXR0aWZ5U2VwYXJhdG9yXCIpLFxyXG5cclxuICAgICAgICAgICAgZm9yY2VfZWRnZXM6ICRpbnAuZGF0YShcImZvcmNlRWRnZXNcIiksXHJcblxyXG4gICAgICAgICAgICBrZXlib2FyZDogJGlucC5kYXRhKFwia2V5Ym9hcmRcIiksXHJcblxyXG4gICAgICAgICAgICBncmlkOiAkaW5wLmRhdGEoXCJncmlkXCIpLFxyXG4gICAgICAgICAgICBncmlkX21hcmdpbjogJGlucC5kYXRhKFwiZ3JpZE1hcmdpblwiKSxcclxuICAgICAgICAgICAgZ3JpZF9udW06ICRpbnAuZGF0YShcImdyaWROdW1cIiksXHJcbiAgICAgICAgICAgIGdyaWRfc25hcDogJGlucC5kYXRhKFwiZ3JpZFNuYXBcIiksXHJcblxyXG4gICAgICAgICAgICBoaWRlX21pbl9tYXg6ICRpbnAuZGF0YShcImhpZGVNaW5NYXhcIiksXHJcbiAgICAgICAgICAgIGhpZGVfZnJvbV90bzogJGlucC5kYXRhKFwiaGlkZUZyb21Ub1wiKSxcclxuXHJcbiAgICAgICAgICAgIHByZWZpeDogJGlucC5kYXRhKFwicHJlZml4XCIpLFxyXG4gICAgICAgICAgICBwb3N0Zml4OiAkaW5wLmRhdGEoXCJwb3N0Zml4XCIpLFxyXG4gICAgICAgICAgICBtYXhfcG9zdGZpeDogJGlucC5kYXRhKFwibWF4UG9zdGZpeFwiKSxcclxuICAgICAgICAgICAgZGVjb3JhdGVfYm90aDogJGlucC5kYXRhKFwiZGVjb3JhdGVCb3RoXCIpLFxyXG4gICAgICAgICAgICB2YWx1ZXNfc2VwYXJhdG9yOiAkaW5wLmRhdGEoXCJ2YWx1ZXNTZXBhcmF0b3JcIiksXHJcblxyXG4gICAgICAgICAgICBpbnB1dF92YWx1ZXNfc2VwYXJhdG9yOiAkaW5wLmRhdGEoXCJpbnB1dFZhbHVlc1NlcGFyYXRvclwiKSxcclxuXHJcbiAgICAgICAgICAgIGRpc2FibGU6ICRpbnAuZGF0YShcImRpc2FibGVcIiksXHJcbiAgICAgICAgICAgIGJsb2NrOiAkaW5wLmRhdGEoXCJibG9ja1wiKSxcclxuXHJcbiAgICAgICAgICAgIGV4dHJhX2NsYXNzZXM6ICRpbnAuZGF0YShcImV4dHJhQ2xhc3Nlc1wiKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbmZpZ19mcm9tX2RhdGEudmFsdWVzID0gY29uZmlnX2Zyb21fZGF0YS52YWx1ZXMgJiYgY29uZmlnX2Zyb21fZGF0YS52YWx1ZXMuc3BsaXQoXCIsXCIpO1xyXG5cclxuICAgICAgICBmb3IgKHByb3AgaW4gY29uZmlnX2Zyb21fZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoY29uZmlnX2Zyb21fZGF0YS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZ19mcm9tX2RhdGFbcHJvcF0gPT09IHVuZGVmaW5lZCB8fCBjb25maWdfZnJvbV9kYXRhW3Byb3BdID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNvbmZpZ19mcm9tX2RhdGFbcHJvcF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLyBpbnB1dCB2YWx1ZSBleHRlbmRzIGRlZmF1bHQgY29uZmlnXHJcbiAgICAgICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkICYmIHZhbCAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICB2YWwgPSB2YWwuc3BsaXQoY29uZmlnX2Zyb21fZGF0YS5pbnB1dF92YWx1ZXNfc2VwYXJhdG9yIHx8IG9wdGlvbnMuaW5wdXRfdmFsdWVzX3NlcGFyYXRvciB8fCBcIjtcIik7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsWzBdICYmIHZhbFswXSA9PSArdmFsWzBdKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxbMF0gPSArdmFsWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2YWxbMV0gJiYgdmFsWzFdID09ICt2YWxbMV0pIHtcclxuICAgICAgICAgICAgICAgIHZhbFsxXSA9ICt2YWxbMV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudmFsdWVzICYmIG9wdGlvbnMudmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uZmlnLmZyb20gPSB2YWxbMF0gJiYgb3B0aW9ucy52YWx1ZXMuaW5kZXhPZih2YWxbMF0pO1xyXG4gICAgICAgICAgICAgICAgY29uZmlnLnRvID0gdmFsWzFdICYmIG9wdGlvbnMudmFsdWVzLmluZGV4T2YodmFsWzFdKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZy5mcm9tID0gdmFsWzBdICYmICt2YWxbMF07XHJcbiAgICAgICAgICAgICAgICBjb25maWcudG8gPSB2YWxbMV0gJiYgK3ZhbFsxXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICAvLyBqcyBjb25maWcgZXh0ZW5kcyBkZWZhdWx0IGNvbmZpZ1xyXG4gICAgICAgICQuZXh0ZW5kKGNvbmZpZywgb3B0aW9ucyk7XHJcblxyXG5cclxuICAgICAgICAvLyBkYXRhIGNvbmZpZyBleHRlbmRzIGNvbmZpZ1xyXG4gICAgICAgICQuZXh0ZW5kKGNvbmZpZywgY29uZmlnX2Zyb21fZGF0YSk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnO1xyXG5cclxuXHJcblxyXG4gICAgICAgIC8vIHZhbGlkYXRlIGNvbmZpZywgdG8gYmUgc3VyZSB0aGF0IGFsbCBkYXRhIHR5cGVzIGFyZSBjb3JyZWN0XHJcbiAgICAgICAgdGhpcy51cGRhdGVfY2hlY2sgPSB7fTtcclxuICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgLy8gZGVmYXVsdCByZXN1bHQgb2JqZWN0LCByZXR1cm5lZCB0byBjYWxsYmFja3NcclxuICAgICAgICB0aGlzLnJlc3VsdCA9IHtcclxuICAgICAgICAgICAgaW5wdXQ6IHRoaXMuJGNhY2hlLmlucHV0LFxyXG4gICAgICAgICAgICBzbGlkZXI6IG51bGwsXHJcblxyXG4gICAgICAgICAgICBtaW46IHRoaXMub3B0aW9ucy5taW4sXHJcbiAgICAgICAgICAgIG1heDogdGhpcy5vcHRpb25zLm1heCxcclxuXHJcbiAgICAgICAgICAgIGZyb206IHRoaXMub3B0aW9ucy5mcm9tLFxyXG4gICAgICAgICAgICBmcm9tX3BlcmNlbnQ6IDAsXHJcbiAgICAgICAgICAgIGZyb21fdmFsdWU6IG51bGwsXHJcblxyXG4gICAgICAgICAgICB0bzogdGhpcy5vcHRpb25zLnRvLFxyXG4gICAgICAgICAgICB0b19wZXJjZW50OiAwLFxyXG4gICAgICAgICAgICB0b192YWx1ZTogbnVsbFxyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIElvblJhbmdlU2xpZGVyLnByb3RvdHlwZSA9IHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3RhcnRzIG9yIHVwZGF0ZXMgdGhlIHBsdWdpbiBpbnN0YW5jZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIFtpc191cGRhdGVdIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIChpc191cGRhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5ub19kaWFwYXNvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX3N0ZXAgPSB0aGlzLmNvbnZlcnRUb1BlcmNlbnQodGhpcy5vcHRpb25zLnN0ZXAsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSBcImJhc2VcIjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlSW5wdXQoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHBlbmQoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRNaW5NYXgoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc191cGRhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VfcmVkcmF3ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsYyh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjYWxsYmFja3MgY2FsbGVkXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxPblVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JjZV9yZWRyYXcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxjKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrcyBjYWxsZWRcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsbE9uU3RhcnQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy51cGRhdGVTY2VuZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFwcGVuZHMgc2xpZGVyIHRlbXBsYXRlIHRvIGEgRE9NXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXBwZW5kOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXJfaHRtbCA9ICc8c3BhbiBjbGFzcz1cImlycyBqcy1pcnMtJyArIHRoaXMucGx1Z2luX2NvdW50ICsgJyAnICsgdGhpcy5vcHRpb25zLmV4dHJhX2NsYXNzZXMgKyAnXCI+PC9zcGFuPic7XHJcbiAgICAgICAgICAgIHRoaXMuJGNhY2hlLmlucHV0LmJlZm9yZShjb250YWluZXJfaHRtbCk7XHJcbiAgICAgICAgICAgIHRoaXMuJGNhY2hlLmlucHV0LnByb3AoXCJyZWFkb25seVwiLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUuY29udCA9IHRoaXMuJGNhY2hlLmlucHV0LnByZXYoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXN1bHQuc2xpZGVyID0gdGhpcy4kY2FjaGUuY29udDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGNhY2hlLmNvbnQuaHRtbChiYXNlX2h0bWwpO1xyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS5ycyA9IHRoaXMuJGNhY2hlLmNvbnQuZmluZChcIi5pcnNcIik7XHJcbiAgICAgICAgICAgIHRoaXMuJGNhY2hlLm1pbiA9IHRoaXMuJGNhY2hlLmNvbnQuZmluZChcIi5pcnMtbWluXCIpO1xyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS5tYXggPSB0aGlzLiRjYWNoZS5jb250LmZpbmQoXCIuaXJzLW1heFwiKTtcclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUuZnJvbSA9IHRoaXMuJGNhY2hlLmNvbnQuZmluZChcIi5pcnMtZnJvbVwiKTtcclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUudG8gPSB0aGlzLiRjYWNoZS5jb250LmZpbmQoXCIuaXJzLXRvXCIpO1xyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS5zaW5nbGUgPSB0aGlzLiRjYWNoZS5jb250LmZpbmQoXCIuaXJzLXNpbmdsZVwiKTtcclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUuYmFyID0gdGhpcy4kY2FjaGUuY29udC5maW5kKFwiLmlycy1iYXJcIik7XHJcbiAgICAgICAgICAgIHRoaXMuJGNhY2hlLmxpbmUgPSB0aGlzLiRjYWNoZS5jb250LmZpbmQoXCIuaXJzLWxpbmVcIik7XHJcbiAgICAgICAgICAgIHRoaXMuJGNhY2hlLmdyaWQgPSB0aGlzLiRjYWNoZS5jb250LmZpbmQoXCIuaXJzLWdyaWRcIik7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnR5cGUgPT09IFwic2luZ2xlXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLmNvbnQuYXBwZW5kKHNpbmdsZV9odG1sKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLmVkZ2UgPSB0aGlzLiRjYWNoZS5jb250LmZpbmQoXCIuaXJzLWJhci1lZGdlXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuc19zaW5nbGUgPSB0aGlzLiRjYWNoZS5jb250LmZpbmQoXCIuc2luZ2xlXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuZnJvbVswXS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnRvWzBdLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuc2hhZF9zaW5nbGUgPSB0aGlzLiRjYWNoZS5jb250LmZpbmQoXCIuc2hhZG93LXNpbmdsZVwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLmNvbnQuYXBwZW5kKGRvdWJsZV9odG1sKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNfZnJvbSA9IHRoaXMuJGNhY2hlLmNvbnQuZmluZChcIi5mcm9tXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuc190byA9IHRoaXMuJGNhY2hlLmNvbnQuZmluZChcIi50b1wiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNoYWRfZnJvbSA9IHRoaXMuJGNhY2hlLmNvbnQuZmluZChcIi5zaGFkb3ctZnJvbVwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNoYWRfdG8gPSB0aGlzLiRjYWNoZS5jb250LmZpbmQoXCIuc2hhZG93LXRvXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VG9wSGFuZGxlcigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhpZGVfZnJvbV90bykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuZnJvbVswXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS50b1swXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zaW5nbGVbMF0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFwcGVuZEdyaWQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmREaXNhYmxlTWFzaygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuaW5wdXRbMF0uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuaW5wdXRbMF0uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRGlzYWJsZU1hc2soKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBibG9jayBvbmx5IGlmIG5vdCBkaXNhYmxlZFxyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmREaXNhYmxlTWFzaygpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZURpc2FibGVNYXNrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZHJhZ19pbnRlcnZhbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuYmFyWzBdLnN0eWxlLmN1cnNvciA9IFwiZXctcmVzaXplXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXRlcm1pbmUgd2hpY2ggaGFuZGxlciBoYXMgYSBwcmlvcml0eVxyXG4gICAgICAgICAqIHdvcmtzIG9ubHkgZm9yIGRvdWJsZSBzbGlkZXIgdHlwZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFRvcEhhbmRsZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG1pbiA9IHRoaXMub3B0aW9ucy5taW4sXHJcbiAgICAgICAgICAgICAgICBtYXggPSB0aGlzLm9wdGlvbnMubWF4LFxyXG4gICAgICAgICAgICAgICAgZnJvbSA9IHRoaXMub3B0aW9ucy5mcm9tLFxyXG4gICAgICAgICAgICAgICAgdG8gPSB0aGlzLm9wdGlvbnMudG87XHJcblxyXG4gICAgICAgICAgICBpZiAoZnJvbSA+IG1pbiAmJiB0byA9PT0gbWF4KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zX2Zyb20uYWRkQ2xhc3MoXCJ0eXBlX2xhc3RcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG8gPCBtYXgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNfdG8uYWRkQ2xhc3MoXCJ0eXBlX2xhc3RcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXRlcm1pbmUgd2hpY2ggaGFuZGxlcyB3YXMgY2xpY2tlZCBsYXN0XHJcbiAgICAgICAgICogYW5kIHdoaWNoIGhhbmRsZXIgc2hvdWxkIGhhdmUgaG92ZXIgZWZmZWN0XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2hhbmdlTGV2ZWw6IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJzaW5nbGVcIjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX2dhcCA9IHRoaXMudG9GaXhlZCh0aGlzLmNvb3Jkcy5wX3BvaW50ZXIgLSB0aGlzLmNvb3Jkcy5wX3NpbmdsZV9mYWtlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zX3NpbmdsZS5hZGRDbGFzcyhcInN0YXRlX2hvdmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImZyb21cIjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX2dhcCA9IHRoaXMudG9GaXhlZCh0aGlzLmNvb3Jkcy5wX3BvaW50ZXIgLSB0aGlzLmNvb3Jkcy5wX2Zyb21fZmFrZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuc19mcm9tLmFkZENsYXNzKFwic3RhdGVfaG92ZXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuc19mcm9tLmFkZENsYXNzKFwidHlwZV9sYXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNfdG8ucmVtb3ZlQ2xhc3MoXCJ0eXBlX2xhc3RcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwidG9cIjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX2dhcCA9IHRoaXMudG9GaXhlZCh0aGlzLmNvb3Jkcy5wX3BvaW50ZXIgLSB0aGlzLmNvb3Jkcy5wX3RvX2Zha2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNfdG8uYWRkQ2xhc3MoXCJzdGF0ZV9ob3ZlclwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zX3RvLmFkZENsYXNzKFwidHlwZV9sYXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNfZnJvbS5yZW1vdmVDbGFzcyhcInR5cGVfbGFzdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJib3RoXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF9nYXBfbGVmdCA9IHRoaXMudG9GaXhlZCh0aGlzLmNvb3Jkcy5wX3BvaW50ZXIgLSB0aGlzLmNvb3Jkcy5wX2Zyb21fZmFrZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF9nYXBfcmlnaHQgPSB0aGlzLnRvRml4ZWQodGhpcy5jb29yZHMucF90b19mYWtlIC0gdGhpcy5jb29yZHMucF9wb2ludGVyKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zX3RvLnJlbW92ZUNsYXNzKFwidHlwZV9sYXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNfZnJvbS5yZW1vdmVDbGFzcyhcInR5cGVfbGFzdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZW4gc2xpZGVyIGlzIGRpc2FibGVkXHJcbiAgICAgICAgICogYXBwZW5kcyBleHRyYSBsYXllciB3aXRoIG9wYWNpdHlcclxuICAgICAgICAgKi9cclxuICAgICAgICBhcHBlbmREaXNhYmxlTWFzazogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS5jb250LmFwcGVuZChkaXNhYmxlX2h0bWwpO1xyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS5jb250LmFkZENsYXNzKFwiaXJzLWRpc2FibGVkXCIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZW4gc2xpZGVyIGlzIG5vdCBkaXNhYmxlZFxyXG4gICAgICAgICAqIHJlbW92ZSBkaXNhYmxlIG1hc2tcclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVEaXNhYmxlTWFzazogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS5jb250LnJlbW92ZShcIi5pcnMtZGlzYWJsZS1tYXNrXCIpO1xyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS5jb250LnJlbW92ZUNsYXNzKFwiaXJzLWRpc2FibGVkXCIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZSBzbGlkZXIgaW5zdGFuY2VcclxuICAgICAgICAgKiBhbmQgdW5iaW5kIGFsbCBldmVudHNcclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUuY29udC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUuY29udCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS5saW5lLm9mZihcImtleWRvd24uaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUuYm9keS5vZmYoXCJ0b3VjaG1vdmUuaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQpO1xyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS5ib2R5Lm9mZihcIm1vdXNlbW92ZS5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS53aW4ub2ZmKFwidG91Y2hlbmQuaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQpO1xyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS53aW4ub2ZmKFwibW91c2V1cC5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNfb2xkX2llKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5ib2R5Lm9mZihcIm1vdXNldXAuaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuYm9keS5vZmYoXCJtb3VzZWxlYXZlLmlyc19cIiArIHRoaXMucGx1Z2luX2NvdW50KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUuZ3JpZF9sYWJlbHMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5jb29yZHMuYmlnID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuY29vcmRzLmJpZ193ID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuY29vcmRzLmJpZ19wID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuY29vcmRzLmJpZ194ID0gW107XHJcblxyXG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnJhZl9pZCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogYmluZCBhbGwgc2xpZGVyIGV2ZW50c1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGJpbmRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubm9fZGlhcGFzb24pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUuYm9keS5vbihcInRvdWNobW92ZS5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyTW92ZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUuYm9keS5vbihcIm1vdXNlbW92ZS5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyTW92ZS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGNhY2hlLndpbi5vbihcInRvdWNoZW5kLmlyc19cIiArIHRoaXMucGx1Z2luX2NvdW50LCB0aGlzLnBvaW50ZXJVcC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUud2luLm9uKFwibW91c2V1cC5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyVXAuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS5saW5lLm9uKFwidG91Y2hzdGFydC5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyQ2xpY2suYmluZCh0aGlzLCBcImNsaWNrXCIpKTtcclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUubGluZS5vbihcIm1vdXNlZG93bi5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyQ2xpY2suYmluZCh0aGlzLCBcImNsaWNrXCIpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGNhY2hlLmxpbmUub24oXCJmb2N1cy5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyRm9jdXMuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRyYWdfaW50ZXJ2YWwgJiYgdGhpcy5vcHRpb25zLnR5cGUgPT09IFwiZG91YmxlXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLmJhci5vbihcInRvdWNoc3RhcnQuaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckRvd24uYmluZCh0aGlzLCBcImJvdGhcIikpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuYmFyLm9uKFwibW91c2Vkb3duLmlyc19cIiArIHRoaXMucGx1Z2luX2NvdW50LCB0aGlzLnBvaW50ZXJEb3duLmJpbmQodGhpcywgXCJib3RoXCIpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLmJhci5vbihcInRvdWNoc3RhcnQuaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckNsaWNrLmJpbmQodGhpcywgXCJjbGlja1wiKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5iYXIub24oXCJtb3VzZWRvd24uaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckNsaWNrLmJpbmQodGhpcywgXCJjbGlja1wiKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHlwZSA9PT0gXCJzaW5nbGVcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuc2luZ2xlLm9uKFwidG91Y2hzdGFydC5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyRG93bi5iaW5kKHRoaXMsIFwic2luZ2xlXCIpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNfc2luZ2xlLm9uKFwidG91Y2hzdGFydC5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyRG93bi5iaW5kKHRoaXMsIFwic2luZ2xlXCIpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNoYWRfc2luZ2xlLm9uKFwidG91Y2hzdGFydC5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyQ2xpY2suYmluZCh0aGlzLCBcImNsaWNrXCIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zaW5nbGUub24oXCJtb3VzZWRvd24uaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckRvd24uYmluZCh0aGlzLCBcInNpbmdsZVwiKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zX3NpbmdsZS5vbihcIm1vdXNlZG93bi5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyRG93bi5iaW5kKHRoaXMsIFwic2luZ2xlXCIpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLmVkZ2Uub24oXCJtb3VzZWRvd24uaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckNsaWNrLmJpbmQodGhpcywgXCJjbGlja1wiKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zaGFkX3NpbmdsZS5vbihcIm1vdXNlZG93bi5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyQ2xpY2suYmluZCh0aGlzLCBcImNsaWNrXCIpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNpbmdsZS5vbihcInRvdWNoc3RhcnQuaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckRvd24uYmluZCh0aGlzLCBudWxsKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zaW5nbGUub24oXCJtb3VzZWRvd24uaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckRvd24uYmluZCh0aGlzLCBudWxsKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuZnJvbS5vbihcInRvdWNoc3RhcnQuaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckRvd24uYmluZCh0aGlzLCBcImZyb21cIikpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuc19mcm9tLm9uKFwidG91Y2hzdGFydC5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyRG93bi5iaW5kKHRoaXMsIFwiZnJvbVwiKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS50by5vbihcInRvdWNoc3RhcnQuaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckRvd24uYmluZCh0aGlzLCBcInRvXCIpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNfdG8ub24oXCJ0b3VjaHN0YXJ0Lmlyc19cIiArIHRoaXMucGx1Z2luX2NvdW50LCB0aGlzLnBvaW50ZXJEb3duLmJpbmQodGhpcywgXCJ0b1wiKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zaGFkX2Zyb20ub24oXCJ0b3VjaHN0YXJ0Lmlyc19cIiArIHRoaXMucGx1Z2luX2NvdW50LCB0aGlzLnBvaW50ZXJDbGljay5iaW5kKHRoaXMsIFwiY2xpY2tcIikpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuc2hhZF90by5vbihcInRvdWNoc3RhcnQuaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckNsaWNrLmJpbmQodGhpcywgXCJjbGlja1wiKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuZnJvbS5vbihcIm1vdXNlZG93bi5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyRG93bi5iaW5kKHRoaXMsIFwiZnJvbVwiKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zX2Zyb20ub24oXCJtb3VzZWRvd24uaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckRvd24uYmluZCh0aGlzLCBcImZyb21cIikpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUudG8ub24oXCJtb3VzZWRvd24uaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckRvd24uYmluZCh0aGlzLCBcInRvXCIpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNfdG8ub24oXCJtb3VzZWRvd24uaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckRvd24uYmluZCh0aGlzLCBcInRvXCIpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNoYWRfZnJvbS5vbihcIm1vdXNlZG93bi5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyQ2xpY2suYmluZCh0aGlzLCBcImNsaWNrXCIpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNoYWRfdG8ub24oXCJtb3VzZWRvd24uaXJzX1wiICsgdGhpcy5wbHVnaW5fY291bnQsIHRoaXMucG9pbnRlckNsaWNrLmJpbmQodGhpcywgXCJjbGlja1wiKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMua2V5Ym9hcmQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLmxpbmUub24oXCJrZXlkb3duLmlyc19cIiArIHRoaXMucGx1Z2luX2NvdW50LCB0aGlzLmtleS5iaW5kKHRoaXMsIFwia2V5Ym9hcmRcIikpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNfb2xkX2llKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5ib2R5Lm9uKFwibW91c2V1cC5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyVXAuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5ib2R5Lm9uKFwibW91c2VsZWF2ZS5pcnNfXCIgKyB0aGlzLnBsdWdpbl9jb3VudCwgdGhpcy5wb2ludGVyVXAuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBGb2N1cyB3aXRoIHRhYkluZGV4XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gZSB7T2JqZWN0fSBldmVudCBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBwb2ludGVyRm9jdXM6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy50YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB4O1xyXG4gICAgICAgICAgICAgICAgdmFyICRoYW5kbGU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50eXBlID09PSBcInNpbmdsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGhhbmRsZSA9IHRoaXMuJGNhY2hlLnNpbmdsZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGhhbmRsZSA9IHRoaXMuJGNhY2hlLmZyb207XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgeCA9ICRoYW5kbGUub2Zmc2V0KCkubGVmdDtcclxuICAgICAgICAgICAgICAgIHggKz0gKCRoYW5kbGUud2lkdGgoKSAvIDIpIC0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50ZXJDbGljayhcInNpbmdsZVwiLCB7cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uICgpIHt9LCBwYWdlWDogeH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTW91c2Vtb3ZlIG9yIHRvdWNobW92ZVxyXG4gICAgICAgICAqIG9ubHkgZm9yIGhhbmRsZXJzXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gZSB7T2JqZWN0fSBldmVudCBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBwb2ludGVyTW92ZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWdnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB4ID0gZS5wYWdlWCB8fCBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcyAmJiBlLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5wYWdlWDtcclxuICAgICAgICAgICAgdGhpcy5jb29yZHMueF9wb2ludGVyID0geCAtIHRoaXMuY29vcmRzLnhfZ2FwO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jYWxjKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTW91c2V1cCBvciB0b3VjaGVuZFxyXG4gICAgICAgICAqIG9ubHkgZm9yIGhhbmRsZXJzXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gZSB7T2JqZWN0fSBldmVudCBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBwb2ludGVyVXA6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRfcGx1Z2luICE9PSB0aGlzLnBsdWdpbl9jb3VudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc19hY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNfYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGNhY2hlLmNvbnQuZmluZChcIi5zdGF0ZV9ob3ZlclwiKS5yZW1vdmVDbGFzcyhcInN0YXRlX2hvdmVyXCIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5mb3JjZV9yZWRyYXcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlzX29sZF9pZSkge1xyXG4gICAgICAgICAgICAgICAgJChcIipcIikucHJvcChcInVuc2VsZWN0YWJsZVwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2NlbmUoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXN0b3JlT3JpZ2luYWxNaW5JbnRlcnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gY2FsbGJhY2tzIGNhbGxcclxuICAgICAgICAgICAgaWYgKCQuY29udGFpbnModGhpcy4kY2FjaGUuY29udFswXSwgZS50YXJnZXQpIHx8IHRoaXMuZHJhZ2dpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsbE9uRmluaXNoKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuZHJhZ2dpbmcgPSBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNb3VzZWRvd24gb3IgdG91Y2hzdGFydFxyXG4gICAgICAgICAqIG9ubHkgZm9yIGhhbmRsZXJzXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IHtTdHJpbmd8bnVsbH1cclxuICAgICAgICAgKiBAcGFyYW0gZSB7T2JqZWN0fSBldmVudCBvYmplY3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBwb2ludGVyRG93bjogZnVuY3Rpb24gKHRhcmdldCwgZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHZhciB4ID0gZS5wYWdlWCB8fCBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcyAmJiBlLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5wYWdlWDtcclxuICAgICAgICAgICAgaWYgKGUuYnV0dG9uID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IFwiYm90aFwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBNaW5JbnRlcnZhbCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQgfHwgXCJmcm9tXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9wbHVnaW4gPSB0aGlzLnBsdWdpbl9jb3VudDtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmlzX2FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhZ2dpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb29yZHMueF9nYXAgPSB0aGlzLiRjYWNoZS5ycy5vZmZzZXQoKS5sZWZ0O1xyXG4gICAgICAgICAgICB0aGlzLmNvb3Jkcy54X3BvaW50ZXIgPSB4IC0gdGhpcy5jb29yZHMueF9nYXA7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhbGNQb2ludGVyUGVyY2VudCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZUxldmVsKHRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNfb2xkX2llKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiKlwiKS5wcm9wKFwidW5zZWxlY3RhYmxlXCIsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS5saW5lLnRyaWdnZXIoXCJmb2N1c1wiKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2NlbmUoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNb3VzZWRvd24gb3IgdG91Y2hzdGFydFxyXG4gICAgICAgICAqIGZvciBvdGhlciBzbGlkZXIgZWxlbWVudHMsIGxpa2UgZGlhcGFzb24gbGluZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHRhcmdldCB7U3RyaW5nfVxyXG4gICAgICAgICAqIEBwYXJhbSBlIHtPYmplY3R9IGV2ZW50IG9iamVjdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBvaW50ZXJDbGljazogZnVuY3Rpb24gKHRhcmdldCwgZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHZhciB4ID0gZS5wYWdlWCB8fCBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcyAmJiBlLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5wYWdlWDtcclxuICAgICAgICAgICAgaWYgKGUuYnV0dG9uID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9wbHVnaW4gPSB0aGlzLnBsdWdpbl9jb3VudDtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmlzX2NsaWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jb29yZHMueF9nYXAgPSB0aGlzLiRjYWNoZS5ycy5vZmZzZXQoKS5sZWZ0O1xyXG4gICAgICAgICAgICB0aGlzLmNvb3Jkcy54X3BvaW50ZXIgPSArKHggLSB0aGlzLmNvb3Jkcy54X2dhcCkudG9GaXhlZCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5mb3JjZV9yZWRyYXcgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGMoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGNhY2hlLmxpbmUudHJpZ2dlcihcImZvY3VzXCIpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEtleWJvcmFyZCBjb250cm9scyBmb3IgZm9jdXNlZCBzbGlkZXJcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQge1N0cmluZ31cclxuICAgICAgICAgKiBAcGFyYW0gZSB7T2JqZWN0fSBldmVudCBvYmplY3RcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnx1bmRlZmluZWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAga2V5OiBmdW5jdGlvbiAodGFyZ2V0LCBlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRfcGx1Z2luICE9PSB0aGlzLnBsdWdpbl9jb3VudCB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSB8fCBlLm1ldGFLZXkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChlLndoaWNoKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDgzOiAvLyBXXHJcbiAgICAgICAgICAgICAgICBjYXNlIDY1OiAvLyBBXHJcbiAgICAgICAgICAgICAgICBjYXNlIDQwOiAvLyBET1dOXHJcbiAgICAgICAgICAgICAgICBjYXNlIDM3OiAvLyBMRUZUXHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUJ5S2V5KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIDg3OiAvLyBTXHJcbiAgICAgICAgICAgICAgICBjYXNlIDY4OiAvLyBEXHJcbiAgICAgICAgICAgICAgICBjYXNlIDM4OiAvLyBVUFxyXG4gICAgICAgICAgICAgICAgY2FzZSAzOTogLy8gUklHSFRcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlQnlLZXkodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1vdmUgYnkga2V5XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gcmlnaHQge2Jvb2xlYW59IGRpcmVjdGlvbiB0byBtb3ZlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbW92ZUJ5S2V5OiBmdW5jdGlvbiAocmlnaHQpIHtcclxuICAgICAgICAgICAgdmFyIHAgPSB0aGlzLmNvb3Jkcy5wX3BvaW50ZXI7XHJcbiAgICAgICAgICAgIHZhciBwX3N0ZXAgPSAodGhpcy5vcHRpb25zLm1heCAtIHRoaXMub3B0aW9ucy5taW4pIC8gMTAwO1xyXG4gICAgICAgICAgICBwX3N0ZXAgPSB0aGlzLm9wdGlvbnMuc3RlcCAvIHBfc3RlcDtcclxuXHJcbiAgICAgICAgICAgIGlmIChyaWdodCkge1xyXG4gICAgICAgICAgICAgICAgcCArPSBwX3N0ZXA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwIC09IHBfc3RlcDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb29yZHMueF9wb2ludGVyID0gdGhpcy50b0ZpeGVkKHRoaXMuY29vcmRzLndfcnMgLyAxMDAgKiBwKTtcclxuICAgICAgICAgICAgdGhpcy5pc19rZXkgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZXQgdmlzaWJpbGl0eSBhbmQgY29udGVudFxyXG4gICAgICAgICAqIG9mIE1pbiBhbmQgTWF4IGxhYmVsc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldE1pbk1heDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhpZGVfbWluX21heCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUubWluWzBdLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLm1heFswXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUubWluLmh0bWwodGhpcy5kZWNvcmF0ZSh0aGlzLm9wdGlvbnMucF92YWx1ZXNbdGhpcy5vcHRpb25zLm1pbl0pKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLm1heC5odG1sKHRoaXMuZGVjb3JhdGUodGhpcy5vcHRpb25zLnBfdmFsdWVzW3RoaXMub3B0aW9ucy5tYXhdKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWluX3ByZXR0eSA9IHRoaXMuX3ByZXR0aWZ5KHRoaXMub3B0aW9ucy5taW4pO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1heF9wcmV0dHkgPSB0aGlzLl9wcmV0dGlmeSh0aGlzLm9wdGlvbnMubWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdC5taW5fcHJldHR5ID0gbWluX3ByZXR0eTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0Lm1heF9wcmV0dHkgPSBtYXhfcHJldHR5O1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLm1pbi5odG1sKHRoaXMuZGVjb3JhdGUobWluX3ByZXR0eSwgdGhpcy5vcHRpb25zLm1pbikpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUubWF4Lmh0bWwodGhpcy5kZWNvcmF0ZShtYXhfcHJldHR5LCB0aGlzLm9wdGlvbnMubWF4KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubGFiZWxzLndfbWluID0gdGhpcy4kY2FjaGUubWluLm91dGVyV2lkdGgoZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLmxhYmVscy53X21heCA9IHRoaXMuJGNhY2hlLm1heC5vdXRlcldpZHRoKGZhbHNlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGVuIGRyYWdnaW5nIGludGVydmFsLCBwcmV2ZW50IGludGVydmFsIGNvbGxhcHNpbmdcclxuICAgICAgICAgKiB1c2luZyBtaW5faW50ZXJ2YWwgb3B0aW9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0VGVtcE1pbkludGVydmFsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IHRoaXMucmVzdWx0LnRvIC0gdGhpcy5yZXN1bHQuZnJvbTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9sZF9taW5faW50ZXJ2YWwgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2xkX21pbl9pbnRlcnZhbCA9IHRoaXMub3B0aW9ucy5taW5faW50ZXJ2YWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5taW5faW50ZXJ2YWwgPSBpbnRlcnZhbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXN0b3JlIG1pbl9pbnRlcnZhbCBvcHRpb24gdG8gb3JpZ2luYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICByZXN0b3JlT3JpZ2luYWxNaW5JbnRlcnZhbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vbGRfbWluX2ludGVydmFsICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMubWluX2ludGVydmFsID0gdGhpcy5vbGRfbWluX2ludGVydmFsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbGRfbWluX2ludGVydmFsID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgICAgIC8vIENhbGN1bGF0aW9uc1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbGwgY2FsY3VsYXRpb25zIGFuZCBtZWFzdXJlcyBzdGFydCBoZXJlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gdXBkYXRlIHtib29sZWFuPX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxjOiBmdW5jdGlvbiAodXBkYXRlKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2FsY19jb3VudCsrO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuY2FsY19jb3VudCA9PT0gMTAgfHwgdXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGNfY291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb29yZHMud19ycyA9IHRoaXMuJGNhY2hlLnJzLm91dGVyV2lkdGgoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsY0hhbmRsZVBlcmNlbnQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNvb3Jkcy53X3JzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2FsY1BvaW50ZXJQZXJjZW50KCk7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVfeCA9IHRoaXMuZ2V0SGFuZGxlWCgpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCA9PT0gXCJib3RoXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfZ2FwID0gMDtcclxuICAgICAgICAgICAgICAgIGhhbmRsZV94ID0gdGhpcy5nZXRIYW5kbGVYKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCA9PT0gXCJjbGlja1wiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX2dhcCA9IHRoaXMuY29vcmRzLnBfaGFuZGxlIC8gMjtcclxuICAgICAgICAgICAgICAgIGhhbmRsZV94ID0gdGhpcy5nZXRIYW5kbGVYKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kcmFnX2ludGVydmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXQgPSBcImJvdGhfb25lXCI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5jaG9vc2VIYW5kbGUoaGFuZGxlX3gpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiYmFzZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3ID0gKHRoaXMub3B0aW9ucy5tYXggLSB0aGlzLm9wdGlvbnMubWluKSAvIDEwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZiA9ICh0aGlzLnJlc3VsdC5mcm9tIC0gdGhpcy5vcHRpb25zLm1pbikgLyB3LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gKHRoaXMucmVzdWx0LnRvIC0gdGhpcy5vcHRpb25zLm1pbikgLyB3O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX3NpbmdsZV9yZWFsID0gdGhpcy50b0ZpeGVkKGYpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsID0gdGhpcy50b0ZpeGVkKGYpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfdG9fcmVhbCA9IHRoaXMudG9GaXhlZCh0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF9zaW5nbGVfcmVhbCA9IHRoaXMuY2hlY2tEaWFwYXNvbih0aGlzLmNvb3Jkcy5wX3NpbmdsZV9yZWFsLCB0aGlzLm9wdGlvbnMuZnJvbV9taW4sIHRoaXMub3B0aW9ucy5mcm9tX21heCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF9mcm9tX3JlYWwgPSB0aGlzLmNoZWNrRGlhcGFzb24odGhpcy5jb29yZHMucF9mcm9tX3JlYWwsIHRoaXMub3B0aW9ucy5mcm9tX21pbiwgdGhpcy5vcHRpb25zLmZyb21fbWF4KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX3RvX3JlYWwgPSB0aGlzLmNoZWNrRGlhcGFzb24odGhpcy5jb29yZHMucF90b19yZWFsLCB0aGlzLm9wdGlvbnMudG9fbWluLCB0aGlzLm9wdGlvbnMudG9fbWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF9zaW5nbGVfZmFrZSA9IHRoaXMuY29udmVydFRvRmFrZVBlcmNlbnQodGhpcy5jb29yZHMucF9zaW5nbGVfcmVhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF9mcm9tX2Zha2UgPSB0aGlzLmNvbnZlcnRUb0Zha2VQZXJjZW50KHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX3RvX2Zha2UgPSB0aGlzLmNvbnZlcnRUb0Zha2VQZXJjZW50KHRoaXMuY29vcmRzLnBfdG9fcmVhbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBcInNpbmdsZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZnJvbV9maXhlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfc2luZ2xlX3JlYWwgPSB0aGlzLmNvbnZlcnRUb1JlYWxQZXJjZW50KGhhbmRsZV94KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX3NpbmdsZV9yZWFsID0gdGhpcy5jYWxjV2l0aFN0ZXAodGhpcy5jb29yZHMucF9zaW5nbGVfcmVhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF9zaW5nbGVfcmVhbCA9IHRoaXMuY2hlY2tEaWFwYXNvbih0aGlzLmNvb3Jkcy5wX3NpbmdsZV9yZWFsLCB0aGlzLm9wdGlvbnMuZnJvbV9taW4sIHRoaXMub3B0aW9ucy5mcm9tX21heCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfc2luZ2xlX2Zha2UgPSB0aGlzLmNvbnZlcnRUb0Zha2VQZXJjZW50KHRoaXMuY29vcmRzLnBfc2luZ2xlX3JlYWwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZnJvbVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZnJvbV9maXhlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsID0gdGhpcy5jb252ZXJ0VG9SZWFsUGVyY2VudChoYW5kbGVfeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF9mcm9tX3JlYWwgPSB0aGlzLmNhbGNXaXRoU3RlcCh0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsID4gdGhpcy5jb29yZHMucF90b19yZWFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsID0gdGhpcy5jb29yZHMucF90b19yZWFsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbCA9IHRoaXMuY2hlY2tEaWFwYXNvbih0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbCwgdGhpcy5vcHRpb25zLmZyb21fbWluLCB0aGlzLm9wdGlvbnMuZnJvbV9tYXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsID0gdGhpcy5jaGVja01pbkludGVydmFsKHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsLCB0aGlzLmNvb3Jkcy5wX3RvX3JlYWwsIFwiZnJvbVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbCA9IHRoaXMuY2hlY2tNYXhJbnRlcnZhbCh0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbCwgdGhpcy5jb29yZHMucF90b19yZWFsLCBcImZyb21cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfZnJvbV9mYWtlID0gdGhpcy5jb252ZXJ0VG9GYWtlUGVyY2VudCh0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ0b1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudG9fZml4ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX3RvX3JlYWwgPSB0aGlzLmNvbnZlcnRUb1JlYWxQZXJjZW50KGhhbmRsZV94KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX3RvX3JlYWwgPSB0aGlzLmNhbGNXaXRoU3RlcCh0aGlzLmNvb3Jkcy5wX3RvX3JlYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvb3Jkcy5wX3RvX3JlYWwgPCB0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX3RvX3JlYWwgPSB0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF90b19yZWFsID0gdGhpcy5jaGVja0RpYXBhc29uKHRoaXMuY29vcmRzLnBfdG9fcmVhbCwgdGhpcy5vcHRpb25zLnRvX21pbiwgdGhpcy5vcHRpb25zLnRvX21heCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF90b19yZWFsID0gdGhpcy5jaGVja01pbkludGVydmFsKHRoaXMuY29vcmRzLnBfdG9fcmVhbCwgdGhpcy5jb29yZHMucF9mcm9tX3JlYWwsIFwidG9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF90b19yZWFsID0gdGhpcy5jaGVja01heEludGVydmFsKHRoaXMuY29vcmRzLnBfdG9fcmVhbCwgdGhpcy5jb29yZHMucF9mcm9tX3JlYWwsIFwidG9cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfdG9fZmFrZSA9IHRoaXMuY29udmVydFRvRmFrZVBlcmNlbnQodGhpcy5jb29yZHMucF90b19yZWFsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBcImJvdGhcIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZyb21fZml4ZWQgfHwgdGhpcy5vcHRpb25zLnRvX2ZpeGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlX3ggPSB0aGlzLnRvRml4ZWQoaGFuZGxlX3ggKyAodGhpcy5jb29yZHMucF9oYW5kbGUgKiAwLjAwMSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbCA9IHRoaXMuY29udmVydFRvUmVhbFBlcmNlbnQoaGFuZGxlX3gpIC0gdGhpcy5jb29yZHMucF9nYXBfbGVmdDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbCA9IHRoaXMuY2FsY1dpdGhTdGVwKHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbCA9IHRoaXMuY2hlY2tEaWFwYXNvbih0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbCwgdGhpcy5vcHRpb25zLmZyb21fbWluLCB0aGlzLm9wdGlvbnMuZnJvbV9tYXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsID0gdGhpcy5jaGVja01pbkludGVydmFsKHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsLCB0aGlzLmNvb3Jkcy5wX3RvX3JlYWwsIFwiZnJvbVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX2Zyb21fZmFrZSA9IHRoaXMuY29udmVydFRvRmFrZVBlcmNlbnQodGhpcy5jb29yZHMucF9mcm9tX3JlYWwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX3RvX3JlYWwgPSB0aGlzLmNvbnZlcnRUb1JlYWxQZXJjZW50KGhhbmRsZV94KSArIHRoaXMuY29vcmRzLnBfZ2FwX3JpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfdG9fcmVhbCA9IHRoaXMuY2FsY1dpdGhTdGVwKHRoaXMuY29vcmRzLnBfdG9fcmVhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF90b19yZWFsID0gdGhpcy5jaGVja0RpYXBhc29uKHRoaXMuY29vcmRzLnBfdG9fcmVhbCwgdGhpcy5vcHRpb25zLnRvX21pbiwgdGhpcy5vcHRpb25zLnRvX21heCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF90b19yZWFsID0gdGhpcy5jaGVja01pbkludGVydmFsKHRoaXMuY29vcmRzLnBfdG9fcmVhbCwgdGhpcy5jb29yZHMucF9mcm9tX3JlYWwsIFwidG9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF90b19mYWtlID0gdGhpcy5jb252ZXJ0VG9GYWtlUGVyY2VudCh0aGlzLmNvb3Jkcy5wX3RvX3JlYWwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiYm90aF9vbmVcIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZyb21fZml4ZWQgfHwgdGhpcy5vcHRpb25zLnRvX2ZpeGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWxfeCA9IHRoaXMuY29udmVydFRvUmVhbFBlcmNlbnQoaGFuZGxlX3gpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tID0gdGhpcy5yZXN1bHQuZnJvbV9wZXJjZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0byA9IHRoaXMucmVzdWx0LnRvX3BlcmNlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGwgPSB0byAtIGZyb20sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbGYgPSBmdWxsIC8gMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3X2Zyb20gPSByZWFsX3ggLSBoYWxmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdfdG8gPSByZWFsX3ggKyBoYWxmO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3X2Zyb20gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19mcm9tID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3X3RvID0gbmV3X2Zyb20gKyBmdWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld190byA+IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdfdG8gPSAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19mcm9tID0gbmV3X3RvIC0gZnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsID0gdGhpcy5jYWxjV2l0aFN0ZXAobmV3X2Zyb20pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsID0gdGhpcy5jaGVja0RpYXBhc29uKHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsLCB0aGlzLm9wdGlvbnMuZnJvbV9taW4sIHRoaXMub3B0aW9ucy5mcm9tX21heCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF9mcm9tX2Zha2UgPSB0aGlzLmNvbnZlcnRUb0Zha2VQZXJjZW50KHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF90b19yZWFsID0gdGhpcy5jYWxjV2l0aFN0ZXAobmV3X3RvKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX3RvX3JlYWwgPSB0aGlzLmNoZWNrRGlhcGFzb24odGhpcy5jb29yZHMucF90b19yZWFsLCB0aGlzLm9wdGlvbnMudG9fbWluLCB0aGlzLm9wdGlvbnMudG9fbWF4KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX3RvX2Zha2UgPSB0aGlzLmNvbnZlcnRUb0Zha2VQZXJjZW50KHRoaXMuY29vcmRzLnBfdG9fcmVhbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnR5cGUgPT09IFwic2luZ2xlXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfYmFyX3ggPSAodGhpcy5jb29yZHMucF9oYW5kbGUgLyAyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfYmFyX3cgPSB0aGlzLmNvb3Jkcy5wX3NpbmdsZV9mYWtlO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0LmZyb21fcGVyY2VudCA9IHRoaXMuY29vcmRzLnBfc2luZ2xlX3JlYWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdC5mcm9tID0gdGhpcy5jb252ZXJ0VG9WYWx1ZSh0aGlzLmNvb3Jkcy5wX3NpbmdsZV9yZWFsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0LmZyb21fcHJldHR5ID0gdGhpcy5fcHJldHRpZnkodGhpcy5yZXN1bHQuZnJvbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy52YWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQuZnJvbV92YWx1ZSA9IHRoaXMub3B0aW9ucy52YWx1ZXNbdGhpcy5yZXN1bHQuZnJvbV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX2Jhcl94ID0gdGhpcy50b0ZpeGVkKHRoaXMuY29vcmRzLnBfZnJvbV9mYWtlICsgKHRoaXMuY29vcmRzLnBfaGFuZGxlIC8gMikpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb29yZHMucF9iYXJfdyA9IHRoaXMudG9GaXhlZCh0aGlzLmNvb3Jkcy5wX3RvX2Zha2UgLSB0aGlzLmNvb3Jkcy5wX2Zyb21fZmFrZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQuZnJvbV9wZXJjZW50ID0gdGhpcy5jb29yZHMucF9mcm9tX3JlYWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdC5mcm9tID0gdGhpcy5jb252ZXJ0VG9WYWx1ZSh0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdC5mcm9tX3ByZXR0eSA9IHRoaXMuX3ByZXR0aWZ5KHRoaXMucmVzdWx0LmZyb20pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQudG9fcGVyY2VudCA9IHRoaXMuY29vcmRzLnBfdG9fcmVhbDtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0LnRvID0gdGhpcy5jb252ZXJ0VG9WYWx1ZSh0aGlzLmNvb3Jkcy5wX3RvX3JlYWwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQudG9fcHJldHR5ID0gdGhpcy5fcHJldHRpZnkodGhpcy5yZXN1bHQudG8pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0LmZyb21fdmFsdWUgPSB0aGlzLm9wdGlvbnMudmFsdWVzW3RoaXMucmVzdWx0LmZyb21dO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0LnRvX3ZhbHVlID0gdGhpcy5vcHRpb25zLnZhbHVlc1t0aGlzLnJlc3VsdC50b107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2FsY01pbk1heCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGNMYWJlbHMoKTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogY2FsY3VsYXRlcyBwb2ludGVyIFggaW4gcGVyY2VudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbGNQb2ludGVyUGVyY2VudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29vcmRzLndfcnMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLnBfcG9pbnRlciA9IDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvb3Jkcy54X3BvaW50ZXIgPCAwIHx8IGlzTmFOKHRoaXMuY29vcmRzLnhfcG9pbnRlcikgICkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb29yZHMueF9wb2ludGVyID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvb3Jkcy54X3BvaW50ZXIgPiB0aGlzLmNvb3Jkcy53X3JzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy54X3BvaW50ZXIgPSB0aGlzLmNvb3Jkcy53X3JzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX3BvaW50ZXIgPSB0aGlzLnRvRml4ZWQodGhpcy5jb29yZHMueF9wb2ludGVyIC8gdGhpcy5jb29yZHMud19ycyAqIDEwMCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY29udmVydFRvUmVhbFBlcmNlbnQ6IGZ1bmN0aW9uIChmYWtlKSB7XHJcbiAgICAgICAgICAgIHZhciBmdWxsID0gMTAwIC0gdGhpcy5jb29yZHMucF9oYW5kbGU7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWtlIC8gZnVsbCAqIDEwMDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjb252ZXJ0VG9GYWtlUGVyY2VudDogZnVuY3Rpb24gKHJlYWwpIHtcclxuICAgICAgICAgICAgdmFyIGZ1bGwgPSAxMDAgLSB0aGlzLmNvb3Jkcy5wX2hhbmRsZTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlYWwgLyAxMDAgKiBmdWxsO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEhhbmRsZVg6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG1heCA9IDEwMCAtIHRoaXMuY29vcmRzLnBfaGFuZGxlLFxyXG4gICAgICAgICAgICAgICAgeCA9IHRoaXMudG9GaXhlZCh0aGlzLmNvb3Jkcy5wX3BvaW50ZXIgLSB0aGlzLmNvb3Jkcy5wX2dhcCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoeCA8IDApIHtcclxuICAgICAgICAgICAgICAgIHggPSAwO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHggPiBtYXgpIHtcclxuICAgICAgICAgICAgICAgIHggPSBtYXg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB4O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNhbGNIYW5kbGVQZXJjZW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHlwZSA9PT0gXCJzaW5nbGVcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb29yZHMud19oYW5kbGUgPSB0aGlzLiRjYWNoZS5zX3NpbmdsZS5vdXRlcldpZHRoKGZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLndfaGFuZGxlID0gdGhpcy4kY2FjaGUuc19mcm9tLm91dGVyV2lkdGgoZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvb3Jkcy5wX2hhbmRsZSA9IHRoaXMudG9GaXhlZCh0aGlzLmNvb3Jkcy53X2hhbmRsZSAvIHRoaXMuY29vcmRzLndfcnMgKiAxMDApO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEZpbmQgY2xvc2VzdCBoYW5kbGUgdG8gcG9pbnRlciBjbGlja1xyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHJlYWxfeCB7TnVtYmVyfVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2hvb3NlSGFuZGxlOiBmdW5jdGlvbiAocmVhbF94KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHlwZSA9PT0gXCJzaW5nbGVcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2luZ2xlXCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbV9wb2ludCA9IHRoaXMuY29vcmRzLnBfZnJvbV9yZWFsICsgKCh0aGlzLmNvb3Jkcy5wX3RvX3JlYWwgLSB0aGlzLmNvb3Jkcy5wX2Zyb21fcmVhbCkgLyAyKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZWFsX3ggPj0gbV9wb2ludCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMudG9fZml4ZWQgPyBcImZyb21cIiA6IFwidG9cIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5mcm9tX2ZpeGVkID8gXCJ0b1wiIDogXCJmcm9tXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNZWFzdXJlIE1pbiBhbmQgTWF4IGxhYmVscyB3aWR0aCBpbiBwZXJjZW50XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FsY01pbk1heDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29vcmRzLndfcnMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5sYWJlbHMucF9taW4gPSB0aGlzLmxhYmVscy53X21pbiAvIHRoaXMuY29vcmRzLndfcnMgKiAxMDA7XHJcbiAgICAgICAgICAgIHRoaXMubGFiZWxzLnBfbWF4ID0gdGhpcy5sYWJlbHMud19tYXggLyB0aGlzLmNvb3Jkcy53X3JzICogMTAwO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1lYXN1cmUgbGFiZWxzIHdpZHRoIGFuZCBYIGluIHBlcmNlbnRcclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxjTGFiZWxzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jb29yZHMud19ycyB8fCB0aGlzLm9wdGlvbnMuaGlkZV9mcm9tX3RvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHlwZSA9PT0gXCJzaW5nbGVcIikge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubGFiZWxzLndfc2luZ2xlID0gdGhpcy4kY2FjaGUuc2luZ2xlLm91dGVyV2lkdGgoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbHMucF9zaW5nbGVfZmFrZSA9IHRoaXMubGFiZWxzLndfc2luZ2xlIC8gdGhpcy5jb29yZHMud19ycyAqIDEwMDtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFiZWxzLnBfc2luZ2xlX2xlZnQgPSB0aGlzLmNvb3Jkcy5wX3NpbmdsZV9mYWtlICsgKHRoaXMuY29vcmRzLnBfaGFuZGxlIC8gMikgLSAodGhpcy5sYWJlbHMucF9zaW5nbGVfZmFrZSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbHMucF9zaW5nbGVfbGVmdCA9IHRoaXMuY2hlY2tFZGdlcyh0aGlzLmxhYmVscy5wX3NpbmdsZV9sZWZ0LCB0aGlzLmxhYmVscy5wX3NpbmdsZV9mYWtlKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbHMud19mcm9tID0gdGhpcy4kY2FjaGUuZnJvbS5vdXRlcldpZHRoKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFiZWxzLnBfZnJvbV9mYWtlID0gdGhpcy5sYWJlbHMud19mcm9tIC8gdGhpcy5jb29yZHMud19ycyAqIDEwMDtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFiZWxzLnBfZnJvbV9sZWZ0ID0gdGhpcy5jb29yZHMucF9mcm9tX2Zha2UgKyAodGhpcy5jb29yZHMucF9oYW5kbGUgLyAyKSAtICh0aGlzLmxhYmVscy5wX2Zyb21fZmFrZSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbHMucF9mcm9tX2xlZnQgPSB0aGlzLnRvRml4ZWQodGhpcy5sYWJlbHMucF9mcm9tX2xlZnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbHMucF9mcm9tX2xlZnQgPSB0aGlzLmNoZWNrRWRnZXModGhpcy5sYWJlbHMucF9mcm9tX2xlZnQsIHRoaXMubGFiZWxzLnBfZnJvbV9mYWtlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVscy53X3RvID0gdGhpcy4kY2FjaGUudG8ub3V0ZXJXaWR0aChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVscy5wX3RvX2Zha2UgPSB0aGlzLmxhYmVscy53X3RvIC8gdGhpcy5jb29yZHMud19ycyAqIDEwMDtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFiZWxzLnBfdG9fbGVmdCA9IHRoaXMuY29vcmRzLnBfdG9fZmFrZSArICh0aGlzLmNvb3Jkcy5wX2hhbmRsZSAvIDIpIC0gKHRoaXMubGFiZWxzLnBfdG9fZmFrZSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbHMucF90b19sZWZ0ID0gdGhpcy50b0ZpeGVkKHRoaXMubGFiZWxzLnBfdG9fbGVmdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVscy5wX3RvX2xlZnQgPSB0aGlzLmNoZWNrRWRnZXModGhpcy5sYWJlbHMucF90b19sZWZ0LCB0aGlzLmxhYmVscy5wX3RvX2Zha2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubGFiZWxzLndfc2luZ2xlID0gdGhpcy4kY2FjaGUuc2luZ2xlLm91dGVyV2lkdGgoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbHMucF9zaW5nbGVfZmFrZSA9IHRoaXMubGFiZWxzLndfc2luZ2xlIC8gdGhpcy5jb29yZHMud19ycyAqIDEwMDtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFiZWxzLnBfc2luZ2xlX2xlZnQgPSAoKHRoaXMubGFiZWxzLnBfZnJvbV9sZWZ0ICsgdGhpcy5sYWJlbHMucF90b19sZWZ0ICsgdGhpcy5sYWJlbHMucF90b19mYWtlKSAvIDIpIC0gKHRoaXMubGFiZWxzLnBfc2luZ2xlX2Zha2UgLyAyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFiZWxzLnBfc2luZ2xlX2xlZnQgPSB0aGlzLnRvRml4ZWQodGhpcy5sYWJlbHMucF9zaW5nbGVfbGVmdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVscy5wX3NpbmdsZV9sZWZ0ID0gdGhpcy5jaGVja0VkZ2VzKHRoaXMubGFiZWxzLnBfc2luZ2xlX2xlZnQsIHRoaXMubGFiZWxzLnBfc2luZ2xlX2Zha2UpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgICAgIC8vIERyYXdpbmdzXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1haW4gZnVuY3Rpb24gY2FsbGVkIGluIHJlcXVlc3QgYW5pbWF0aW9uIGZyYW1lXHJcbiAgICAgICAgICogdG8gdXBkYXRlIGV2ZXJ5dGhpbmdcclxuICAgICAgICAgKi9cclxuICAgICAgICB1cGRhdGVTY2VuZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yYWZfaWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMucmFmX2lkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmFmX2lkID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudXBkYXRlX3RtKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVfdG0gPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5kcmF3SGFuZGxlcygpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNfYWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJhZl9pZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZVNjZW5lLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVfdG0gPSBzZXRUaW1lb3V0KHRoaXMudXBkYXRlU2NlbmUuYmluZCh0aGlzKSwgMzAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERyYXcgaGFuZGxlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRyYXdIYW5kbGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29vcmRzLndfcnMgPSB0aGlzLiRjYWNoZS5ycy5vdXRlcldpZHRoKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jb29yZHMud19ycykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb29yZHMud19ycyAhPT0gdGhpcy5jb29yZHMud19yc19vbGQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gXCJiYXNlXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzX3Jlc2l6ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvb3Jkcy53X3JzICE9PSB0aGlzLmNvb3Jkcy53X3JzX29sZCB8fCB0aGlzLmZvcmNlX3JlZHJhdykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRNaW5NYXgoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsYyh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0xhYmVscygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5ncmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxjR3JpZE1hcmdpbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsY0dyaWRMYWJlbHMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VfcmVkcmF3ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLndfcnNfb2xkID0gdGhpcy5jb29yZHMud19ycztcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd1NoYWRvdygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29vcmRzLndfcnMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWdnaW5nICYmICF0aGlzLmZvcmNlX3JlZHJhdyAmJiAhdGhpcy5pc19rZXkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub2xkX2Zyb20gIT09IHRoaXMucmVzdWx0LmZyb20gfHwgdGhpcy5vbGRfdG8gIT09IHRoaXMucmVzdWx0LnRvIHx8IHRoaXMuZm9yY2VfcmVkcmF3IHx8IHRoaXMuaXNfa2V5KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3TGFiZWxzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuYmFyWzBdLnN0eWxlLmxlZnQgPSB0aGlzLmNvb3Jkcy5wX2Jhcl94ICsgXCIlXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5iYXJbMF0uc3R5bGUud2lkdGggPSB0aGlzLmNvb3Jkcy5wX2Jhcl93ICsgXCIlXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50eXBlID09PSBcInNpbmdsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuc19zaW5nbGVbMF0uc3R5bGUubGVmdCA9IHRoaXMuY29vcmRzLnBfc2luZ2xlX2Zha2UgKyBcIiVcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuc2luZ2xlWzBdLnN0eWxlLmxlZnQgPSB0aGlzLmxhYmVscy5wX3NpbmdsZV9sZWZ0ICsgXCIlXCI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNfZnJvbVswXS5zdHlsZS5sZWZ0ID0gdGhpcy5jb29yZHMucF9mcm9tX2Zha2UgKyBcIiVcIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zX3RvWzBdLnN0eWxlLmxlZnQgPSB0aGlzLmNvb3Jkcy5wX3RvX2Zha2UgKyBcIiVcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub2xkX2Zyb20gIT09IHRoaXMucmVzdWx0LmZyb20gfHwgdGhpcy5mb3JjZV9yZWRyYXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuZnJvbVswXS5zdHlsZS5sZWZ0ID0gdGhpcy5sYWJlbHMucF9mcm9tX2xlZnQgKyBcIiVcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub2xkX3RvICE9PSB0aGlzLnJlc3VsdC50byB8fCB0aGlzLmZvcmNlX3JlZHJhdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS50b1swXS5zdHlsZS5sZWZ0ID0gdGhpcy5sYWJlbHMucF90b19sZWZ0ICsgXCIlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zaW5nbGVbMF0uc3R5bGUubGVmdCA9IHRoaXMubGFiZWxzLnBfc2luZ2xlX2xlZnQgKyBcIiVcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlVG9JbnB1dCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgodGhpcy5vbGRfZnJvbSAhPT0gdGhpcy5yZXN1bHQuZnJvbSB8fCB0aGlzLm9sZF90byAhPT0gdGhpcy5yZXN1bHQudG8pICYmICF0aGlzLmlzX3N0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuaW5wdXQudHJpZ2dlcihcImNoYW5nZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5pbnB1dC50cmlnZ2VyKFwiaW5wdXRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbGRfZnJvbSA9IHRoaXMucmVzdWx0LmZyb207XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9sZF90byA9IHRoaXMucmVzdWx0LnRvO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrcyBjYWxsXHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNfcmVzaXplICYmICF0aGlzLmlzX3VwZGF0ZSAmJiAhdGhpcy5pc19zdGFydCAmJiAhdGhpcy5pc19maW5pc2gpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxPbkNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNfa2V5IHx8IHRoaXMuaXNfY2xpY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzX2tleSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNfY2xpY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxPbkZpbmlzaCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuaXNfdXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzX3Jlc2l6ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc19maW5pc2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5pc19zdGFydCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmlzX2tleSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmlzX2NsaWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZm9yY2VfcmVkcmF3ID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRHJhdyBsYWJlbHNcclxuICAgICAgICAgKiBtZWFzdXJlIGxhYmVscyBjb2xsaXNpb25zXHJcbiAgICAgICAgICogY29sbGFwc2UgY2xvc2UgbGFiZWxzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZHJhd0xhYmVsczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgdmFsdWVzX251bSA9IHRoaXMub3B0aW9ucy52YWx1ZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgcF92YWx1ZXMgPSB0aGlzLm9wdGlvbnMucF92YWx1ZXM7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0X3NpbmdsZTtcclxuICAgICAgICAgICAgdmFyIHRleHRfZnJvbTtcclxuICAgICAgICAgICAgdmFyIHRleHRfdG87XHJcbiAgICAgICAgICAgIHZhciBmcm9tX3ByZXR0eTtcclxuICAgICAgICAgICAgdmFyIHRvX3ByZXR0eTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaGlkZV9mcm9tX3RvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHlwZSA9PT0gXCJzaW5nbGVcIikge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNfbnVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dF9zaW5nbGUgPSB0aGlzLmRlY29yYXRlKHBfdmFsdWVzW3RoaXMucmVzdWx0LmZyb21dKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zaW5nbGUuaHRtbCh0ZXh0X3NpbmdsZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb21fcHJldHR5ID0gdGhpcy5fcHJldHRpZnkodGhpcy5yZXN1bHQuZnJvbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRleHRfc2luZ2xlID0gdGhpcy5kZWNvcmF0ZShmcm9tX3ByZXR0eSwgdGhpcy5yZXN1bHQuZnJvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuc2luZ2xlLmh0bWwodGV4dF9zaW5nbGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsY0xhYmVscygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxhYmVscy5wX3NpbmdsZV9sZWZ0IDwgdGhpcy5sYWJlbHMucF9taW4gKyAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUubWluWzBdLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5taW5bMF0uc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxhYmVscy5wX3NpbmdsZV9sZWZ0ICsgdGhpcy5sYWJlbHMucF9zaW5nbGVfZmFrZSA+IDEwMCAtIHRoaXMubGFiZWxzLnBfbWF4IC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLm1heFswXS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUubWF4WzBdLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc19udW0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWNvcmF0ZV9ib3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfc2luZ2xlID0gdGhpcy5kZWNvcmF0ZShwX3ZhbHVlc1t0aGlzLnJlc3VsdC5mcm9tXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfc2luZ2xlICs9IHRoaXMub3B0aW9ucy52YWx1ZXNfc2VwYXJhdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0X3NpbmdsZSArPSB0aGlzLmRlY29yYXRlKHBfdmFsdWVzW3RoaXMucmVzdWx0LnRvXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9zaW5nbGUgPSB0aGlzLmRlY29yYXRlKHBfdmFsdWVzW3RoaXMucmVzdWx0LmZyb21dICsgdGhpcy5vcHRpb25zLnZhbHVlc19zZXBhcmF0b3IgKyBwX3ZhbHVlc1t0aGlzLnJlc3VsdC50b10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2Zyb20gPSB0aGlzLmRlY29yYXRlKHBfdmFsdWVzW3RoaXMucmVzdWx0LmZyb21dKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0X3RvID0gdGhpcy5kZWNvcmF0ZShwX3ZhbHVlc1t0aGlzLnJlc3VsdC50b10pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zaW5nbGUuaHRtbCh0ZXh0X3NpbmdsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuZnJvbS5odG1sKHRleHRfZnJvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUudG8uaHRtbCh0ZXh0X3RvKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb21fcHJldHR5ID0gdGhpcy5fcHJldHRpZnkodGhpcy5yZXN1bHQuZnJvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9fcHJldHR5ID0gdGhpcy5fcHJldHRpZnkodGhpcy5yZXN1bHQudG8pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRlY29yYXRlX2JvdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9zaW5nbGUgPSB0aGlzLmRlY29yYXRlKGZyb21fcHJldHR5LCB0aGlzLnJlc3VsdC5mcm9tKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9zaW5nbGUgKz0gdGhpcy5vcHRpb25zLnZhbHVlc19zZXBhcmF0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRfc2luZ2xlICs9IHRoaXMuZGVjb3JhdGUodG9fcHJldHR5LCB0aGlzLnJlc3VsdC50byk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dF9zaW5nbGUgPSB0aGlzLmRlY29yYXRlKGZyb21fcHJldHR5ICsgdGhpcy5vcHRpb25zLnZhbHVlc19zZXBhcmF0b3IgKyB0b19wcmV0dHksIHRoaXMucmVzdWx0LnRvKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dF9mcm9tID0gdGhpcy5kZWNvcmF0ZShmcm9tX3ByZXR0eSwgdGhpcy5yZXN1bHQuZnJvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dF90byA9IHRoaXMuZGVjb3JhdGUodG9fcHJldHR5LCB0aGlzLnJlc3VsdC50byk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnNpbmdsZS5odG1sKHRleHRfc2luZ2xlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5mcm9tLmh0bWwodGV4dF9mcm9tKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS50by5odG1sKHRleHRfdG8pO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGNMYWJlbHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbWluID0gTWF0aC5taW4odGhpcy5sYWJlbHMucF9zaW5nbGVfbGVmdCwgdGhpcy5sYWJlbHMucF9mcm9tX2xlZnQpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpbmdsZV9sZWZ0ID0gdGhpcy5sYWJlbHMucF9zaW5nbGVfbGVmdCArIHRoaXMubGFiZWxzLnBfc2luZ2xlX2Zha2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9fbGVmdCA9IHRoaXMubGFiZWxzLnBfdG9fbGVmdCArIHRoaXMubGFiZWxzLnBfdG9fZmFrZSxcclxuICAgICAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChzaW5nbGVfbGVmdCwgdG9fbGVmdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGFiZWxzLnBfZnJvbV9sZWZ0ICsgdGhpcy5sYWJlbHMucF9mcm9tX2Zha2UgPj0gdGhpcy5sYWJlbHMucF90b19sZWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuZnJvbVswXS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS50b1swXS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zaW5nbGVbMF0uc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXN1bHQuZnJvbSA9PT0gdGhpcy5yZXN1bHQudG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ID09PSBcImZyb21cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuZnJvbVswXS5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXQgPT09IFwidG9cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUudG9bMF0uc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLnRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuZnJvbVswXS5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuc2luZ2xlWzBdLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXggPSB0b19sZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLmZyb21bMF0uc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLnRvWzBdLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5zaW5nbGVbMF0uc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChzaW5nbGVfbGVmdCwgdG9fbGVmdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5mcm9tWzBdLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS50b1swXS5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuc2luZ2xlWzBdLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtaW4gPCB0aGlzLmxhYmVscy5wX21pbiArIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5taW5bMF0uc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLm1pblswXS5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1heCA+IDEwMCAtIHRoaXMubGFiZWxzLnBfbWF4IC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLm1heFswXS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUubWF4WzBdLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEcmF3IHNoYWRvdyBpbnRlcnZhbHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBkcmF3U2hhZG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvID0gdGhpcy5vcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgYyA9IHRoaXMuJGNhY2hlLFxyXG5cclxuICAgICAgICAgICAgICAgIGlzX2Zyb21fbWluID0gdHlwZW9mIG8uZnJvbV9taW4gPT09IFwibnVtYmVyXCIgJiYgIWlzTmFOKG8uZnJvbV9taW4pLFxyXG4gICAgICAgICAgICAgICAgaXNfZnJvbV9tYXggPSB0eXBlb2Ygby5mcm9tX21heCA9PT0gXCJudW1iZXJcIiAmJiAhaXNOYU4oby5mcm9tX21heCksXHJcbiAgICAgICAgICAgICAgICBpc190b19taW4gPSB0eXBlb2Ygby50b19taW4gPT09IFwibnVtYmVyXCIgJiYgIWlzTmFOKG8udG9fbWluKSxcclxuICAgICAgICAgICAgICAgIGlzX3RvX21heCA9IHR5cGVvZiBvLnRvX21heCA9PT0gXCJudW1iZXJcIiAmJiAhaXNOYU4oby50b19tYXgpLFxyXG5cclxuICAgICAgICAgICAgICAgIGZyb21fbWluLFxyXG4gICAgICAgICAgICAgICAgZnJvbV9tYXgsXHJcbiAgICAgICAgICAgICAgICB0b19taW4sXHJcbiAgICAgICAgICAgICAgICB0b19tYXg7XHJcblxyXG4gICAgICAgICAgICBpZiAoby50eXBlID09PSBcInNpbmdsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoby5mcm9tX3NoYWRvdyAmJiAoaXNfZnJvbV9taW4gfHwgaXNfZnJvbV9tYXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbV9taW4gPSB0aGlzLmNvbnZlcnRUb1BlcmNlbnQoaXNfZnJvbV9taW4gPyBvLmZyb21fbWluIDogby5taW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb21fbWF4ID0gdGhpcy5jb252ZXJ0VG9QZXJjZW50KGlzX2Zyb21fbWF4ID8gby5mcm9tX21heCA6IG8ubWF4KSAtIGZyb21fbWluO1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb21fbWluID0gdGhpcy50b0ZpeGVkKGZyb21fbWluIC0gKHRoaXMuY29vcmRzLnBfaGFuZGxlIC8gMTAwICogZnJvbV9taW4pKTtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tX21heCA9IHRoaXMudG9GaXhlZChmcm9tX21heCAtICh0aGlzLmNvb3Jkcy5wX2hhbmRsZSAvIDEwMCAqIGZyb21fbWF4KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbV9taW4gPSBmcm9tX21pbiArICh0aGlzLmNvb3Jkcy5wX2hhbmRsZSAvIDIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjLnNoYWRfc2luZ2xlWzBdLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYy5zaGFkX3NpbmdsZVswXS5zdHlsZS5sZWZ0ID0gZnJvbV9taW4gKyBcIiVcIjtcclxuICAgICAgICAgICAgICAgICAgICBjLnNoYWRfc2luZ2xlWzBdLnN0eWxlLndpZHRoID0gZnJvbV9tYXggKyBcIiVcIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYy5zaGFkX3NpbmdsZVswXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoby5mcm9tX3NoYWRvdyAmJiAoaXNfZnJvbV9taW4gfHwgaXNfZnJvbV9tYXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbV9taW4gPSB0aGlzLmNvbnZlcnRUb1BlcmNlbnQoaXNfZnJvbV9taW4gPyBvLmZyb21fbWluIDogby5taW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb21fbWF4ID0gdGhpcy5jb252ZXJ0VG9QZXJjZW50KGlzX2Zyb21fbWF4ID8gby5mcm9tX21heCA6IG8ubWF4KSAtIGZyb21fbWluO1xyXG4gICAgICAgICAgICAgICAgICAgIGZyb21fbWluID0gdGhpcy50b0ZpeGVkKGZyb21fbWluIC0gKHRoaXMuY29vcmRzLnBfaGFuZGxlIC8gMTAwICogZnJvbV9taW4pKTtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tX21heCA9IHRoaXMudG9GaXhlZChmcm9tX21heCAtICh0aGlzLmNvb3Jkcy5wX2hhbmRsZSAvIDEwMCAqIGZyb21fbWF4KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbV9taW4gPSBmcm9tX21pbiArICh0aGlzLmNvb3Jkcy5wX2hhbmRsZSAvIDIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjLnNoYWRfZnJvbVswXS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgICAgICAgICAgICAgIGMuc2hhZF9mcm9tWzBdLnN0eWxlLmxlZnQgPSBmcm9tX21pbiArIFwiJVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGMuc2hhZF9mcm9tWzBdLnN0eWxlLndpZHRoID0gZnJvbV9tYXggKyBcIiVcIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYy5zaGFkX2Zyb21bMF0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvLnRvX3NoYWRvdyAmJiAoaXNfdG9fbWluIHx8IGlzX3RvX21heCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b19taW4gPSB0aGlzLmNvbnZlcnRUb1BlcmNlbnQoaXNfdG9fbWluID8gby50b19taW4gOiBvLm1pbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9fbWF4ID0gdGhpcy5jb252ZXJ0VG9QZXJjZW50KGlzX3RvX21heCA/IG8udG9fbWF4IDogby5tYXgpIC0gdG9fbWluO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvX21pbiA9IHRoaXMudG9GaXhlZCh0b19taW4gLSAodGhpcy5jb29yZHMucF9oYW5kbGUgLyAxMDAgKiB0b19taW4pKTtcclxuICAgICAgICAgICAgICAgICAgICB0b19tYXggPSB0aGlzLnRvRml4ZWQodG9fbWF4IC0gKHRoaXMuY29vcmRzLnBfaGFuZGxlIC8gMTAwICogdG9fbWF4KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9fbWluID0gdG9fbWluICsgKHRoaXMuY29vcmRzLnBfaGFuZGxlIC8gMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGMuc2hhZF90b1swXS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgICAgICAgICAgICAgIGMuc2hhZF90b1swXS5zdHlsZS5sZWZ0ID0gdG9fbWluICsgXCIlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYy5zaGFkX3RvWzBdLnN0eWxlLndpZHRoID0gdG9fbWF4ICsgXCIlXCI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGMuc2hhZF90b1swXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdyaXRlIHZhbHVlcyB0byBpbnB1dCBlbGVtZW50XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgd3JpdGVUb0lucHV0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHlwZSA9PT0gXCJzaW5nbGVcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy52YWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuaW5wdXQucHJvcChcInZhbHVlXCIsIHRoaXMucmVzdWx0LmZyb21fdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5pbnB1dC5wcm9wKFwidmFsdWVcIiwgdGhpcy5yZXN1bHQuZnJvbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5pbnB1dC5kYXRhKFwiZnJvbVwiLCB0aGlzLnJlc3VsdC5mcm9tKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLmlucHV0LnByb3AoXCJ2YWx1ZVwiLCB0aGlzLnJlc3VsdC5mcm9tX3ZhbHVlICsgdGhpcy5vcHRpb25zLmlucHV0X3ZhbHVlc19zZXBhcmF0b3IgKyB0aGlzLnJlc3VsdC50b192YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLmlucHV0LnByb3AoXCJ2YWx1ZVwiLCB0aGlzLnJlc3VsdC5mcm9tICsgdGhpcy5vcHRpb25zLmlucHV0X3ZhbHVlc19zZXBhcmF0b3IgKyB0aGlzLnJlc3VsdC50byk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRjYWNoZS5pbnB1dC5kYXRhKFwiZnJvbVwiLCB0aGlzLnJlc3VsdC5mcm9tKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLmlucHV0LmRhdGEoXCJ0b1wiLCB0aGlzLnJlc3VsdC50byk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuXHJcblxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICAgICAvLyBDYWxsYmFja3NcclxuXHJcbiAgICAgICAgY2FsbE9uU3RhcnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy53cml0ZVRvSW5wdXQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMub25TdGFydCAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLm9uU3RhcnQgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zY29wZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5vblN0YXJ0LmNhbGwodGhpcy5vcHRpb25zLnNjb3BlLCB0aGlzLnJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5vblN0YXJ0KHRoaXMucmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2FsbE9uQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMud3JpdGVUb0lucHV0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm9uQ2hhbmdlICYmIHR5cGVvZiB0aGlzLm9wdGlvbnMub25DaGFuZ2UgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zY29wZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5vbkNoYW5nZS5jYWxsKHRoaXMub3B0aW9ucy5zY29wZSwgdGhpcy5yZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMub25DaGFuZ2UodGhpcy5yZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjYWxsT25GaW5pc2g6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy53cml0ZVRvSW5wdXQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMub25GaW5pc2ggJiYgdHlwZW9mIHRoaXMub3B0aW9ucy5vbkZpbmlzaCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNjb3BlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm9uRmluaXNoLmNhbGwodGhpcy5vcHRpb25zLnNjb3BlLCB0aGlzLnJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5vbkZpbmlzaCh0aGlzLnJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGNhbGxPblVwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLndyaXRlVG9JbnB1dCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5vblVwZGF0ZSAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLm9uVXBkYXRlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2NvcGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUuY2FsbCh0aGlzLm9wdGlvbnMuc2NvcGUsIHRoaXMucmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKHRoaXMucmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICAgICAvLyBTZXJ2aWNlIG1ldGhvZHNcclxuXHJcbiAgICAgICAgdG9nZ2xlSW5wdXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUuaW5wdXQudG9nZ2xlQ2xhc3MoXCJpcnMtaGlkZGVuLWlucHV0XCIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzX3RhYl9pbmRleCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY2FjaGUuaW5wdXQucHJvcChcInRhYmluZGV4XCIsIC0xKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLmlucHV0LnJlbW92ZVByb3AoXCJ0YWJpbmRleFwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5oYXNfdGFiX2luZGV4ID0gIXRoaXMuaGFzX3RhYl9pbmRleDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb252ZXJ0IHJlYWwgdmFsdWUgdG8gcGVyY2VudFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIHtOdW1iZXJ9IFggaW4gcmVhbFxyXG4gICAgICAgICAqIEBwYXJhbSBub19taW4ge2Jvb2xlYW49fSBkb24ndCB1c2UgbWluIHZhbHVlXHJcbiAgICAgICAgICogQHJldHVybnMge051bWJlcn0gWCBpbiBwZXJjZW50XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29udmVydFRvUGVyY2VudDogZnVuY3Rpb24gKHZhbHVlLCBub19taW4pIHtcclxuICAgICAgICAgICAgdmFyIGRpYXBhc29uID0gdGhpcy5vcHRpb25zLm1heCAtIHRoaXMub3B0aW9ucy5taW4sXHJcbiAgICAgICAgICAgICAgICBvbmVfcGVyY2VudCA9IGRpYXBhc29uIC8gMTAwLFxyXG4gICAgICAgICAgICAgICAgdmFsLCBwZXJjZW50O1xyXG5cclxuICAgICAgICAgICAgaWYgKCFkaWFwYXNvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub19kaWFwYXNvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG5vX21pbikge1xyXG4gICAgICAgICAgICAgICAgdmFsID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YWwgPSB2YWx1ZSAtIHRoaXMub3B0aW9ucy5taW47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHBlcmNlbnQgPSB2YWwgLyBvbmVfcGVyY2VudDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRml4ZWQocGVyY2VudCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udmVydCBwZXJjZW50IHRvIHJlYWwgdmFsdWVzXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gcGVyY2VudCB7TnVtYmVyfSBYIGluIHBlcmNlbnRcclxuICAgICAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBYIGluIHJlYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb252ZXJ0VG9WYWx1ZTogZnVuY3Rpb24gKHBlcmNlbnQpIHtcclxuICAgICAgICAgICAgdmFyIG1pbiA9IHRoaXMub3B0aW9ucy5taW4sXHJcbiAgICAgICAgICAgICAgICBtYXggPSB0aGlzLm9wdGlvbnMubWF4LFxyXG4gICAgICAgICAgICAgICAgbWluX2RlY2ltYWxzID0gbWluLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdLFxyXG4gICAgICAgICAgICAgICAgbWF4X2RlY2ltYWxzID0gbWF4LnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdLFxyXG4gICAgICAgICAgICAgICAgbWluX2xlbmd0aCwgbWF4X2xlbmd0aCxcclxuICAgICAgICAgICAgICAgIGF2Z19kZWNpbWFscyA9IDAsXHJcbiAgICAgICAgICAgICAgICBhYnMgPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBlcmNlbnQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubWluO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwZXJjZW50ID09PSAxMDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubWF4O1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKG1pbl9kZWNpbWFscykge1xyXG4gICAgICAgICAgICAgICAgbWluX2xlbmd0aCA9IG1pbl9kZWNpbWFscy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBhdmdfZGVjaW1hbHMgPSBtaW5fbGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChtYXhfZGVjaW1hbHMpIHtcclxuICAgICAgICAgICAgICAgIG1heF9sZW5ndGggPSBtYXhfZGVjaW1hbHMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgYXZnX2RlY2ltYWxzID0gbWF4X2xlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobWluX2xlbmd0aCAmJiBtYXhfbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBhdmdfZGVjaW1hbHMgPSAobWluX2xlbmd0aCA+PSBtYXhfbGVuZ3RoKSA/IG1pbl9sZW5ndGggOiBtYXhfbGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobWluIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgYWJzID0gTWF0aC5hYnMobWluKTtcclxuICAgICAgICAgICAgICAgIG1pbiA9ICsobWluICsgYWJzKS50b0ZpeGVkKGF2Z19kZWNpbWFscyk7XHJcbiAgICAgICAgICAgICAgICBtYXggPSArKG1heCArIGFicykudG9GaXhlZChhdmdfZGVjaW1hbHMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgbnVtYmVyID0gKChtYXggLSBtaW4pIC8gMTAwICogcGVyY2VudCkgKyBtaW4sXHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSB0aGlzLm9wdGlvbnMuc3RlcC50b1N0cmluZygpLnNwbGl0KFwiLlwiKVsxXSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDtcclxuXHJcbiAgICAgICAgICAgIGlmIChzdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgIG51bWJlciA9ICtudW1iZXIudG9GaXhlZChzdHJpbmcubGVuZ3RoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG51bWJlciA9IG51bWJlciAvIHRoaXMub3B0aW9ucy5zdGVwO1xyXG4gICAgICAgICAgICAgICAgbnVtYmVyID0gbnVtYmVyICogdGhpcy5vcHRpb25zLnN0ZXA7XHJcblxyXG4gICAgICAgICAgICAgICAgbnVtYmVyID0gK251bWJlci50b0ZpeGVkKDApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYWJzKSB7XHJcbiAgICAgICAgICAgICAgICBudW1iZXIgLT0gYWJzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSArbnVtYmVyLnRvRml4ZWQoc3RyaW5nLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLnRvRml4ZWQobnVtYmVyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA8IHRoaXMub3B0aW9ucy5taW4pIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMub3B0aW9ucy5taW47XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ID4gdGhpcy5vcHRpb25zLm1heCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5vcHRpb25zLm1heDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSb3VuZCBwZXJjZW50IHZhbHVlIHdpdGggc3RlcFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHBlcmNlbnQge051bWJlcn1cclxuICAgICAgICAgKiBAcmV0dXJucyBwZXJjZW50IHtOdW1iZXJ9IHJvdW5kZWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxjV2l0aFN0ZXA6IGZ1bmN0aW9uIChwZXJjZW50KSB7XHJcbiAgICAgICAgICAgIHZhciByb3VuZGVkID0gTWF0aC5yb3VuZChwZXJjZW50IC8gdGhpcy5jb29yZHMucF9zdGVwKSAqIHRoaXMuY29vcmRzLnBfc3RlcDtcclxuXHJcbiAgICAgICAgICAgIGlmIChyb3VuZGVkID4gMTAwKSB7XHJcbiAgICAgICAgICAgICAgICByb3VuZGVkID0gMTAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwZXJjZW50ID09PSAxMDApIHtcclxuICAgICAgICAgICAgICAgIHJvdW5kZWQgPSAxMDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRml4ZWQocm91bmRlZCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2hlY2tNaW5JbnRlcnZhbDogZnVuY3Rpb24gKHBfY3VycmVudCwgcF9uZXh0LCB0eXBlKSB7XHJcbiAgICAgICAgICAgIHZhciBvID0gdGhpcy5vcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudCxcclxuICAgICAgICAgICAgICAgIG5leHQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoIW8ubWluX2ludGVydmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcF9jdXJyZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50ID0gdGhpcy5jb252ZXJ0VG9WYWx1ZShwX2N1cnJlbnQpO1xyXG4gICAgICAgICAgICBuZXh0ID0gdGhpcy5jb252ZXJ0VG9WYWx1ZShwX25leHQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwiZnJvbVwiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQgLSBjdXJyZW50IDwgby5taW5faW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gbmV4dCAtIG8ubWluX2ludGVydmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCAtIG5leHQgPCBvLm1pbl9pbnRlcnZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBuZXh0ICsgby5taW5faW50ZXJ2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0VG9QZXJjZW50KGN1cnJlbnQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNoZWNrTWF4SW50ZXJ2YWw6IGZ1bmN0aW9uIChwX2N1cnJlbnQsIHBfbmV4dCwgdHlwZSkge1xyXG4gICAgICAgICAgICB2YXIgbyA9IHRoaXMub3B0aW9ucyxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXHJcbiAgICAgICAgICAgICAgICBuZXh0O1xyXG5cclxuICAgICAgICAgICAgaWYgKCFvLm1heF9pbnRlcnZhbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBfY3VycmVudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuY29udmVydFRvVmFsdWUocF9jdXJyZW50KTtcclxuICAgICAgICAgICAgbmV4dCA9IHRoaXMuY29udmVydFRvVmFsdWUocF9uZXh0KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcImZyb21cIikge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChuZXh0IC0gY3VycmVudCA+IG8ubWF4X2ludGVydmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IG5leHQgLSBvLm1heF9pbnRlcnZhbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgLSBuZXh0ID4gby5tYXhfaW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gbmV4dCArIG8ubWF4X2ludGVydmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydFRvUGVyY2VudChjdXJyZW50KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjaGVja0RpYXBhc29uOiBmdW5jdGlvbiAocF9udW0sIG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgIHZhciBudW0gPSB0aGlzLmNvbnZlcnRUb1ZhbHVlKHBfbnVtKSxcclxuICAgICAgICAgICAgICAgIG8gPSB0aGlzLm9wdGlvbnM7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1pbiAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgbWluID0gby5taW47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWF4ICE9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICBtYXggPSBvLm1heDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG51bSA8IG1pbikge1xyXG4gICAgICAgICAgICAgICAgbnVtID0gbWluO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobnVtID4gbWF4KSB7XHJcbiAgICAgICAgICAgICAgICBudW0gPSBtYXg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRUb1BlcmNlbnQobnVtKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b0ZpeGVkOiBmdW5jdGlvbiAobnVtKSB7XHJcbiAgICAgICAgICAgIG51bSA9IG51bS50b0ZpeGVkKDIwKTtcclxuICAgICAgICAgICAgcmV0dXJuICtudW07XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgX3ByZXR0aWZ5OiBmdW5jdGlvbiAobnVtKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnByZXR0aWZ5X2VuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudW07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucHJldHRpZnkgJiYgdHlwZW9mIHRoaXMub3B0aW9ucy5wcmV0dGlmeSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnByZXR0aWZ5KG51bSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcmV0dGlmeShudW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcHJldHRpZnk6IGZ1bmN0aW9uIChudW0pIHtcclxuICAgICAgICAgICAgdmFyIG4gPSBudW0udG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgcmV0dXJuIG4ucmVwbGFjZSgvKFxcZHsxLDN9KD89KD86XFxkXFxkXFxkKSsoPyFcXGQpKSkvZywgXCIkMVwiICsgdGhpcy5vcHRpb25zLnByZXR0aWZ5X3NlcGFyYXRvcik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2hlY2tFZGdlczogZnVuY3Rpb24gKGxlZnQsIHdpZHRoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmZvcmNlX2VkZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0ZpeGVkKGxlZnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobGVmdCA8IDApIHtcclxuICAgICAgICAgICAgICAgIGxlZnQgPSAwO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxlZnQgPiAxMDAgLSB3aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgbGVmdCA9IDEwMCAtIHdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b0ZpeGVkKGxlZnQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBvID0gdGhpcy5vcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgciA9IHRoaXMucmVzdWx0LFxyXG4gICAgICAgICAgICAgICAgdiA9IG8udmFsdWVzLFxyXG4gICAgICAgICAgICAgICAgdmwgPSB2Lmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgaTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygby5taW4gPT09IFwic3RyaW5nXCIpIG8ubWluID0gK28ubWluO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG8ubWF4ID09PSBcInN0cmluZ1wiKSBvLm1heCA9ICtvLm1heDtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvLmZyb20gPT09IFwic3RyaW5nXCIpIG8uZnJvbSA9ICtvLmZyb207XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygby50byA9PT0gXCJzdHJpbmdcIikgby50byA9ICtvLnRvO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG8uc3RlcCA9PT0gXCJzdHJpbmdcIikgby5zdGVwID0gK28uc3RlcDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygby5mcm9tX21pbiA9PT0gXCJzdHJpbmdcIikgby5mcm9tX21pbiA9ICtvLmZyb21fbWluO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG8uZnJvbV9tYXggPT09IFwic3RyaW5nXCIpIG8uZnJvbV9tYXggPSArby5mcm9tX21heDtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvLnRvX21pbiA9PT0gXCJzdHJpbmdcIikgby50b19taW4gPSArby50b19taW47XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygby50b19tYXggPT09IFwic3RyaW5nXCIpIG8udG9fbWF4ID0gK28udG9fbWF4O1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvLmdyaWRfbnVtID09PSBcInN0cmluZ1wiKSBvLmdyaWRfbnVtID0gK28uZ3JpZF9udW07XHJcblxyXG4gICAgICAgICAgICBpZiAoby5tYXggPCBvLm1pbikge1xyXG4gICAgICAgICAgICAgICAgby5tYXggPSBvLm1pbjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHZsKSB7XHJcbiAgICAgICAgICAgICAgICBvLnBfdmFsdWVzID0gW107XHJcbiAgICAgICAgICAgICAgICBvLm1pbiA9IDA7XHJcbiAgICAgICAgICAgICAgICBvLm1heCA9IHZsIC0gMTtcclxuICAgICAgICAgICAgICAgIG8uc3RlcCA9IDE7XHJcbiAgICAgICAgICAgICAgICBvLmdyaWRfbnVtID0gby5tYXg7XHJcbiAgICAgICAgICAgICAgICBvLmdyaWRfc25hcCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHZsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICt2W2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2W2ldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fcHJldHRpZnkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdltpXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG8ucF92YWx1ZXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygby5mcm9tICE9PSBcIm51bWJlclwiIHx8IGlzTmFOKG8uZnJvbSkpIHtcclxuICAgICAgICAgICAgICAgIG8uZnJvbSA9IG8ubWluO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG8udG8gIT09IFwibnVtYmVyXCIgfHwgaXNOYU4oby50bykpIHtcclxuICAgICAgICAgICAgICAgIG8udG8gPSBvLm1heDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG8udHlwZSA9PT0gXCJzaW5nbGVcIikge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvLmZyb20gPCBvLm1pbikgby5mcm9tID0gby5taW47XHJcbiAgICAgICAgICAgICAgICBpZiAoby5mcm9tID4gby5tYXgpIG8uZnJvbSA9IG8ubWF4O1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoby5mcm9tIDwgby5taW4pIG8uZnJvbSA9IG8ubWluO1xyXG4gICAgICAgICAgICAgICAgaWYgKG8uZnJvbSA+IG8ubWF4KSBvLmZyb20gPSBvLm1heDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoby50byA8IG8ubWluKSBvLnRvID0gby5taW47XHJcbiAgICAgICAgICAgICAgICBpZiAoby50byA+IG8ubWF4KSBvLnRvID0gby5tYXg7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudXBkYXRlX2NoZWNrLmZyb20pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudXBkYXRlX2NoZWNrLmZyb20gIT09IG8uZnJvbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoby5mcm9tID4gby50bykgby5mcm9tID0gby50bztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudXBkYXRlX2NoZWNrLnRvICE9PSBvLnRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLnRvIDwgby5mcm9tKSBvLnRvID0gby5mcm9tO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG8uZnJvbSA+IG8udG8pIG8uZnJvbSA9IG8udG87XHJcbiAgICAgICAgICAgICAgICBpZiAoby50byA8IG8uZnJvbSkgby50byA9IG8uZnJvbTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygby5zdGVwICE9PSBcIm51bWJlclwiIHx8IGlzTmFOKG8uc3RlcCkgfHwgIW8uc3RlcCB8fCBvLnN0ZXAgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBvLnN0ZXAgPSAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG8uZnJvbV9taW4gPT09IFwibnVtYmVyXCIgJiYgby5mcm9tIDwgby5mcm9tX21pbikge1xyXG4gICAgICAgICAgICAgICAgby5mcm9tID0gby5mcm9tX21pbjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvLmZyb21fbWF4ID09PSBcIm51bWJlclwiICYmIG8uZnJvbSA+IG8uZnJvbV9tYXgpIHtcclxuICAgICAgICAgICAgICAgIG8uZnJvbSA9IG8uZnJvbV9tYXg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygby50b19taW4gPT09IFwibnVtYmVyXCIgJiYgby50byA8IG8udG9fbWluKSB7XHJcbiAgICAgICAgICAgICAgICBvLnRvID0gby50b19taW47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygby50b19tYXggPT09IFwibnVtYmVyXCIgJiYgby5mcm9tID4gby50b19tYXgpIHtcclxuICAgICAgICAgICAgICAgIG8udG8gPSBvLnRvX21heDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyLm1pbiAhPT0gby5taW4pIHtcclxuICAgICAgICAgICAgICAgICAgICByLm1pbiA9IG8ubWluO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyLm1heCAhPT0gby5tYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICByLm1heCA9IG8ubWF4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyLmZyb20gPCByLm1pbiB8fCByLmZyb20gPiByLm1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHIuZnJvbSA9IG8uZnJvbTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoci50byA8IHIubWluIHx8IHIudG8gPiByLm1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHIudG8gPSBvLnRvO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG8ubWluX2ludGVydmFsICE9PSBcIm51bWJlclwiIHx8IGlzTmFOKG8ubWluX2ludGVydmFsKSB8fCAhby5taW5faW50ZXJ2YWwgfHwgby5taW5faW50ZXJ2YWwgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBvLm1pbl9pbnRlcnZhbCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygby5tYXhfaW50ZXJ2YWwgIT09IFwibnVtYmVyXCIgfHwgaXNOYU4oby5tYXhfaW50ZXJ2YWwpIHx8ICFvLm1heF9pbnRlcnZhbCB8fCBvLm1heF9pbnRlcnZhbCA8IDApIHtcclxuICAgICAgICAgICAgICAgIG8ubWF4X2ludGVydmFsID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG8ubWluX2ludGVydmFsICYmIG8ubWluX2ludGVydmFsID4gby5tYXggLSBvLm1pbikge1xyXG4gICAgICAgICAgICAgICAgby5taW5faW50ZXJ2YWwgPSBvLm1heCAtIG8ubWluO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoby5tYXhfaW50ZXJ2YWwgJiYgby5tYXhfaW50ZXJ2YWwgPiBvLm1heCAtIG8ubWluKSB7XHJcbiAgICAgICAgICAgICAgICBvLm1heF9pbnRlcnZhbCA9IG8ubWF4IC0gby5taW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBkZWNvcmF0ZTogZnVuY3Rpb24gKG51bSwgb3JpZ2luYWwpIHtcclxuICAgICAgICAgICAgdmFyIGRlY29yYXRlZCA9IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBvID0gdGhpcy5vcHRpb25zO1xyXG5cclxuICAgICAgICAgICAgaWYgKG8ucHJlZml4KSB7XHJcbiAgICAgICAgICAgICAgICBkZWNvcmF0ZWQgKz0gby5wcmVmaXg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlY29yYXRlZCArPSBudW07XHJcblxyXG4gICAgICAgICAgICBpZiAoby5tYXhfcG9zdGZpeCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG8udmFsdWVzLmxlbmd0aCAmJiBudW0gPT09IG8ucF92YWx1ZXNbby5tYXhdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVjb3JhdGVkICs9IG8ubWF4X3Bvc3RmaXg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8ucG9zdGZpeCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNvcmF0ZWQgKz0gXCIgXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcmlnaW5hbCA9PT0gby5tYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWNvcmF0ZWQgKz0gby5tYXhfcG9zdGZpeDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5wb3N0Zml4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY29yYXRlZCArPSBcIiBcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvLnBvc3RmaXgpIHtcclxuICAgICAgICAgICAgICAgIGRlY29yYXRlZCArPSBvLnBvc3RmaXg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkZWNvcmF0ZWQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlRnJvbTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc3VsdC5mcm9tID0gdGhpcy5vcHRpb25zLmZyb207XHJcbiAgICAgICAgICAgIHRoaXMucmVzdWx0LmZyb21fcGVyY2VudCA9IHRoaXMuY29udmVydFRvUGVyY2VudCh0aGlzLnJlc3VsdC5mcm9tKTtcclxuICAgICAgICAgICAgdGhpcy5yZXN1bHQuZnJvbV9wcmV0dHkgPSB0aGlzLl9wcmV0dGlmeSh0aGlzLnJlc3VsdC5mcm9tKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy52YWx1ZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0LmZyb21fdmFsdWUgPSB0aGlzLm9wdGlvbnMudmFsdWVzW3RoaXMucmVzdWx0LmZyb21dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlVG86IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXN1bHQudG8gPSB0aGlzLm9wdGlvbnMudG87XHJcbiAgICAgICAgICAgIHRoaXMucmVzdWx0LnRvX3BlcmNlbnQgPSB0aGlzLmNvbnZlcnRUb1BlcmNlbnQodGhpcy5yZXN1bHQudG8pO1xyXG4gICAgICAgICAgICB0aGlzLnJlc3VsdC50b19wcmV0dHkgPSB0aGlzLl9wcmV0dGlmeSh0aGlzLnJlc3VsdC50byk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdC50b192YWx1ZSA9IHRoaXMub3B0aW9ucy52YWx1ZXNbdGhpcy5yZXN1bHQudG9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlUmVzdWx0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzdWx0Lm1pbiA9IHRoaXMub3B0aW9ucy5taW47XHJcbiAgICAgICAgICAgIHRoaXMucmVzdWx0Lm1heCA9IHRoaXMub3B0aW9ucy5tYXg7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRnJvbSgpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRvKCk7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICAgICAvLyBHcmlkXHJcblxyXG4gICAgICAgIGFwcGVuZEdyaWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZ3JpZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgbyA9IHRoaXMub3B0aW9ucyxcclxuICAgICAgICAgICAgICAgIGksIHosXHJcblxyXG4gICAgICAgICAgICAgICAgdG90YWwgPSBvLm1heCAtIG8ubWluLFxyXG4gICAgICAgICAgICAgICAgYmlnX251bSA9IG8uZ3JpZF9udW0sXHJcbiAgICAgICAgICAgICAgICBiaWdfcCA9IDAsXHJcbiAgICAgICAgICAgICAgICBiaWdfdyA9IDAsXHJcblxyXG4gICAgICAgICAgICAgICAgc21hbGxfbWF4ID0gNCxcclxuICAgICAgICAgICAgICAgIGxvY2FsX3NtYWxsX21heCxcclxuICAgICAgICAgICAgICAgIHNtYWxsX3AsXHJcbiAgICAgICAgICAgICAgICBzbWFsbF93ID0gMCxcclxuXHJcbiAgICAgICAgICAgICAgICByZXN1bHQsXHJcbiAgICAgICAgICAgICAgICBodG1sID0gJyc7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2FsY0dyaWRNYXJnaW4oKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvLmdyaWRfc25hcCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0b3RhbCA+IDUwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmlnX251bSA9IDUwIC8gby5zdGVwO1xyXG4gICAgICAgICAgICAgICAgICAgIGJpZ19wID0gdGhpcy50b0ZpeGVkKG8uc3RlcCAvIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJpZ19udW0gPSB0b3RhbCAvIG8uc3RlcDtcclxuICAgICAgICAgICAgICAgICAgICBiaWdfcCA9IHRoaXMudG9GaXhlZChvLnN0ZXAgLyAodG90YWwgLyAxMDApKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBiaWdfcCA9IHRoaXMudG9GaXhlZCgxMDAgLyBiaWdfbnVtKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGJpZ19udW0gPiA0KSB7XHJcbiAgICAgICAgICAgICAgICBzbWFsbF9tYXggPSAzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChiaWdfbnVtID4gNykge1xyXG4gICAgICAgICAgICAgICAgc21hbGxfbWF4ID0gMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYmlnX251bSA+IDE0KSB7XHJcbiAgICAgICAgICAgICAgICBzbWFsbF9tYXggPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChiaWdfbnVtID4gMjgpIHtcclxuICAgICAgICAgICAgICAgIHNtYWxsX21heCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBiaWdfbnVtICsgMTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsb2NhbF9zbWFsbF9tYXggPSBzbWFsbF9tYXg7XHJcblxyXG4gICAgICAgICAgICAgICAgYmlnX3cgPSB0aGlzLnRvRml4ZWQoYmlnX3AgKiBpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYmlnX3cgPiAxMDApIHtcclxuICAgICAgICAgICAgICAgICAgICBiaWdfdyA9IDEwMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLmJpZ1tpXSA9IGJpZ193O1xyXG5cclxuICAgICAgICAgICAgICAgIHNtYWxsX3AgPSAoYmlnX3cgLSAoYmlnX3AgKiAoaSAtIDEpKSkgLyAobG9jYWxfc21hbGxfbWF4ICsgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh6ID0gMTsgeiA8PSBsb2NhbF9zbWFsbF9tYXg7IHorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiaWdfdyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNtYWxsX3cgPSB0aGlzLnRvRml4ZWQoYmlnX3cgLSAoc21hbGxfcCAqIHopKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPHNwYW4gY2xhc3M9XCJpcnMtZ3JpZC1wb2wgc21hbGxcIiBzdHlsZT1cImxlZnQ6ICcgKyBzbWFsbF93ICsgJyVcIj48L3NwYW4+JztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8c3BhbiBjbGFzcz1cImlycy1ncmlkLXBvbFwiIHN0eWxlPVwibGVmdDogJyArIGJpZ193ICsgJyVcIj48L3NwYW4+JztcclxuXHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmNvbnZlcnRUb1ZhbHVlKGJpZ193KTtcclxuICAgICAgICAgICAgICAgIGlmIChvLnZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBvLnBfdmFsdWVzW3Jlc3VsdF07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX3ByZXR0aWZ5KHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPHNwYW4gY2xhc3M9XCJpcnMtZ3JpZC10ZXh0IGpzLWdyaWQtdGV4dC0nICsgaSArICdcIiBzdHlsZT1cImxlZnQ6ICcgKyBiaWdfdyArICclXCI+JyArIHJlc3VsdCArICc8L3NwYW4+JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNvb3Jkcy5iaWdfbnVtID0gTWF0aC5jZWlsKGJpZ19udW0gKyAxKTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgdGhpcy4kY2FjaGUuY29udC5hZGRDbGFzcyhcImlycy13aXRoLWdyaWRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuJGNhY2hlLmdyaWQuaHRtbChodG1sKTtcclxuICAgICAgICAgICAgdGhpcy5jYWNoZUdyaWRMYWJlbHMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjYWNoZUdyaWRMYWJlbHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyICRsYWJlbCwgaSxcclxuICAgICAgICAgICAgICAgIG51bSA9IHRoaXMuY29vcmRzLmJpZ19udW07XHJcblxyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICRsYWJlbCA9IHRoaXMuJGNhY2hlLmdyaWQuZmluZChcIi5qcy1ncmlkLXRleHQtXCIgKyBpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNhY2hlLmdyaWRfbGFiZWxzLnB1c2goJGxhYmVsKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jYWxjR3JpZExhYmVscygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNhbGNHcmlkTGFiZWxzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBpLCBsYWJlbCwgc3RhcnQgPSBbXSwgZmluaXNoID0gW10sXHJcbiAgICAgICAgICAgICAgICBudW0gPSB0aGlzLmNvb3Jkcy5iaWdfbnVtO1xyXG5cclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5iaWdfd1tpXSA9IHRoaXMuJGNhY2hlLmdyaWRfbGFiZWxzW2ldLm91dGVyV2lkdGgoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb29yZHMuYmlnX3BbaV0gPSB0aGlzLnRvRml4ZWQodGhpcy5jb29yZHMuYmlnX3dbaV0gLyB0aGlzLmNvb3Jkcy53X3JzICogMTAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLmJpZ194W2ldID0gdGhpcy50b0ZpeGVkKHRoaXMuY29vcmRzLmJpZ19wW2ldIC8gMik7XHJcblxyXG4gICAgICAgICAgICAgICAgc3RhcnRbaV0gPSB0aGlzLnRvRml4ZWQodGhpcy5jb29yZHMuYmlnW2ldIC0gdGhpcy5jb29yZHMuYmlnX3hbaV0pO1xyXG4gICAgICAgICAgICAgICAgZmluaXNoW2ldID0gdGhpcy50b0ZpeGVkKHN0YXJ0W2ldICsgdGhpcy5jb29yZHMuYmlnX3BbaV0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZvcmNlX2VkZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRbMF0gPCAtdGhpcy5jb29yZHMuZ3JpZF9nYXApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydFswXSA9IC10aGlzLmNvb3Jkcy5ncmlkX2dhcDtcclxuICAgICAgICAgICAgICAgICAgICBmaW5pc2hbMF0gPSB0aGlzLnRvRml4ZWQoc3RhcnRbMF0gKyB0aGlzLmNvb3Jkcy5iaWdfcFswXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRzLmJpZ194WzBdID0gdGhpcy5jb29yZHMuZ3JpZF9nYXA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbmlzaFtudW0gLSAxXSA+IDEwMCArIHRoaXMuY29vcmRzLmdyaWRfZ2FwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoW251bSAtIDFdID0gMTAwICsgdGhpcy5jb29yZHMuZ3JpZF9nYXA7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRbbnVtIC0gMV0gPSB0aGlzLnRvRml4ZWQoZmluaXNoW251bSAtIDFdIC0gdGhpcy5jb29yZHMuYmlnX3BbbnVtIC0gMV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy5iaWdfeFtudW0gLSAxXSA9IHRoaXMudG9GaXhlZCh0aGlzLmNvb3Jkcy5iaWdfcFtudW0gLSAxXSAtIHRoaXMuY29vcmRzLmdyaWRfZ2FwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jYWxjR3JpZENvbGxpc2lvbigyLCBzdGFydCwgZmluaXNoKTtcclxuICAgICAgICAgICAgdGhpcy5jYWxjR3JpZENvbGxpc2lvbig0LCBzdGFydCwgZmluaXNoKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGFiZWwgPSB0aGlzLiRjYWNoZS5ncmlkX2xhYmVsc1tpXVswXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb29yZHMuYmlnX3hbaV0gIT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLnN0eWxlLm1hcmdpbkxlZnQgPSAtdGhpcy5jb29yZHMuYmlnX3hbaV0gKyBcIiVcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIENvbGxpc2lvbnMgQ2FsYyBCZXRhXHJcbiAgICAgICAgLy8gVE9ETzogUmVmYWN0b3IgdGhlbiBoYXZlIHBsZW50eSBvZiB0aW1lXHJcbiAgICAgICAgY2FsY0dyaWRDb2xsaXNpb246IGZ1bmN0aW9uIChzdGVwLCBzdGFydCwgZmluaXNoKSB7XHJcbiAgICAgICAgICAgIHZhciBpLCBuZXh0X2ksIGxhYmVsLFxyXG4gICAgICAgICAgICAgICAgbnVtID0gdGhpcy5jb29yZHMuYmlnX251bTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW07IGkgKz0gc3RlcCkge1xyXG4gICAgICAgICAgICAgICAgbmV4dF9pID0gaSArIChzdGVwIC8gMik7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dF9pID49IG51bSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxhYmVsID0gdGhpcy4kY2FjaGUuZ3JpZF9sYWJlbHNbbmV4dF9pXVswXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZmluaXNoW2ldIDw9IHN0YXJ0W25leHRfaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbC5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2FsY0dyaWRNYXJnaW46IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZ3JpZF9tYXJnaW4pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb29yZHMud19ycyA9IHRoaXMuJGNhY2hlLnJzLm91dGVyV2lkdGgoZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY29vcmRzLndfcnMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50eXBlID09PSBcInNpbmdsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvb3Jkcy53X2hhbmRsZSA9IHRoaXMuJGNhY2hlLnNfc2luZ2xlLm91dGVyV2lkdGgoZmFsc2UpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb29yZHMud19oYW5kbGUgPSB0aGlzLiRjYWNoZS5zX2Zyb20ub3V0ZXJXaWR0aChmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jb29yZHMucF9oYW5kbGUgPSB0aGlzLnRvRml4ZWQodGhpcy5jb29yZHMud19oYW5kbGUgIC8gdGhpcy5jb29yZHMud19ycyAqIDEwMCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29vcmRzLmdyaWRfZ2FwID0gdGhpcy50b0ZpeGVkKCh0aGlzLmNvb3Jkcy5wX2hhbmRsZSAvIDIpIC0gMC4xKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGNhY2hlLmdyaWRbMF0uc3R5bGUud2lkdGggPSB0aGlzLnRvRml4ZWQoMTAwIC0gdGhpcy5jb29yZHMucF9oYW5kbGUpICsgXCIlXCI7XHJcbiAgICAgICAgICAgIHRoaXMuJGNhY2hlLmdyaWRbMF0uc3R5bGUubGVmdCA9IHRoaXMuY29vcmRzLmdyaWRfZ2FwICsgXCIlXCI7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG5cclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5pc191cGRhdGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmZyb20gPSB0aGlzLnJlc3VsdC5mcm9tO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudG8gPSB0aGlzLnJlc3VsdC50bztcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVfY2hlY2suZnJvbSA9IHRoaXMucmVzdWx0LmZyb207XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlX2NoZWNrLnRvID0gdGhpcy5yZXN1bHQudG87XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmVzdWx0KG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50b2dnbGVJbnB1dCgpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmluaXQodHJ1ZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmVzdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy50b2dnbGVJbnB1dCgpO1xyXG4gICAgICAgICAgICB0aGlzLiRjYWNoZS5pbnB1dC5wcm9wKFwicmVhZG9ubHlcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAkLmRhdGEodGhpcy5pbnB1dCwgXCJpb25SYW5nZVNsaWRlclwiLCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJC5mbi5pb25SYW5nZVNsaWRlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCEkLmRhdGEodGhpcywgXCJpb25SYW5nZVNsaWRlclwiKSkge1xyXG4gICAgICAgICAgICAgICAgJC5kYXRhKHRoaXMsIFwiaW9uUmFuZ2VTbGlkZXJcIiwgbmV3IElvblJhbmdlU2xpZGVyKHRoaXMsIG9wdGlvbnMsIHBsdWdpbl9jb3VudCsrKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgLy8gaHR0cDovL3BhdWxpcmlzaC5jb20vMjAxMS9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWFuaW1hdGluZy9cclxuICAgIC8vIGh0dHA6Ly9teS5vcGVyYS5jb20vZW1vbGxlci9ibG9nLzIwMTEvMTIvMjAvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1lci1hbmltYXRpbmdcclxuXHJcbiAgICAvLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgcG9seWZpbGwgYnkgRXJpayBNw7ZsbGVyLiBmaXhlcyBmcm9tIFBhdWwgSXJpc2ggYW5kIFRpbm8gWmlqZGVsXHJcblxyXG4gICAgLy8gTUlUIGxpY2Vuc2VcclxuXHJcbiAgICAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGxhc3RUaW1lID0gMDtcclxuICAgICAgICB2YXIgdmVuZG9ycyA9IFsnbXMnLCAnbW96JywgJ3dlYmtpdCcsICdvJ107XHJcbiAgICAgICAgZm9yKHZhciB4ID0gMDsgeCA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK3gpIHtcclxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2ZW5kb3JzW3hdKydSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcclxuICAgICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZlbmRvcnNbeF0rJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ11cclxuICAgICAgICAgICAgICAgIHx8IHdpbmRvd1t2ZW5kb3JzW3hdKydDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSlcclxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgIHZhciB0aW1lVG9DYWxsID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyclRpbWUgLSBsYXN0VGltZSkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGNhbGxiYWNrKGN1cnJUaW1lICsgdGltZVRvQ2FsbCk7IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdGltZVRvQ2FsbCk7XHJcbiAgICAgICAgICAgICAgICBsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpZDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKCF3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpXHJcbiAgICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaWQpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgfSgpKTtcclxuXHJcbn0pKTtcclxuLyoqXHJcbiAqIE93bCBDYXJvdXNlbCB2Mi4yLjFcclxuICogQ29weXJpZ2h0IDIwMTMtMjAxNyBEYXZpZCBEZXV0c2NoXHJcbiAqIExpY2Vuc2VkIHVuZGVyICAoKVxyXG4gKi9cclxuLyoqXHJcbiAqIE93bCBjYXJvdXNlbFxyXG4gKiBAdmVyc2lvbiAyLjEuNlxyXG4gKiBAYXV0aG9yIEJhcnRvc3ogV29qY2llY2hvd3NraVxyXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcclxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqIEB0b2RvIExhenkgTG9hZCBJY29uXHJcbiAqIEB0b2RvIHByZXZlbnQgYW5pbWF0aW9uZW5kIGJ1YmxpbmdcclxuICogQHRvZG8gaXRlbXNTY2FsZVVwXHJcbiAqIEB0b2RvIFRlc3QgWmVwdG9cclxuICogQHRvZG8gc3RhZ2VQYWRkaW5nIGNhbGN1bGF0ZSB3cm9uZyBhY3RpdmUgY2xhc3Nlc1xyXG4gKi9cclxuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyBhIGNhcm91c2VsLlxyXG5cdCAqIEBjbGFzcyBUaGUgT3dsIENhcm91c2VsLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fGpRdWVyeX0gZWxlbWVudCAtIFRoZSBlbGVtZW50IHRvIGNyZWF0ZSB0aGUgY2Fyb3VzZWwgZm9yLlxyXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBUaGUgb3B0aW9uc1xyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIE93bChlbGVtZW50LCBvcHRpb25zKSB7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDdXJyZW50IHNldHRpbmdzIGZvciB0aGUgY2Fyb3VzZWwuXHJcblx0XHQgKiBAcHVibGljXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuc2V0dGluZ3MgPSBudWxsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ3VycmVudCBvcHRpb25zIHNldCBieSB0aGUgY2FsbGVyIGluY2x1ZGluZyBkZWZhdWx0cy5cclxuXHRcdCAqIEBwdWJsaWNcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIE93bC5EZWZhdWx0cywgb3B0aW9ucyk7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBQbHVnaW4gZWxlbWVudC5cclxuXHRcdCAqIEBwdWJsaWNcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBQcm94aWVkIGV2ZW50IGhhbmRsZXJzLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9oYW5kbGVycyA9IHt9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUmVmZXJlbmNlcyB0byB0aGUgcnVubmluZyBwbHVnaW5zIG9mIHRoaXMgY2Fyb3VzZWwuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3BsdWdpbnMgPSB7fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEN1cnJlbnRseSBzdXBwcmVzc2VkIGV2ZW50cyB0byBwcmV2ZW50IHRoZW0gZnJvbSBiZWVpbmcgcmV0cmlnZ2VyZWQuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3N1cHJlc3MgPSB7fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFic29sdXRlIGN1cnJlbnQgcG9zaXRpb24uXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2N1cnJlbnQgPSBudWxsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQW5pbWF0aW9uIHNwZWVkIGluIG1pbGxpc2Vjb25kcy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fc3BlZWQgPSBudWxsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ29vcmRpbmF0ZXMgb2YgYWxsIGl0ZW1zIGluIHBpeGVsLlxyXG5cdFx0ICogQHRvZG8gVGhlIG5hbWUgb2YgdGhpcyBtZW1iZXIgaXMgbWlzc2xlYWRpbmcuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2Nvb3JkaW5hdGVzID0gW107XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDdXJyZW50IGJyZWFrcG9pbnQuXHJcblx0XHQgKiBAdG9kbyBSZWFsIG1lZGlhIHF1ZXJpZXMgd291bGQgYmUgbmljZS5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fYnJlYWtwb2ludCA9IG51bGw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDdXJyZW50IHdpZHRoIG9mIHRoZSBwbHVnaW4gZWxlbWVudC5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fd2lkdGggPSBudWxsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQWxsIHJlYWwgaXRlbXMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2l0ZW1zID0gW107XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbGwgY2xvbmVkIGl0ZW1zLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9jbG9uZXMgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIE1lcmdlIHZhbHVlcyBvZiBhbGwgaXRlbXMuXHJcblx0XHQgKiBAdG9kbyBNYXliZSB0aGlzIGNvdWxkIGJlIHBhcnQgb2YgYSBwbHVnaW4uXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX21lcmdlcnMgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFdpZHRocyBvZiBhbGwgaXRlbXMuXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3dpZHRocyA9IFtdO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogSW52YWxpZGF0ZWQgcGFydHMgd2l0aGluIHRoZSB1cGRhdGUgcHJvY2Vzcy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faW52YWxpZGF0ZWQgPSB7fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIE9yZGVyZWQgbGlzdCBvZiB3b3JrZXJzIGZvciB0aGUgdXBkYXRlIHByb2Nlc3MuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3BpcGUgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEN1cnJlbnQgc3RhdGUgaW5mb3JtYXRpb24gZm9yIHRoZSBkcmFnIG9wZXJhdGlvbi5cclxuXHRcdCAqIEB0b2RvICMyNjFcclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fZHJhZyA9IHtcclxuXHRcdFx0dGltZTogbnVsbCxcclxuXHRcdFx0dGFyZ2V0OiBudWxsLFxyXG5cdFx0XHRwb2ludGVyOiBudWxsLFxyXG5cdFx0XHRzdGFnZToge1xyXG5cdFx0XHRcdHN0YXJ0OiBudWxsLFxyXG5cdFx0XHRcdGN1cnJlbnQ6IG51bGxcclxuXHRcdFx0fSxcclxuXHRcdFx0ZGlyZWN0aW9uOiBudWxsXHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ3VycmVudCBzdGF0ZSBpbmZvcm1hdGlvbiBhbmQgdGhlaXIgdGFncy5cclxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3N0YXRlcyA9IHtcclxuXHRcdFx0Y3VycmVudDoge30sXHJcblx0XHRcdHRhZ3M6IHtcclxuXHRcdFx0XHQnaW5pdGlhbGl6aW5nJzogWyAnYnVzeScgXSxcclxuXHRcdFx0XHQnYW5pbWF0aW5nJzogWyAnYnVzeScgXSxcclxuXHRcdFx0XHQnZHJhZ2dpbmcnOiBbICdpbnRlcmFjdGluZycgXVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdCQuZWFjaChbICdvblJlc2l6ZScsICdvblRocm90dGxlZFJlc2l6ZScgXSwgJC5wcm94eShmdW5jdGlvbihpLCBoYW5kbGVyKSB7XHJcblx0XHRcdHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdID0gJC5wcm94eSh0aGlzW2hhbmRsZXJdLCB0aGlzKTtcclxuXHRcdH0sIHRoaXMpKTtcclxuXHJcblx0XHQkLmVhY2goT3dsLlBsdWdpbnMsICQucHJveHkoZnVuY3Rpb24oa2V5LCBwbHVnaW4pIHtcclxuXHRcdFx0dGhpcy5fcGx1Z2luc1trZXkuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSldXHJcblx0XHRcdFx0PSBuZXcgcGx1Z2luKHRoaXMpO1xyXG5cdFx0fSwgdGhpcykpO1xyXG5cclxuXHRcdCQuZWFjaChPd2wuV29ya2VycywgJC5wcm94eShmdW5jdGlvbihwcmlvcml0eSwgd29ya2VyKSB7XHJcblx0XHRcdHRoaXMuX3BpcGUucHVzaCh7XHJcblx0XHRcdFx0J2ZpbHRlcic6IHdvcmtlci5maWx0ZXIsXHJcblx0XHRcdFx0J3J1bic6ICQucHJveHkod29ya2VyLnJ1biwgdGhpcylcclxuXHRcdFx0fSk7XHJcblx0XHR9LCB0aGlzKSk7XHJcblxyXG5cdFx0dGhpcy5zZXR1cCgpO1xyXG5cdFx0dGhpcy5pbml0aWFsaXplKCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBEZWZhdWx0IG9wdGlvbnMgZm9yIHRoZSBjYXJvdXNlbC5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0T3dsLkRlZmF1bHRzID0ge1xyXG5cdFx0aXRlbXM6IDMsXHJcblx0XHRsb29wOiBmYWxzZSxcclxuXHRcdGNlbnRlcjogZmFsc2UsXHJcblx0XHRyZXdpbmQ6IGZhbHNlLFxyXG5cclxuXHRcdG1vdXNlRHJhZzogdHJ1ZSxcclxuXHRcdHRvdWNoRHJhZzogdHJ1ZSxcclxuXHRcdHB1bGxEcmFnOiB0cnVlLFxyXG5cdFx0ZnJlZURyYWc6IGZhbHNlLFxyXG5cclxuXHRcdG1hcmdpbjogMCxcclxuXHRcdHN0YWdlUGFkZGluZzogMCxcclxuXHJcblx0XHRtZXJnZTogZmFsc2UsXHJcblx0XHRtZXJnZUZpdDogdHJ1ZSxcclxuXHRcdGF1dG9XaWR0aDogZmFsc2UsXHJcblxyXG5cdFx0c3RhcnRQb3NpdGlvbjogMCxcclxuXHRcdHJ0bDogZmFsc2UsXHJcblxyXG5cdFx0c21hcnRTcGVlZDogMjUwLFxyXG5cdFx0Zmx1aWRTcGVlZDogZmFsc2UsXHJcblx0XHRkcmFnRW5kU3BlZWQ6IGZhbHNlLFxyXG5cclxuXHRcdHJlc3BvbnNpdmU6IHt9LFxyXG5cdFx0cmVzcG9uc2l2ZVJlZnJlc2hSYXRlOiAyMDAsXHJcblx0XHRyZXNwb25zaXZlQmFzZUVsZW1lbnQ6IHdpbmRvdyxcclxuXHJcblx0XHRmYWxsYmFja0Vhc2luZzogJ3N3aW5nJyxcclxuXHJcblx0XHRpbmZvOiBmYWxzZSxcclxuXHJcblx0XHRuZXN0ZWRJdGVtU2VsZWN0b3I6IGZhbHNlLFxyXG5cdFx0aXRlbUVsZW1lbnQ6ICdkaXYnLFxyXG5cdFx0c3RhZ2VFbGVtZW50OiAnZGl2JyxcclxuXHJcblx0XHRyZWZyZXNoQ2xhc3M6ICdvd2wtcmVmcmVzaCcsXHJcblx0XHRsb2FkZWRDbGFzczogJ293bC1sb2FkZWQnLFxyXG5cdFx0bG9hZGluZ0NsYXNzOiAnb3dsLWxvYWRpbmcnLFxyXG5cdFx0cnRsQ2xhc3M6ICdvd2wtcnRsJyxcclxuXHRcdHJlc3BvbnNpdmVDbGFzczogJ293bC1yZXNwb25zaXZlJyxcclxuXHRcdGRyYWdDbGFzczogJ293bC1kcmFnJyxcclxuXHRcdGl0ZW1DbGFzczogJ293bC1pdGVtJyxcclxuXHRcdHN0YWdlQ2xhc3M6ICdvd2wtc3RhZ2UnLFxyXG5cdFx0c3RhZ2VPdXRlckNsYXNzOiAnb3dsLXN0YWdlLW91dGVyJyxcclxuXHRcdGdyYWJDbGFzczogJ293bC1ncmFiJ1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEVudW1lcmF0aW9uIGZvciB3aWR0aC5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHJlYWRvbmx5XHJcblx0ICogQGVudW0ge1N0cmluZ31cclxuXHQgKi9cclxuXHRPd2wuV2lkdGggPSB7XHJcblx0XHREZWZhdWx0OiAnZGVmYXVsdCcsXHJcblx0XHRJbm5lcjogJ2lubmVyJyxcclxuXHRcdE91dGVyOiAnb3V0ZXInXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRW51bWVyYXRpb24gZm9yIHR5cGVzLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcmVhZG9ubHlcclxuXHQgKiBAZW51bSB7U3RyaW5nfVxyXG5cdCAqL1xyXG5cdE93bC5UeXBlID0ge1xyXG5cdFx0RXZlbnQ6ICdldmVudCcsXHJcblx0XHRTdGF0ZTogJ3N0YXRlJ1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbnRhaW5zIGFsbCByZWdpc3RlcmVkIHBsdWdpbnMuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdE93bC5QbHVnaW5zID0ge307XHJcblxyXG5cdC8qKlxyXG5cdCAqIExpc3Qgb2Ygd29ya2VycyBpbnZvbHZlZCBpbiB0aGUgdXBkYXRlIHByb2Nlc3MuXHJcblx0ICovXHJcblx0T3dsLldvcmtlcnMgPSBbIHtcclxuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnc2V0dGluZ3MnIF0sXHJcblx0XHRydW46IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR0aGlzLl93aWR0aCA9IHRoaXMuJGVsZW1lbnQud2lkdGgoKTtcclxuXHRcdH1cclxuXHR9LCB7XHJcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxyXG5cdFx0cnVuOiBmdW5jdGlvbihjYWNoZSkge1xyXG5cdFx0XHRjYWNoZS5jdXJyZW50ID0gdGhpcy5faXRlbXMgJiYgdGhpcy5faXRlbXNbdGhpcy5yZWxhdGl2ZSh0aGlzLl9jdXJyZW50KV07XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICdpdGVtcycsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCcuY2xvbmVkJykucmVtb3ZlKCk7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oY2FjaGUpIHtcclxuXHRcdFx0dmFyIG1hcmdpbiA9IHRoaXMuc2V0dGluZ3MubWFyZ2luIHx8ICcnLFxyXG5cdFx0XHRcdGdyaWQgPSAhdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsXHJcblx0XHRcdFx0cnRsID0gdGhpcy5zZXR0aW5ncy5ydGwsXHJcblx0XHRcdFx0Y3NzID0ge1xyXG5cdFx0XHRcdFx0J3dpZHRoJzogJ2F1dG8nLFxyXG5cdFx0XHRcdFx0J21hcmdpbi1sZWZ0JzogcnRsID8gbWFyZ2luIDogJycsXHJcblx0XHRcdFx0XHQnbWFyZ2luLXJpZ2h0JzogcnRsID8gJycgOiBtYXJnaW5cclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0IWdyaWQgJiYgdGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS5jc3MoY3NzKTtcclxuXHJcblx0XHRcdGNhY2hlLmNzcyA9IGNzcztcclxuXHRcdH1cclxuXHR9LCB7XHJcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxyXG5cdFx0cnVuOiBmdW5jdGlvbihjYWNoZSkge1xyXG5cdFx0XHR2YXIgd2lkdGggPSAodGhpcy53aWR0aCgpIC8gdGhpcy5zZXR0aW5ncy5pdGVtcykudG9GaXhlZCgzKSAtIHRoaXMuc2V0dGluZ3MubWFyZ2luLFxyXG5cdFx0XHRcdG1lcmdlID0gbnVsbCxcclxuXHRcdFx0XHRpdGVyYXRvciA9IHRoaXMuX2l0ZW1zLmxlbmd0aCxcclxuXHRcdFx0XHRncmlkID0gIXRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoLFxyXG5cdFx0XHRcdHdpZHRocyA9IFtdO1xyXG5cclxuXHRcdFx0Y2FjaGUuaXRlbXMgPSB7XHJcblx0XHRcdFx0bWVyZ2U6IGZhbHNlLFxyXG5cdFx0XHRcdHdpZHRoOiB3aWR0aFxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0d2hpbGUgKGl0ZXJhdG9yLS0pIHtcclxuXHRcdFx0XHRtZXJnZSA9IHRoaXMuX21lcmdlcnNbaXRlcmF0b3JdO1xyXG5cdFx0XHRcdG1lcmdlID0gdGhpcy5zZXR0aW5ncy5tZXJnZUZpdCAmJiBNYXRoLm1pbihtZXJnZSwgdGhpcy5zZXR0aW5ncy5pdGVtcykgfHwgbWVyZ2U7XHJcblxyXG5cdFx0XHRcdGNhY2hlLml0ZW1zLm1lcmdlID0gbWVyZ2UgPiAxIHx8IGNhY2hlLml0ZW1zLm1lcmdlO1xyXG5cclxuXHRcdFx0XHR3aWR0aHNbaXRlcmF0b3JdID0gIWdyaWQgPyB0aGlzLl9pdGVtc1tpdGVyYXRvcl0ud2lkdGgoKSA6IHdpZHRoICogbWVyZ2U7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuX3dpZHRocyA9IHdpZHRocztcclxuXHRcdH1cclxuXHR9LCB7XHJcblx0XHRmaWx0ZXI6IFsgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxyXG5cdFx0cnVuOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIGNsb25lcyA9IFtdLFxyXG5cdFx0XHRcdGl0ZW1zID0gdGhpcy5faXRlbXMsXHJcblx0XHRcdFx0c2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzLFxyXG5cdFx0XHRcdC8vIFRPRE86IFNob3VsZCBiZSBjb21wdXRlZCBmcm9tIG51bWJlciBvZiBtaW4gd2lkdGggaXRlbXMgaW4gc3RhZ2VcclxuXHRcdFx0XHR2aWV3ID0gTWF0aC5tYXgoc2V0dGluZ3MuaXRlbXMgKiAyLCA0KSxcclxuXHRcdFx0XHRzaXplID0gTWF0aC5jZWlsKGl0ZW1zLmxlbmd0aCAvIDIpICogMixcclxuXHRcdFx0XHRyZXBlYXQgPSBzZXR0aW5ncy5sb29wICYmIGl0ZW1zLmxlbmd0aCA/IHNldHRpbmdzLnJld2luZCA/IHZpZXcgOiBNYXRoLm1heCh2aWV3LCBzaXplKSA6IDAsXHJcblx0XHRcdFx0YXBwZW5kID0gJycsXHJcblx0XHRcdFx0cHJlcGVuZCA9ICcnO1xyXG5cclxuXHRcdFx0cmVwZWF0IC89IDI7XHJcblxyXG5cdFx0XHR3aGlsZSAocmVwZWF0LS0pIHtcclxuXHRcdFx0XHQvLyBTd2l0Y2ggdG8gb25seSB1c2luZyBhcHBlbmRlZCBjbG9uZXNcclxuXHRcdFx0XHRjbG9uZXMucHVzaCh0aGlzLm5vcm1hbGl6ZShjbG9uZXMubGVuZ3RoIC8gMiwgdHJ1ZSkpO1xyXG5cdFx0XHRcdGFwcGVuZCA9IGFwcGVuZCArIGl0ZW1zW2Nsb25lc1tjbG9uZXMubGVuZ3RoIC0gMV1dWzBdLm91dGVySFRNTDtcclxuXHRcdFx0XHRjbG9uZXMucHVzaCh0aGlzLm5vcm1hbGl6ZShpdGVtcy5sZW5ndGggLSAxIC0gKGNsb25lcy5sZW5ndGggLSAxKSAvIDIsIHRydWUpKTtcclxuXHRcdFx0XHRwcmVwZW5kID0gaXRlbXNbY2xvbmVzW2Nsb25lcy5sZW5ndGggLSAxXV1bMF0ub3V0ZXJIVE1MICsgcHJlcGVuZDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fY2xvbmVzID0gY2xvbmVzO1xyXG5cclxuXHRcdFx0JChhcHBlbmQpLmFkZENsYXNzKCdjbG9uZWQnKS5hcHBlbmRUbyh0aGlzLiRzdGFnZSk7XHJcblx0XHRcdCQocHJlcGVuZCkuYWRkQ2xhc3MoJ2Nsb25lZCcpLnByZXBlbmRUbyh0aGlzLiRzdGFnZSk7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBydGwgPSB0aGlzLnNldHRpbmdzLnJ0bCA/IDEgOiAtMSxcclxuXHRcdFx0XHRzaXplID0gdGhpcy5fY2xvbmVzLmxlbmd0aCArIHRoaXMuX2l0ZW1zLmxlbmd0aCxcclxuXHRcdFx0XHRpdGVyYXRvciA9IC0xLFxyXG5cdFx0XHRcdHByZXZpb3VzID0gMCxcclxuXHRcdFx0XHRjdXJyZW50ID0gMCxcclxuXHRcdFx0XHRjb29yZGluYXRlcyA9IFtdO1xyXG5cclxuXHRcdFx0d2hpbGUgKCsraXRlcmF0b3IgPCBzaXplKSB7XHJcblx0XHRcdFx0cHJldmlvdXMgPSBjb29yZGluYXRlc1tpdGVyYXRvciAtIDFdIHx8IDA7XHJcblx0XHRcdFx0Y3VycmVudCA9IHRoaXMuX3dpZHRoc1t0aGlzLnJlbGF0aXZlKGl0ZXJhdG9yKV0gKyB0aGlzLnNldHRpbmdzLm1hcmdpbjtcclxuXHRcdFx0XHRjb29yZGluYXRlcy5wdXNoKHByZXZpb3VzICsgY3VycmVudCAqIHJ0bCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuX2Nvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXM7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBwYWRkaW5nID0gdGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcsXHJcblx0XHRcdFx0Y29vcmRpbmF0ZXMgPSB0aGlzLl9jb29yZGluYXRlcyxcclxuXHRcdFx0XHRjc3MgPSB7XHJcblx0XHRcdFx0XHQnd2lkdGgnOiBNYXRoLmNlaWwoTWF0aC5hYnMoY29vcmRpbmF0ZXNbY29vcmRpbmF0ZXMubGVuZ3RoIC0gMV0pKSArIHBhZGRpbmcgKiAyLFxyXG5cdFx0XHRcdFx0J3BhZGRpbmctbGVmdCc6IHBhZGRpbmcgfHwgJycsXHJcblx0XHRcdFx0XHQncGFkZGluZy1yaWdodCc6IHBhZGRpbmcgfHwgJydcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0dGhpcy4kc3RhZ2UuY3NzKGNzcyk7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oY2FjaGUpIHtcclxuXHRcdFx0dmFyIGl0ZXJhdG9yID0gdGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoLFxyXG5cdFx0XHRcdGdyaWQgPSAhdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsXHJcblx0XHRcdFx0aXRlbXMgPSB0aGlzLiRzdGFnZS5jaGlsZHJlbigpO1xyXG5cclxuXHRcdFx0aWYgKGdyaWQgJiYgY2FjaGUuaXRlbXMubWVyZ2UpIHtcclxuXHRcdFx0XHR3aGlsZSAoaXRlcmF0b3ItLSkge1xyXG5cdFx0XHRcdFx0Y2FjaGUuY3NzLndpZHRoID0gdGhpcy5fd2lkdGhzW3RoaXMucmVsYXRpdmUoaXRlcmF0b3IpXTtcclxuXHRcdFx0XHRcdGl0ZW1zLmVxKGl0ZXJhdG9yKS5jc3MoY2FjaGUuY3NzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAoZ3JpZCkge1xyXG5cdFx0XHRcdGNhY2hlLmNzcy53aWR0aCA9IGNhY2hlLml0ZW1zLndpZHRoO1xyXG5cdFx0XHRcdGl0ZW1zLmNzcyhjYWNoZS5jc3MpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICdpdGVtcycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aCA8IDEgJiYgdGhpcy4kc3RhZ2UucmVtb3ZlQXR0cignc3R5bGUnKTtcclxuXHRcdH1cclxuXHR9LCB7XHJcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxyXG5cdFx0cnVuOiBmdW5jdGlvbihjYWNoZSkge1xyXG5cdFx0XHRjYWNoZS5jdXJyZW50ID0gY2FjaGUuY3VycmVudCA/IHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuaW5kZXgoY2FjaGUuY3VycmVudCkgOiAwO1xyXG5cdFx0XHRjYWNoZS5jdXJyZW50ID0gTWF0aC5tYXgodGhpcy5taW5pbXVtKCksIE1hdGgubWluKHRoaXMubWF4aW11bSgpLCBjYWNoZS5jdXJyZW50KSk7XHJcblx0XHRcdHRoaXMucmVzZXQoY2FjaGUuY3VycmVudCk7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICdwb3NpdGlvbicgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRoaXMuYW5pbWF0ZSh0aGlzLmNvb3JkaW5hdGVzKHRoaXMuX2N1cnJlbnQpKTtcclxuXHRcdH1cclxuXHR9LCB7XHJcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ3Bvc2l0aW9uJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxyXG5cdFx0cnVuOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHJ0bCA9IHRoaXMuc2V0dGluZ3MucnRsID8gMSA6IC0xLFxyXG5cdFx0XHRcdHBhZGRpbmcgPSB0aGlzLnNldHRpbmdzLnN0YWdlUGFkZGluZyAqIDIsXHJcblx0XHRcdFx0YmVnaW4gPSB0aGlzLmNvb3JkaW5hdGVzKHRoaXMuY3VycmVudCgpKSArIHBhZGRpbmcsXHJcblx0XHRcdFx0ZW5kID0gYmVnaW4gKyB0aGlzLndpZHRoKCkgKiBydGwsXHJcblx0XHRcdFx0aW5uZXIsIG91dGVyLCBtYXRjaGVzID0gW10sIGksIG47XHJcblxyXG5cdFx0XHRmb3IgKGkgPSAwLCBuID0gdGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcblx0XHRcdFx0aW5uZXIgPSB0aGlzLl9jb29yZGluYXRlc1tpIC0gMV0gfHwgMDtcclxuXHRcdFx0XHRvdXRlciA9IE1hdGguYWJzKHRoaXMuX2Nvb3JkaW5hdGVzW2ldKSArIHBhZGRpbmcgKiBydGw7XHJcblxyXG5cdFx0XHRcdGlmICgodGhpcy5vcChpbm5lciwgJzw9JywgYmVnaW4pICYmICh0aGlzLm9wKGlubmVyLCAnPicsIGVuZCkpKVxyXG5cdFx0XHRcdFx0fHwgKHRoaXMub3Aob3V0ZXIsICc8JywgYmVnaW4pICYmIHRoaXMub3Aob3V0ZXIsICc+JywgZW5kKSkpIHtcclxuXHRcdFx0XHRcdG1hdGNoZXMucHVzaChpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cdFx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbignOmVxKCcgKyBtYXRjaGVzLmpvaW4oJyksIDplcSgnKSArICcpJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cclxuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuY2VudGVyKSB7XHJcblx0XHRcdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oJy5jZW50ZXInKS5yZW1vdmVDbGFzcygnY2VudGVyJyk7XHJcblx0XHRcdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS5lcSh0aGlzLmN1cnJlbnQoKSkuYWRkQ2xhc3MoJ2NlbnRlcicpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSBdO1xyXG5cclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgY2Fyb3VzZWwuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dGhpcy5lbnRlcignaW5pdGlhbGl6aW5nJyk7XHJcblx0XHR0aGlzLnRyaWdnZXIoJ2luaXRpYWxpemUnKTtcclxuXHJcblx0XHR0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMuc2V0dGluZ3MucnRsQ2xhc3MsIHRoaXMuc2V0dGluZ3MucnRsKTtcclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5hdXRvV2lkdGggJiYgIXRoaXMuaXMoJ3ByZS1sb2FkaW5nJykpIHtcclxuXHRcdFx0dmFyIGltZ3MsIG5lc3RlZFNlbGVjdG9yLCB3aWR0aDtcclxuXHRcdFx0aW1ncyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW1nJyk7XHJcblx0XHRcdG5lc3RlZFNlbGVjdG9yID0gdGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3IgPyAnLicgKyB0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3RvciA6IHVuZGVmaW5lZDtcclxuXHRcdFx0d2lkdGggPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKG5lc3RlZFNlbGVjdG9yKS53aWR0aCgpO1xyXG5cclxuXHRcdFx0aWYgKGltZ3MubGVuZ3RoICYmIHdpZHRoIDw9IDApIHtcclxuXHRcdFx0XHR0aGlzLnByZWxvYWRBdXRvV2lkdGhJbWFnZXMoaW1ncyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5sb2FkaW5nQ2xhc3MpO1xyXG5cclxuXHRcdC8vIGNyZWF0ZSBzdGFnZVxyXG5cdFx0dGhpcy4kc3RhZ2UgPSAkKCc8JyArIHRoaXMuc2V0dGluZ3Muc3RhZ2VFbGVtZW50ICsgJyBjbGFzcz1cIicgKyB0aGlzLnNldHRpbmdzLnN0YWdlQ2xhc3MgKyAnXCIvPicpXHJcblx0XHRcdC53cmFwKCc8ZGl2IGNsYXNzPVwiJyArIHRoaXMuc2V0dGluZ3Muc3RhZ2VPdXRlckNsYXNzICsgJ1wiLz4nKTtcclxuXHJcblx0XHQvLyBhcHBlbmQgc3RhZ2VcclxuXHRcdHRoaXMuJGVsZW1lbnQuYXBwZW5kKHRoaXMuJHN0YWdlLnBhcmVudCgpKTtcclxuXHJcblx0XHQvLyBhcHBlbmQgY29udGVudFxyXG5cdFx0dGhpcy5yZXBsYWNlKHRoaXMuJGVsZW1lbnQuY2hpbGRyZW4oKS5ub3QodGhpcy4kc3RhZ2UucGFyZW50KCkpKTtcclxuXHJcblx0XHQvLyBjaGVjayB2aXNpYmlsaXR5XHJcblx0XHRpZiAodGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkge1xyXG5cdFx0XHQvLyB1cGRhdGUgdmlld1xyXG5cdFx0XHR0aGlzLnJlZnJlc2goKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIGludmFsaWRhdGUgd2lkdGhcclxuXHRcdFx0dGhpcy5pbnZhbGlkYXRlKCd3aWR0aCcpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuJGVsZW1lbnRcclxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sb2FkaW5nQ2xhc3MpXHJcblx0XHRcdC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGVkQ2xhc3MpO1xyXG5cclxuXHRcdC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnRIYW5kbGVycygpO1xyXG5cclxuXHRcdHRoaXMubGVhdmUoJ2luaXRpYWxpemluZycpO1xyXG5cdFx0dGhpcy50cmlnZ2VyKCdpbml0aWFsaXplZCcpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNldHVwcyB0aGUgY3VycmVudCBzZXR0aW5ncy5cclxuXHQgKiBAdG9kbyBSZW1vdmUgcmVzcG9uc2l2ZSBjbGFzc2VzLiBXaHkgc2hvdWxkIGFkYXB0aXZlIGRlc2lnbnMgYmUgYnJvdWdodCBpbnRvIElFOD9cclxuXHQgKiBAdG9kbyBTdXBwb3J0IGZvciBtZWRpYSBxdWVyaWVzIGJ5IHVzaW5nIGBtYXRjaE1lZGlhYCB3b3VsZCBiZSBuaWNlLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgdmlld3BvcnQgPSB0aGlzLnZpZXdwb3J0KCksXHJcblx0XHRcdG92ZXJ3cml0ZXMgPSB0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZSxcclxuXHRcdFx0bWF0Y2ggPSAtMSxcclxuXHRcdFx0c2V0dGluZ3MgPSBudWxsO1xyXG5cclxuXHRcdGlmICghb3ZlcndyaXRlcykge1xyXG5cdFx0XHRzZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0JC5lYWNoKG92ZXJ3cml0ZXMsIGZ1bmN0aW9uKGJyZWFrcG9pbnQpIHtcclxuXHRcdFx0XHRpZiAoYnJlYWtwb2ludCA8PSB2aWV3cG9ydCAmJiBicmVha3BvaW50ID4gbWF0Y2gpIHtcclxuXHRcdFx0XHRcdG1hdGNoID0gTnVtYmVyKGJyZWFrcG9pbnQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRzZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIG92ZXJ3cml0ZXNbbWF0Y2hdKTtcclxuXHRcdFx0aWYgKHR5cGVvZiBzZXR0aW5ncy5zdGFnZVBhZGRpbmcgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRzZXR0aW5ncy5zdGFnZVBhZGRpbmcgPSBzZXR0aW5ncy5zdGFnZVBhZGRpbmcoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRkZWxldGUgc2V0dGluZ3MucmVzcG9uc2l2ZTtcclxuXHJcblx0XHRcdC8vIHJlc3BvbnNpdmUgY2xhc3NcclxuXHRcdFx0aWYgKHNldHRpbmdzLnJlc3BvbnNpdmVDbGFzcykge1xyXG5cdFx0XHRcdHRoaXMuJGVsZW1lbnQuYXR0cignY2xhc3MnLFxyXG5cdFx0XHRcdFx0dGhpcy4kZWxlbWVudC5hdHRyKCdjbGFzcycpLnJlcGxhY2UobmV3IFJlZ0V4cCgnKCcgKyB0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUNsYXNzICsgJy0pXFxcXFMrXFxcXHMnLCAnZycpLCAnJDEnICsgbWF0Y2gpXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudHJpZ2dlcignY2hhbmdlJywgeyBwcm9wZXJ0eTogeyBuYW1lOiAnc2V0dGluZ3MnLCB2YWx1ZTogc2V0dGluZ3MgfSB9KTtcclxuXHRcdHRoaXMuX2JyZWFrcG9pbnQgPSBtYXRjaDtcclxuXHRcdHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuXHRcdHRoaXMuaW52YWxpZGF0ZSgnc2V0dGluZ3MnKTtcclxuXHRcdHRoaXMudHJpZ2dlcignY2hhbmdlZCcsIHsgcHJvcGVydHk6IHsgbmFtZTogJ3NldHRpbmdzJywgdmFsdWU6IHRoaXMuc2V0dGluZ3MgfSB9KTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBVcGRhdGVzIG9wdGlvbiBsb2dpYyBpZiBuZWNlc3NlcnkuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUub3B0aW9uc0xvZ2ljID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgpIHtcclxuXHRcdFx0dGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5zZXR0aW5ncy5tZXJnZSA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFByZXBhcmVzIGFuIGl0ZW0gYmVmb3JlIGFkZC5cclxuXHQgKiBAdG9kbyBSZW5hbWUgZXZlbnQgcGFyYW1ldGVyIGBjb250ZW50YCB0byBgaXRlbWAuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEByZXR1cm5zIHtqUXVlcnl8SFRNTEVsZW1lbnR9IC0gVGhlIGl0ZW0gY29udGFpbmVyLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUucHJlcGFyZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcclxuXHRcdHZhciBldmVudCA9IHRoaXMudHJpZ2dlcigncHJlcGFyZScsIHsgY29udGVudDogaXRlbSB9KTtcclxuXHJcblx0XHRpZiAoIWV2ZW50LmRhdGEpIHtcclxuXHRcdFx0ZXZlbnQuZGF0YSA9ICQoJzwnICsgdGhpcy5zZXR0aW5ncy5pdGVtRWxlbWVudCArICcvPicpXHJcblx0XHRcdFx0LmFkZENsYXNzKHRoaXMub3B0aW9ucy5pdGVtQ2xhc3MpLmFwcGVuZChpdGVtKVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudHJpZ2dlcigncHJlcGFyZWQnLCB7IGNvbnRlbnQ6IGV2ZW50LmRhdGEgfSk7XHJcblxyXG5cdFx0cmV0dXJuIGV2ZW50LmRhdGE7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogVXBkYXRlcyB0aGUgdmlldy5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBpID0gMCxcclxuXHRcdFx0biA9IHRoaXMuX3BpcGUubGVuZ3RoLFxyXG5cdFx0XHRmaWx0ZXIgPSAkLnByb3h5KGZ1bmN0aW9uKHApIHsgcmV0dXJuIHRoaXNbcF0gfSwgdGhpcy5faW52YWxpZGF0ZWQpLFxyXG5cdFx0XHRjYWNoZSA9IHt9O1xyXG5cclxuXHRcdHdoaWxlIChpIDwgbikge1xyXG5cdFx0XHRpZiAodGhpcy5faW52YWxpZGF0ZWQuYWxsIHx8ICQuZ3JlcCh0aGlzLl9waXBlW2ldLmZpbHRlciwgZmlsdGVyKS5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0dGhpcy5fcGlwZVtpXS5ydW4oY2FjaGUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGkrKztcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9pbnZhbGlkYXRlZCA9IHt9O1xyXG5cclxuXHRcdCF0aGlzLmlzKCd2YWxpZCcpICYmIHRoaXMuZW50ZXIoJ3ZhbGlkJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgd2lkdGggb2YgdGhlIHZpZXcuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7T3dsLldpZHRofSBbZGltZW5zaW9uPU93bC5XaWR0aC5EZWZhdWx0XSAtIFRoZSBkaW1lbnNpb24gdG8gcmV0dXJuLlxyXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIHdpZHRoIG9mIHRoZSB2aWV3IGluIHBpeGVsLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUud2lkdGggPSBmdW5jdGlvbihkaW1lbnNpb24pIHtcclxuXHRcdGRpbWVuc2lvbiA9IGRpbWVuc2lvbiB8fCBPd2wuV2lkdGguRGVmYXVsdDtcclxuXHRcdHN3aXRjaCAoZGltZW5zaW9uKSB7XHJcblx0XHRcdGNhc2UgT3dsLldpZHRoLklubmVyOlxyXG5cdFx0XHRjYXNlIE93bC5XaWR0aC5PdXRlcjpcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fd2lkdGg7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3dpZHRoIC0gdGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcgKiAyICsgdGhpcy5zZXR0aW5ncy5tYXJnaW47XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogUmVmcmVzaGVzIHRoZSBjYXJvdXNlbCBwcmltYXJpbHkgZm9yIGFkYXB0aXZlIHB1cnBvc2VzLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuZW50ZXIoJ3JlZnJlc2hpbmcnKTtcclxuXHRcdHRoaXMudHJpZ2dlcigncmVmcmVzaCcpO1xyXG5cclxuXHRcdHRoaXMuc2V0dXAoKTtcclxuXHJcblx0XHR0aGlzLm9wdGlvbnNMb2dpYygpO1xyXG5cclxuXHRcdHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLnJlZnJlc2hDbGFzcyk7XHJcblxyXG5cdFx0dGhpcy51cGRhdGUoKTtcclxuXHJcblx0XHR0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5yZWZyZXNoQ2xhc3MpO1xyXG5cclxuXHRcdHRoaXMubGVhdmUoJ3JlZnJlc2hpbmcnKTtcclxuXHRcdHRoaXMudHJpZ2dlcigncmVmcmVzaGVkJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogQ2hlY2tzIHdpbmRvdyBgcmVzaXplYCBldmVudC5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5vblRocm90dGxlZFJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0d2luZG93LmNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRpbWVyKTtcclxuXHRcdHRoaXMucmVzaXplVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCh0aGlzLl9oYW5kbGVycy5vblJlc2l6ZSwgdGhpcy5zZXR0aW5ncy5yZXNwb25zaXZlUmVmcmVzaFJhdGUpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoZWNrcyB3aW5kb3cgYHJlc2l6ZWAgZXZlbnQuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmICghdGhpcy5faXRlbXMubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5fd2lkdGggPT09IHRoaXMuJGVsZW1lbnQud2lkdGgoKSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCF0aGlzLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmVudGVyKCdyZXNpemluZycpO1xyXG5cclxuXHRcdGlmICh0aGlzLnRyaWdnZXIoJ3Jlc2l6ZScpLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XHJcblx0XHRcdHRoaXMubGVhdmUoJ3Jlc2l6aW5nJyk7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmludmFsaWRhdGUoJ3dpZHRoJyk7XHJcblxyXG5cdFx0dGhpcy5yZWZyZXNoKCk7XHJcblxyXG5cdFx0dGhpcy5sZWF2ZSgncmVzaXppbmcnKTtcclxuXHRcdHRoaXMudHJpZ2dlcigncmVzaXplZCcpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlZ2lzdGVycyBldmVudCBoYW5kbGVycy5cclxuXHQgKiBAdG9kbyBDaGVjayBgbXNQb2ludGVyRW5hYmxlZGBcclxuXHQgKiBAdG9kbyAjMjYxXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUucmVnaXN0ZXJFdmVudEhhbmRsZXJzID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoJC5zdXBwb3J0LnRyYW5zaXRpb24pIHtcclxuXHRcdFx0dGhpcy4kc3RhZ2Uub24oJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kICsgJy5vd2wuY29yZScsICQucHJveHkodGhpcy5vblRyYW5zaXRpb25FbmQsIHRoaXMpKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5yZXNwb25zaXZlICE9PSBmYWxzZSkge1xyXG5cdFx0XHR0aGlzLm9uKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX2hhbmRsZXJzLm9uVGhyb3R0bGVkUmVzaXplKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5tb3VzZURyYWcpIHtcclxuXHRcdFx0dGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZHJhZ0NsYXNzKTtcclxuXHRcdFx0dGhpcy4kc3RhZ2Uub24oJ21vdXNlZG93bi5vd2wuY29yZScsICQucHJveHkodGhpcy5vbkRyYWdTdGFydCwgdGhpcykpO1xyXG5cdFx0XHR0aGlzLiRzdGFnZS5vbignZHJhZ3N0YXJ0Lm93bC5jb3JlIHNlbGVjdHN0YXJ0Lm93bC5jb3JlJywgZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZSB9KTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy50b3VjaERyYWcpe1xyXG5cdFx0XHR0aGlzLiRzdGFnZS5vbigndG91Y2hzdGFydC5vd2wuY29yZScsICQucHJveHkodGhpcy5vbkRyYWdTdGFydCwgdGhpcykpO1xyXG5cdFx0XHR0aGlzLiRzdGFnZS5vbigndG91Y2hjYW5jZWwub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25EcmFnRW5kLCB0aGlzKSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogSGFuZGxlcyBgdG91Y2hzdGFydGAgYW5kIGBtb3VzZWRvd25gIGV2ZW50cy5cclxuXHQgKiBAdG9kbyBIb3Jpem9udGFsIHN3aXBlIHRocmVzaG9sZCBhcyBvcHRpb25cclxuXHQgKiBAdG9kbyAjMjYxXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9uRHJhZ1N0YXJ0ID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHRcdHZhciBzdGFnZSA9IG51bGw7XHJcblxyXG5cdFx0aWYgKGV2ZW50LndoaWNoID09PSAzKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoJC5zdXBwb3J0LnRyYW5zZm9ybSkge1xyXG5cdFx0XHRzdGFnZSA9IHRoaXMuJHN0YWdlLmNzcygndHJhbnNmb3JtJykucmVwbGFjZSgvLipcXCh8XFwpfCAvZywgJycpLnNwbGl0KCcsJyk7XHJcblx0XHRcdHN0YWdlID0ge1xyXG5cdFx0XHRcdHg6IHN0YWdlW3N0YWdlLmxlbmd0aCA9PT0gMTYgPyAxMiA6IDRdLFxyXG5cdFx0XHRcdHk6IHN0YWdlW3N0YWdlLmxlbmd0aCA9PT0gMTYgPyAxMyA6IDVdXHJcblx0XHRcdH07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzdGFnZSA9IHRoaXMuJHN0YWdlLnBvc2l0aW9uKCk7XHJcblx0XHRcdHN0YWdlID0ge1xyXG5cdFx0XHRcdHg6IHRoaXMuc2V0dGluZ3MucnRsID9cclxuXHRcdFx0XHRcdHN0YWdlLmxlZnQgKyB0aGlzLiRzdGFnZS53aWR0aCgpIC0gdGhpcy53aWR0aCgpICsgdGhpcy5zZXR0aW5ncy5tYXJnaW4gOlxyXG5cdFx0XHRcdFx0c3RhZ2UubGVmdCxcclxuXHRcdFx0XHR5OiBzdGFnZS50b3BcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5pcygnYW5pbWF0aW5nJykpIHtcclxuXHRcdFx0JC5zdXBwb3J0LnRyYW5zZm9ybSA/IHRoaXMuYW5pbWF0ZShzdGFnZS54KSA6IHRoaXMuJHN0YWdlLnN0b3AoKVxyXG5cdFx0XHR0aGlzLmludmFsaWRhdGUoJ3Bvc2l0aW9uJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLm9wdGlvbnMuZ3JhYkNsYXNzLCBldmVudC50eXBlID09PSAnbW91c2Vkb3duJyk7XHJcblxyXG5cdFx0dGhpcy5zcGVlZCgwKTtcclxuXHJcblx0XHR0aGlzLl9kcmFnLnRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHRcdHRoaXMuX2RyYWcudGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xyXG5cdFx0dGhpcy5fZHJhZy5zdGFnZS5zdGFydCA9IHN0YWdlO1xyXG5cdFx0dGhpcy5fZHJhZy5zdGFnZS5jdXJyZW50ID0gc3RhZ2U7XHJcblx0XHR0aGlzLl9kcmFnLnBvaW50ZXIgPSB0aGlzLnBvaW50ZXIoZXZlbnQpO1xyXG5cclxuXHRcdCQoZG9jdW1lbnQpLm9uKCdtb3VzZXVwLm93bC5jb3JlIHRvdWNoZW5kLm93bC5jb3JlJywgJC5wcm94eSh0aGlzLm9uRHJhZ0VuZCwgdGhpcykpO1xyXG5cclxuXHRcdCQoZG9jdW1lbnQpLm9uZSgnbW91c2Vtb3ZlLm93bC5jb3JlIHRvdWNobW92ZS5vd2wuY29yZScsICQucHJveHkoZnVuY3Rpb24oZXZlbnQpIHtcclxuXHRcdFx0dmFyIGRlbHRhID0gdGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlciwgdGhpcy5wb2ludGVyKGV2ZW50KSk7XHJcblxyXG5cdFx0XHQkKGRvY3VtZW50KS5vbignbW91c2Vtb3ZlLm93bC5jb3JlIHRvdWNobW92ZS5vd2wuY29yZScsICQucHJveHkodGhpcy5vbkRyYWdNb3ZlLCB0aGlzKSk7XHJcblxyXG5cdFx0XHRpZiAoTWF0aC5hYnMoZGVsdGEueCkgPCBNYXRoLmFicyhkZWx0YS55KSAmJiB0aGlzLmlzKCd2YWxpZCcpKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0dGhpcy5lbnRlcignZHJhZ2dpbmcnKTtcclxuXHRcdFx0dGhpcy50cmlnZ2VyKCdkcmFnJyk7XHJcblx0XHR9LCB0aGlzKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogSGFuZGxlcyB0aGUgYHRvdWNobW92ZWAgYW5kIGBtb3VzZW1vdmVgIGV2ZW50cy5cclxuXHQgKiBAdG9kbyAjMjYxXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9uRHJhZ01vdmUgPSBmdW5jdGlvbihldmVudCkge1xyXG5cdFx0dmFyIG1pbmltdW0gPSBudWxsLFxyXG5cdFx0XHRtYXhpbXVtID0gbnVsbCxcclxuXHRcdFx0cHVsbCA9IG51bGwsXHJcblx0XHRcdGRlbHRhID0gdGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlciwgdGhpcy5wb2ludGVyKGV2ZW50KSksXHJcblx0XHRcdHN0YWdlID0gdGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcuc3RhZ2Uuc3RhcnQsIGRlbHRhKTtcclxuXHJcblx0XHRpZiAoIXRoaXMuaXMoJ2RyYWdnaW5nJykpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MubG9vcCkge1xyXG5cdFx0XHRtaW5pbXVtID0gdGhpcy5jb29yZGluYXRlcyh0aGlzLm1pbmltdW0oKSk7XHJcblx0XHRcdG1heGltdW0gPSB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWF4aW11bSgpICsgMSkgLSBtaW5pbXVtO1xyXG5cdFx0XHRzdGFnZS54ID0gKCgoc3RhZ2UueCAtIG1pbmltdW0pICUgbWF4aW11bSArIG1heGltdW0pICUgbWF4aW11bSkgKyBtaW5pbXVtO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bWluaW11bSA9IHRoaXMuc2V0dGluZ3MucnRsID8gdGhpcy5jb29yZGluYXRlcyh0aGlzLm1heGltdW0oKSkgOiB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWluaW11bSgpKTtcclxuXHRcdFx0bWF4aW11bSA9IHRoaXMuc2V0dGluZ3MucnRsID8gdGhpcy5jb29yZGluYXRlcyh0aGlzLm1pbmltdW0oKSkgOiB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWF4aW11bSgpKTtcclxuXHRcdFx0cHVsbCA9IHRoaXMuc2V0dGluZ3MucHVsbERyYWcgPyAtMSAqIGRlbHRhLnggLyA1IDogMDtcclxuXHRcdFx0c3RhZ2UueCA9IE1hdGgubWF4KE1hdGgubWluKHN0YWdlLngsIG1pbmltdW0gKyBwdWxsKSwgbWF4aW11bSArIHB1bGwpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2RyYWcuc3RhZ2UuY3VycmVudCA9IHN0YWdlO1xyXG5cclxuXHRcdHRoaXMuYW5pbWF0ZShzdGFnZS54KTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBIYW5kbGVzIHRoZSBgdG91Y2hlbmRgIGFuZCBgbW91c2V1cGAgZXZlbnRzLlxyXG5cdCAqIEB0b2RvICMyNjFcclxuXHQgKiBAdG9kbyBUaHJlc2hvbGQgZm9yIGNsaWNrIGV2ZW50XHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9uRHJhZ0VuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHR2YXIgZGVsdGEgPSB0aGlzLmRpZmZlcmVuY2UodGhpcy5fZHJhZy5wb2ludGVyLCB0aGlzLnBvaW50ZXIoZXZlbnQpKSxcclxuXHRcdFx0c3RhZ2UgPSB0aGlzLl9kcmFnLnN0YWdlLmN1cnJlbnQsXHJcblx0XHRcdGRpcmVjdGlvbiA9IGRlbHRhLnggPiAwIF4gdGhpcy5zZXR0aW5ncy5ydGwgPyAnbGVmdCcgOiAncmlnaHQnO1xyXG5cclxuXHRcdCQoZG9jdW1lbnQpLm9mZignLm93bC5jb3JlJyk7XHJcblxyXG5cdFx0dGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZ3JhYkNsYXNzKTtcclxuXHJcblx0XHRpZiAoZGVsdGEueCAhPT0gMCAmJiB0aGlzLmlzKCdkcmFnZ2luZycpIHx8ICF0aGlzLmlzKCd2YWxpZCcpKSB7XHJcblx0XHRcdHRoaXMuc3BlZWQodGhpcy5zZXR0aW5ncy5kcmFnRW5kU3BlZWQgfHwgdGhpcy5zZXR0aW5ncy5zbWFydFNwZWVkKTtcclxuXHRcdFx0dGhpcy5jdXJyZW50KHRoaXMuY2xvc2VzdChzdGFnZS54LCBkZWx0YS54ICE9PSAwID8gZGlyZWN0aW9uIDogdGhpcy5fZHJhZy5kaXJlY3Rpb24pKTtcclxuXHRcdFx0dGhpcy5pbnZhbGlkYXRlKCdwb3NpdGlvbicpO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cclxuXHRcdFx0dGhpcy5fZHJhZy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcblxyXG5cdFx0XHRpZiAoTWF0aC5hYnMoZGVsdGEueCkgPiAzIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGhpcy5fZHJhZy50aW1lID4gMzAwKSB7XHJcblx0XHRcdFx0dGhpcy5fZHJhZy50YXJnZXQub25lKCdjbGljay5vd2wuY29yZScsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCF0aGlzLmlzKCdkcmFnZ2luZycpKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmxlYXZlKCdkcmFnZ2luZycpO1xyXG5cdFx0dGhpcy50cmlnZ2VyKCdkcmFnZ2VkJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgY2xvc2VzdCBpdGVtIGZvciBhIGNvb3JkaW5hdGUuXHJcblx0ICogQHRvZG8gU2V0dGluZyBgZnJlZURyYWdgIG1ha2VzIGBjbG9zZXN0YCBub3QgcmV1c2FibGUuIFNlZSAjMTY1LlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29vcmRpbmF0ZSAtIFRoZSBjb29yZGluYXRlIGluIHBpeGVsLlxyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkaXJlY3Rpb24gLSBUaGUgZGlyZWN0aW9uIHRvIGNoZWNrIGZvciB0aGUgY2xvc2VzdCBpdGVtLiBFdGhlciBgbGVmdGAgb3IgYHJpZ2h0YC5cclxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBjbG9zZXN0IGl0ZW0uXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5jbG9zZXN0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZSwgZGlyZWN0aW9uKSB7XHJcblx0XHR2YXIgcG9zaXRpb24gPSAtMSxcclxuXHRcdFx0cHVsbCA9IDMwLFxyXG5cdFx0XHR3aWR0aCA9IHRoaXMud2lkdGgoKSxcclxuXHRcdFx0Y29vcmRpbmF0ZXMgPSB0aGlzLmNvb3JkaW5hdGVzKCk7XHJcblxyXG5cdFx0aWYgKCF0aGlzLnNldHRpbmdzLmZyZWVEcmFnKSB7XHJcblx0XHRcdC8vIGNoZWNrIGNsb3Nlc3QgaXRlbVxyXG5cdFx0XHQkLmVhY2goY29vcmRpbmF0ZXMsICQucHJveHkoZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XHJcblx0XHRcdFx0Ly8gb24gYSBsZWZ0IHB1bGwsIGNoZWNrIG9uIGN1cnJlbnQgaW5kZXhcclxuXHRcdFx0XHRpZiAoZGlyZWN0aW9uID09PSAnbGVmdCcgJiYgY29vcmRpbmF0ZSA+IHZhbHVlIC0gcHVsbCAmJiBjb29yZGluYXRlIDwgdmFsdWUgKyBwdWxsKSB7XHJcblx0XHRcdFx0XHRwb3NpdGlvbiA9IGluZGV4O1xyXG5cdFx0XHRcdC8vIG9uIGEgcmlnaHQgcHVsbCwgY2hlY2sgb24gcHJldmlvdXMgaW5kZXhcclxuXHRcdFx0XHQvLyB0byBkbyBzbywgc3VidHJhY3Qgd2lkdGggZnJvbSB2YWx1ZSBhbmQgc2V0IHBvc2l0aW9uID0gaW5kZXggKyAxXHJcblx0XHRcdFx0fSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcgJiYgY29vcmRpbmF0ZSA+IHZhbHVlIC0gd2lkdGggLSBwdWxsICYmIGNvb3JkaW5hdGUgPCB2YWx1ZSAtIHdpZHRoICsgcHVsbCkge1xyXG5cdFx0XHRcdFx0cG9zaXRpb24gPSBpbmRleCArIDE7XHJcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLm9wKGNvb3JkaW5hdGUsICc8JywgdmFsdWUpXHJcblx0XHRcdFx0XHQmJiB0aGlzLm9wKGNvb3JkaW5hdGUsICc+JywgY29vcmRpbmF0ZXNbaW5kZXggKyAxXSB8fCB2YWx1ZSAtIHdpZHRoKSkge1xyXG5cdFx0XHRcdFx0cG9zaXRpb24gPSBkaXJlY3Rpb24gPT09ICdsZWZ0JyA/IGluZGV4ICsgMSA6IGluZGV4O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gcG9zaXRpb24gPT09IC0xO1xyXG5cdFx0XHR9LCB0aGlzKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCF0aGlzLnNldHRpbmdzLmxvb3ApIHtcclxuXHRcdFx0Ly8gbm9uIGxvb3AgYm91bmRyaWVzXHJcblx0XHRcdGlmICh0aGlzLm9wKGNvb3JkaW5hdGUsICc+JywgY29vcmRpbmF0ZXNbdGhpcy5taW5pbXVtKCldKSkge1xyXG5cdFx0XHRcdHBvc2l0aW9uID0gY29vcmRpbmF0ZSA9IHRoaXMubWluaW11bSgpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMub3AoY29vcmRpbmF0ZSwgJzwnLCBjb29yZGluYXRlc1t0aGlzLm1heGltdW0oKV0pKSB7XHJcblx0XHRcdFx0cG9zaXRpb24gPSBjb29yZGluYXRlID0gdGhpcy5tYXhpbXVtKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcG9zaXRpb247XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogQW5pbWF0ZXMgdGhlIHN0YWdlLlxyXG5cdCAqIEB0b2RvICMyNzBcclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGNvb3JkaW5hdGUgLSBUaGUgY29vcmRpbmF0ZSBpbiBwaXhlbHMuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5hbmltYXRlID0gZnVuY3Rpb24oY29vcmRpbmF0ZSkge1xyXG5cdFx0dmFyIGFuaW1hdGUgPSB0aGlzLnNwZWVkKCkgPiAwO1xyXG5cclxuXHRcdHRoaXMuaXMoJ2FuaW1hdGluZycpICYmIHRoaXMub25UcmFuc2l0aW9uRW5kKCk7XHJcblxyXG5cdFx0aWYgKGFuaW1hdGUpIHtcclxuXHRcdFx0dGhpcy5lbnRlcignYW5pbWF0aW5nJyk7XHJcblx0XHRcdHRoaXMudHJpZ2dlcigndHJhbnNsYXRlJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCQuc3VwcG9ydC50cmFuc2Zvcm0zZCAmJiAkLnN1cHBvcnQudHJhbnNpdGlvbikge1xyXG5cdFx0XHR0aGlzLiRzdGFnZS5jc3Moe1xyXG5cdFx0XHRcdHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKCcgKyBjb29yZGluYXRlICsgJ3B4LDBweCwwcHgpJyxcclxuXHRcdFx0XHR0cmFuc2l0aW9uOiAodGhpcy5zcGVlZCgpIC8gMTAwMCkgKyAncydcclxuXHRcdFx0fSk7XHJcblx0XHR9IGVsc2UgaWYgKGFuaW1hdGUpIHtcclxuXHRcdFx0dGhpcy4kc3RhZ2UuYW5pbWF0ZSh7XHJcblx0XHRcdFx0bGVmdDogY29vcmRpbmF0ZSArICdweCdcclxuXHRcdFx0fSwgdGhpcy5zcGVlZCgpLCB0aGlzLnNldHRpbmdzLmZhbGxiYWNrRWFzaW5nLCAkLnByb3h5KHRoaXMub25UcmFuc2l0aW9uRW5kLCB0aGlzKSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLiRzdGFnZS5jc3Moe1xyXG5cdFx0XHRcdGxlZnQ6IGNvb3JkaW5hdGUgKyAncHgnXHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoZWNrcyB3aGV0aGVyIHRoZSBjYXJvdXNlbCBpcyBpbiBhIHNwZWNpZmljIHN0YXRlIG9yIG5vdC5cclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RhdGUgLSBUaGUgc3RhdGUgdG8gY2hlY2suXHJcblx0ICogQHJldHVybnMge0Jvb2xlYW59IC0gVGhlIGZsYWcgd2hpY2ggaW5kaWNhdGVzIGlmIHRoZSBjYXJvdXNlbCBpcyBidXN5LlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuaXMgPSBmdW5jdGlvbihzdGF0ZSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3N0YXRlcy5jdXJyZW50W3N0YXRlXSAmJiB0aGlzLl9zdGF0ZXMuY3VycmVudFtzdGF0ZV0gPiAwO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNldHMgdGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBjdXJyZW50IGl0ZW0uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb25dIC0gVGhlIG5ldyBhYnNvbHV0ZSBwb3NpdGlvbiBvciBub3RoaW5nIHRvIGxlYXZlIGl0IHVuY2hhbmdlZC5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgY3VycmVudCBpdGVtLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuY3VycmVudCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XHJcblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5fY3VycmVudDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5faXRlbXMubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbik7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2N1cnJlbnQgIT09IHBvc2l0aW9uKSB7XHJcblx0XHRcdHZhciBldmVudCA9IHRoaXMudHJpZ2dlcignY2hhbmdlJywgeyBwcm9wZXJ0eTogeyBuYW1lOiAncG9zaXRpb24nLCB2YWx1ZTogcG9zaXRpb24gfSB9KTtcclxuXHJcblx0XHRcdGlmIChldmVudC5kYXRhICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRwb3NpdGlvbiA9IHRoaXMubm9ybWFsaXplKGV2ZW50LmRhdGEpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLl9jdXJyZW50ID0gcG9zaXRpb247XHJcblxyXG5cdFx0XHR0aGlzLmludmFsaWRhdGUoJ3Bvc2l0aW9uJyk7XHJcblxyXG5cdFx0XHR0aGlzLnRyaWdnZXIoJ2NoYW5nZWQnLCB7IHByb3BlcnR5OiB7IG5hbWU6ICdwb3NpdGlvbicsIHZhbHVlOiB0aGlzLl9jdXJyZW50IH0gfSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnQ7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogSW52YWxpZGF0ZXMgdGhlIGdpdmVuIHBhcnQgb2YgdGhlIHVwZGF0ZSByb3V0aW5lLlxyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBbcGFydF0gLSBUaGUgcGFydCB0byBpbnZhbGlkYXRlLlxyXG5cdCAqIEByZXR1cm5zIHtBcnJheS48U3RyaW5nPn0gLSBUaGUgaW52YWxpZGF0ZWQgcGFydHMuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5pbnZhbGlkYXRlID0gZnVuY3Rpb24ocGFydCkge1xyXG5cdFx0aWYgKCQudHlwZShwYXJ0KSA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0dGhpcy5faW52YWxpZGF0ZWRbcGFydF0gPSB0cnVlO1xyXG5cdFx0XHR0aGlzLmlzKCd2YWxpZCcpICYmIHRoaXMubGVhdmUoJ3ZhbGlkJyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gJC5tYXAodGhpcy5faW52YWxpZGF0ZWQsIGZ1bmN0aW9uKHYsIGkpIHsgcmV0dXJuIGkgfSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogUmVzZXRzIHRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgY3VycmVudCBpdGVtLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIG5ldyBpdGVtLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbihwb3NpdGlvbikge1xyXG5cdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbik7XHJcblxyXG5cdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3NwZWVkID0gMDtcclxuXHRcdHRoaXMuX2N1cnJlbnQgPSBwb3NpdGlvbjtcclxuXHJcblx0XHR0aGlzLnN1cHByZXNzKFsgJ3RyYW5zbGF0ZScsICd0cmFuc2xhdGVkJyBdKTtcclxuXHJcblx0XHR0aGlzLmFuaW1hdGUodGhpcy5jb29yZGluYXRlcyhwb3NpdGlvbikpO1xyXG5cclxuXHRcdHRoaXMucmVsZWFzZShbICd0cmFuc2xhdGUnLCAndHJhbnNsYXRlZCcgXSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogTm9ybWFsaXplcyBhbiBhYnNvbHV0ZSBvciBhIHJlbGF0aXZlIHBvc2l0aW9uIG9mIGFuIGl0ZW0uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBhYnNvbHV0ZSBvciByZWxhdGl2ZSBwb3NpdGlvbiB0byBub3JtYWxpemUuXHJcblx0ICogQHBhcmFtIHtCb29sZWFufSBbcmVsYXRpdmU9ZmFsc2VdIC0gV2hldGhlciB0aGUgZ2l2ZW4gcG9zaXRpb24gaXMgcmVsYXRpdmUgb3Igbm90LlxyXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIG5vcm1hbGl6ZWQgcG9zaXRpb24uXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbihwb3NpdGlvbiwgcmVsYXRpdmUpIHtcclxuXHRcdHZhciBuID0gdGhpcy5faXRlbXMubGVuZ3RoLFxyXG5cdFx0XHRtID0gcmVsYXRpdmUgPyAwIDogdGhpcy5fY2xvbmVzLmxlbmd0aDtcclxuXHJcblx0XHRpZiAoIXRoaXMuaXNOdW1lcmljKHBvc2l0aW9uKSB8fCBuIDwgMSkge1xyXG5cdFx0XHRwb3NpdGlvbiA9IHVuZGVmaW5lZDtcclxuXHRcdH0gZWxzZSBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IG4gKyBtKSB7XHJcblx0XHRcdHBvc2l0aW9uID0gKChwb3NpdGlvbiAtIG0gLyAyKSAlIG4gKyBuKSAlIG4gKyBtIC8gMjtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcG9zaXRpb247XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogQ29udmVydHMgYW4gYWJzb2x1dGUgcG9zaXRpb24gb2YgYW4gaXRlbSBpbnRvIGEgcmVsYXRpdmUgb25lLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gdG8gY29udmVydC5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSBjb252ZXJ0ZWQgcG9zaXRpb24uXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5yZWxhdGl2ZSA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XHJcblx0XHRwb3NpdGlvbiAtPSB0aGlzLl9jbG9uZXMubGVuZ3RoIC8gMjtcclxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgbWF4aW11bSBwb3NpdGlvbiBmb3IgdGhlIGN1cnJlbnQgaXRlbS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtCb29sZWFufSBbcmVsYXRpdmU9ZmFsc2VdIC0gV2hldGhlciB0byByZXR1cm4gYW4gYWJzb2x1dGUgcG9zaXRpb24gb3IgYSByZWxhdGl2ZSBwb3NpdGlvbi5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUubWF4aW11bSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XHJcblx0XHR2YXIgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzLFxyXG5cdFx0XHRtYXhpbXVtID0gdGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoLFxyXG5cdFx0XHRpdGVyYXRvcixcclxuXHRcdFx0cmVjaXByb2NhbEl0ZW1zV2lkdGgsXHJcblx0XHRcdGVsZW1lbnRXaWR0aDtcclxuXHJcblx0XHRpZiAoc2V0dGluZ3MubG9vcCkge1xyXG5cdFx0XHRtYXhpbXVtID0gdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDIgKyB0aGlzLl9pdGVtcy5sZW5ndGggLSAxO1xyXG5cdFx0fSBlbHNlIGlmIChzZXR0aW5ncy5hdXRvV2lkdGggfHwgc2V0dGluZ3MubWVyZ2UpIHtcclxuXHRcdFx0aXRlcmF0b3IgPSB0aGlzLl9pdGVtcy5sZW5ndGg7XHJcblx0XHRcdHJlY2lwcm9jYWxJdGVtc1dpZHRoID0gdGhpcy5faXRlbXNbLS1pdGVyYXRvcl0ud2lkdGgoKTtcclxuXHRcdFx0ZWxlbWVudFdpZHRoID0gdGhpcy4kZWxlbWVudC53aWR0aCgpO1xyXG5cdFx0XHR3aGlsZSAoaXRlcmF0b3ItLSkge1xyXG5cdFx0XHRcdHJlY2lwcm9jYWxJdGVtc1dpZHRoICs9IHRoaXMuX2l0ZW1zW2l0ZXJhdG9yXS53aWR0aCgpICsgdGhpcy5zZXR0aW5ncy5tYXJnaW47XHJcblx0XHRcdFx0aWYgKHJlY2lwcm9jYWxJdGVtc1dpZHRoID4gZWxlbWVudFdpZHRoKSB7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0bWF4aW11bSA9IGl0ZXJhdG9yICsgMTtcclxuXHRcdH0gZWxzZSBpZiAoc2V0dGluZ3MuY2VudGVyKSB7XHJcblx0XHRcdG1heGltdW0gPSB0aGlzLl9pdGVtcy5sZW5ndGggLSAxO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bWF4aW11bSA9IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIHNldHRpbmdzLml0ZW1zO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChyZWxhdGl2ZSkge1xyXG5cdFx0XHRtYXhpbXVtIC09IHRoaXMuX2Nsb25lcy5sZW5ndGggLyAyO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBNYXRoLm1heChtYXhpbXVtLCAwKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSBtaW5pbXVtIHBvc2l0aW9uIGZvciB0aGUgY3VycmVudCBpdGVtLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtyZWxhdGl2ZT1mYWxzZV0gLSBXaGV0aGVyIHRvIHJldHVybiBhbiBhYnNvbHV0ZSBwb3NpdGlvbiBvciBhIHJlbGF0aXZlIHBvc2l0aW9uLlxyXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9XHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5taW5pbXVtID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcclxuXHRcdHJldHVybiByZWxhdGl2ZSA/IDAgOiB0aGlzLl9jbG9uZXMubGVuZ3RoIC8gMjtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIGFuIGl0ZW0gYXQgdGhlIHNwZWNpZmllZCByZWxhdGl2ZSBwb3NpdGlvbi5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXHJcblx0ICogQHJldHVybiB7alF1ZXJ5fEFycmF5LjxqUXVlcnk+fSAtIFRoZSBpdGVtIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBvciBhbGwgaXRlbXMgaWYgbm8gcG9zaXRpb24gd2FzIGdpdmVuLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuaXRlbXMgPSBmdW5jdGlvbihwb3NpdGlvbikge1xyXG5cdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuX2l0ZW1zLnNsaWNlKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XHJcblx0XHRyZXR1cm4gdGhpcy5faXRlbXNbcG9zaXRpb25dO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgYW4gaXRlbSBhdCB0aGUgc3BlY2lmaWVkIHJlbGF0aXZlIHBvc2l0aW9uLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uXSAtIFRoZSByZWxhdGl2ZSBwb3NpdGlvbiBvZiB0aGUgaXRlbS5cclxuXHQgKiBAcmV0dXJuIHtqUXVlcnl8QXJyYXkuPGpRdWVyeT59IC0gVGhlIGl0ZW0gYXQgdGhlIGdpdmVuIHBvc2l0aW9uIG9yIGFsbCBpdGVtcyBpZiBubyBwb3NpdGlvbiB3YXMgZ2l2ZW4uXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5tZXJnZXJzID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcclxuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLl9tZXJnZXJzLnNsaWNlKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XHJcblx0XHRyZXR1cm4gdGhpcy5fbWVyZ2Vyc1twb3NpdGlvbl07XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgYWJzb2x1dGUgcG9zaXRpb25zIG9mIGNsb25lcyBmb3IgYW4gaXRlbS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXHJcblx0ICogQHJldHVybnMge0FycmF5LjxOdW1iZXI+fSAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbnMgb2YgY2xvbmVzIGZvciB0aGUgaXRlbSBvciBhbGwgaWYgbm8gcG9zaXRpb24gd2FzIGdpdmVuLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuY2xvbmVzID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcclxuXHRcdHZhciBvZGQgPSB0aGlzLl9jbG9uZXMubGVuZ3RoIC8gMixcclxuXHRcdFx0ZXZlbiA9IG9kZCArIHRoaXMuX2l0ZW1zLmxlbmd0aCxcclxuXHRcdFx0bWFwID0gZnVuY3Rpb24oaW5kZXgpIHsgcmV0dXJuIGluZGV4ICUgMiA9PT0gMCA/IGV2ZW4gKyBpbmRleCAvIDIgOiBvZGQgLSAoaW5kZXggKyAxKSAvIDIgfTtcclxuXHJcblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4gJC5tYXAodGhpcy5fY2xvbmVzLCBmdW5jdGlvbih2LCBpKSB7IHJldHVybiBtYXAoaSkgfSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuICQubWFwKHRoaXMuX2Nsb25lcywgZnVuY3Rpb24odiwgaSkgeyByZXR1cm4gdiA9PT0gcG9zaXRpb24gPyBtYXAoaSkgOiBudWxsIH0pO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNldHMgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIHNwZWVkLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSBhbmltYXRpb24gc3BlZWQgaW4gbWlsbGlzZWNvbmRzIG9yIG5vdGhpbmcgdG8gbGVhdmUgaXQgdW5jaGFuZ2VkLlxyXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIGN1cnJlbnQgYW5pbWF0aW9uIHNwZWVkIGluIG1pbGxpc2Vjb25kcy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnNwZWVkID0gZnVuY3Rpb24oc3BlZWQpIHtcclxuXHRcdGlmIChzcGVlZCAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHRoaXMuX3NwZWVkID0gc3BlZWQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX3NwZWVkO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIGNvb3JkaW5hdGUgb2YgYW4gaXRlbS5cclxuXHQgKiBAdG9kbyBUaGUgbmFtZSBvZiB0aGlzIG1ldGhvZCBpcyBtaXNzbGVhbmRpbmcuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgaXRlbSB3aXRoaW4gYG1pbmltdW0oKWAgYW5kIGBtYXhpbXVtKClgLlxyXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ8QXJyYXkuPE51bWJlcj59IC0gVGhlIGNvb3JkaW5hdGUgb2YgdGhlIGl0ZW0gaW4gcGl4ZWwgb3IgYWxsIGNvb3JkaW5hdGVzLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuY29vcmRpbmF0ZXMgPSBmdW5jdGlvbihwb3NpdGlvbikge1xyXG5cdFx0dmFyIG11bHRpcGxpZXIgPSAxLFxyXG5cdFx0XHRuZXdQb3NpdGlvbiA9IHBvc2l0aW9uIC0gMSxcclxuXHRcdFx0Y29vcmRpbmF0ZTtcclxuXHJcblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4gJC5tYXAodGhpcy5fY29vcmRpbmF0ZXMsICQucHJveHkoZnVuY3Rpb24oY29vcmRpbmF0ZSwgaW5kZXgpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb29yZGluYXRlcyhpbmRleCk7XHJcblx0XHRcdH0sIHRoaXMpKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5jZW50ZXIpIHtcclxuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MucnRsKSB7XHJcblx0XHRcdFx0bXVsdGlwbGllciA9IC0xO1xyXG5cdFx0XHRcdG5ld1Bvc2l0aW9uID0gcG9zaXRpb24gKyAxO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjb29yZGluYXRlID0gdGhpcy5fY29vcmRpbmF0ZXNbcG9zaXRpb25dO1xyXG5cdFx0XHRjb29yZGluYXRlICs9ICh0aGlzLndpZHRoKCkgLSBjb29yZGluYXRlICsgKHRoaXMuX2Nvb3JkaW5hdGVzW25ld1Bvc2l0aW9uXSB8fCAwKSkgLyAyICogbXVsdGlwbGllcjtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGNvb3JkaW5hdGUgPSB0aGlzLl9jb29yZGluYXRlc1tuZXdQb3NpdGlvbl0gfHwgMDtcclxuXHRcdH1cclxuXHJcblx0XHRjb29yZGluYXRlID0gTWF0aC5jZWlsKGNvb3JkaW5hdGUpO1xyXG5cclxuXHRcdHJldHVybiBjb29yZGluYXRlO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIENhbGN1bGF0ZXMgdGhlIHNwZWVkIGZvciBhIHRyYW5zbGF0aW9uLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gZnJvbSAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgc3RhcnQgaXRlbS5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gdG8gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIHRhcmdldCBpdGVtLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbZmFjdG9yPXVuZGVmaW5lZF0gLSBUaGUgdGltZSBmYWN0b3IgaW4gbWlsbGlzZWNvbmRzLlxyXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNsYXRpb24uXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKGZyb20sIHRvLCBmYWN0b3IpIHtcclxuXHRcdGlmIChmYWN0b3IgPT09IDApIHtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIE1hdGgubWluKE1hdGgubWF4KE1hdGguYWJzKHRvIC0gZnJvbSksIDEpLCA2KSAqIE1hdGguYWJzKChmYWN0b3IgfHwgdGhpcy5zZXR0aW5ncy5zbWFydFNwZWVkKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU2xpZGVzIHRvIHRoZSBzcGVjaWZpZWQgaXRlbS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBpdGVtLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWRdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnRvID0gZnVuY3Rpb24ocG9zaXRpb24sIHNwZWVkKSB7XHJcblx0XHR2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudCgpLFxyXG5cdFx0XHRyZXZlcnQgPSBudWxsLFxyXG5cdFx0XHRkaXN0YW5jZSA9IHBvc2l0aW9uIC0gdGhpcy5yZWxhdGl2ZShjdXJyZW50KSxcclxuXHRcdFx0ZGlyZWN0aW9uID0gKGRpc3RhbmNlID4gMCkgLSAoZGlzdGFuY2UgPCAwKSxcclxuXHRcdFx0aXRlbXMgPSB0aGlzLl9pdGVtcy5sZW5ndGgsXHJcblx0XHRcdG1pbmltdW0gPSB0aGlzLm1pbmltdW0oKSxcclxuXHRcdFx0bWF4aW11bSA9IHRoaXMubWF4aW11bSgpO1xyXG5cclxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmxvb3ApIHtcclxuXHRcdFx0aWYgKCF0aGlzLnNldHRpbmdzLnJld2luZCAmJiBNYXRoLmFicyhkaXN0YW5jZSkgPiBpdGVtcyAvIDIpIHtcclxuXHRcdFx0XHRkaXN0YW5jZSArPSBkaXJlY3Rpb24gKiAtMSAqIGl0ZW1zO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRwb3NpdGlvbiA9IGN1cnJlbnQgKyBkaXN0YW5jZTtcclxuXHRcdFx0cmV2ZXJ0ID0gKChwb3NpdGlvbiAtIG1pbmltdW0pICUgaXRlbXMgKyBpdGVtcykgJSBpdGVtcyArIG1pbmltdW07XHJcblxyXG5cdFx0XHRpZiAocmV2ZXJ0ICE9PSBwb3NpdGlvbiAmJiByZXZlcnQgLSBkaXN0YW5jZSA8PSBtYXhpbXVtICYmIHJldmVydCAtIGRpc3RhbmNlID4gMCkge1xyXG5cdFx0XHRcdGN1cnJlbnQgPSByZXZlcnQgLSBkaXN0YW5jZTtcclxuXHRcdFx0XHRwb3NpdGlvbiA9IHJldmVydDtcclxuXHRcdFx0XHR0aGlzLnJlc2V0KGN1cnJlbnQpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMuc2V0dGluZ3MucmV3aW5kKSB7XHJcblx0XHRcdG1heGltdW0gKz0gMTtcclxuXHRcdFx0cG9zaXRpb24gPSAocG9zaXRpb24gJSBtYXhpbXVtICsgbWF4aW11bSkgJSBtYXhpbXVtO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cG9zaXRpb24gPSBNYXRoLm1heChtaW5pbXVtLCBNYXRoLm1pbihtYXhpbXVtLCBwb3NpdGlvbikpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuc3BlZWQodGhpcy5kdXJhdGlvbihjdXJyZW50LCBwb3NpdGlvbiwgc3BlZWQpKTtcclxuXHRcdHRoaXMuY3VycmVudChwb3NpdGlvbik7XHJcblxyXG5cdFx0aWYgKHRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHtcclxuXHRcdFx0dGhpcy51cGRhdGUoKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTbGlkZXMgdG8gdGhlIG5leHQgaXRlbS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKHNwZWVkKSB7XHJcblx0XHRzcGVlZCA9IHNwZWVkIHx8IGZhbHNlO1xyXG5cdFx0dGhpcy50byh0aGlzLnJlbGF0aXZlKHRoaXMuY3VycmVudCgpKSArIDEsIHNwZWVkKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTbGlkZXMgdG8gdGhlIHByZXZpb3VzIGl0ZW0uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWRdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbihzcGVlZCkge1xyXG5cdFx0c3BlZWQgPSBzcGVlZCB8fCBmYWxzZTtcclxuXHRcdHRoaXMudG8odGhpcy5yZWxhdGl2ZSh0aGlzLmN1cnJlbnQoKSkgLSAxLCBzcGVlZCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogSGFuZGxlcyB0aGUgZW5kIG9mIGFuIGFuaW1hdGlvbi5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgYXJndW1lbnRzLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcblx0XHQvLyBpZiBjc3MyIGFuaW1hdGlvbiB0aGVuIGV2ZW50IG9iamVjdCBpcyB1bmRlZmluZWRcclxuXHRcdGlmIChldmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuXHRcdFx0Ly8gQ2F0Y2ggb25seSBvd2wtc3RhZ2UgdHJhbnNpdGlvbkVuZCBldmVudFxyXG5cdFx0XHRpZiAoKGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50IHx8IGV2ZW50Lm9yaWdpbmFsVGFyZ2V0KSAhPT0gdGhpcy4kc3RhZ2UuZ2V0KDApKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5sZWF2ZSgnYW5pbWF0aW5nJyk7XHJcblx0XHR0aGlzLnRyaWdnZXIoJ3RyYW5zbGF0ZWQnKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHZpZXdwb3J0IHdpZHRoLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gVGhlIHdpZHRoIGluIHBpeGVsLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUudmlld3BvcnQgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciB3aWR0aDtcclxuXHRcdGlmICh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUJhc2VFbGVtZW50ICE9PSB3aW5kb3cpIHtcclxuXHRcdFx0d2lkdGggPSAkKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlQmFzZUVsZW1lbnQpLndpZHRoKCk7XHJcblx0XHR9IGVsc2UgaWYgKHdpbmRvdy5pbm5lcldpZHRoKSB7XHJcblx0XHRcdHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcblx0XHR9IGVsc2UgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpIHtcclxuXHRcdFx0d2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLndhcm4oJ0NhbiBub3QgZGV0ZWN0IHZpZXdwb3J0IHdpZHRoLicpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHdpZHRoO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlcGxhY2VzIHRoZSBjdXJyZW50IGNvbnRlbnQuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8alF1ZXJ5fFN0cmluZ30gY29udGVudCAtIFRoZSBuZXcgY29udGVudC5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbihjb250ZW50KSB7XHJcblx0XHR0aGlzLiRzdGFnZS5lbXB0eSgpO1xyXG5cdFx0dGhpcy5faXRlbXMgPSBbXTtcclxuXHJcblx0XHRpZiAoY29udGVudCkge1xyXG5cdFx0XHRjb250ZW50ID0gKGNvbnRlbnQgaW5zdGFuY2VvZiBqUXVlcnkpID8gY29udGVudCA6ICQoY29udGVudCk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MubmVzdGVkSXRlbVNlbGVjdG9yKSB7XHJcblx0XHRcdGNvbnRlbnQgPSBjb250ZW50LmZpbmQoJy4nICsgdGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3IpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnRlbnQuZmlsdGVyKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5ub2RlVHlwZSA9PT0gMTtcclxuXHRcdH0pLmVhY2goJC5wcm94eShmdW5jdGlvbihpbmRleCwgaXRlbSkge1xyXG5cdFx0XHRpdGVtID0gdGhpcy5wcmVwYXJlKGl0ZW0pO1xyXG5cdFx0XHR0aGlzLiRzdGFnZS5hcHBlbmQoaXRlbSk7XHJcblx0XHRcdHRoaXMuX2l0ZW1zLnB1c2goaXRlbSk7XHJcblx0XHRcdHRoaXMuX21lcmdlcnMucHVzaChpdGVtLmZpbmQoJ1tkYXRhLW1lcmdlXScpLmFkZEJhY2soJ1tkYXRhLW1lcmdlXScpLmF0dHIoJ2RhdGEtbWVyZ2UnKSAqIDEgfHwgMSk7XHJcblx0XHR9LCB0aGlzKSk7XHJcblxyXG5cdFx0dGhpcy5yZXNldCh0aGlzLmlzTnVtZXJpYyh0aGlzLnNldHRpbmdzLnN0YXJ0UG9zaXRpb24pID8gdGhpcy5zZXR0aW5ncy5zdGFydFBvc2l0aW9uIDogMCk7XHJcblxyXG5cdFx0dGhpcy5pbnZhbGlkYXRlKCdpdGVtcycpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFkZHMgYW4gaXRlbS5cclxuXHQgKiBAdG9kbyBVc2UgYGl0ZW1gIGluc3RlYWQgb2YgYGNvbnRlbnRgIGZvciB0aGUgZXZlbnQgYXJndW1lbnRzLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fGpRdWVyeXxTdHJpbmd9IGNvbnRlbnQgLSBUaGUgaXRlbSBjb250ZW50IHRvIGFkZC5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uXSAtIFRoZSByZWxhdGl2ZSBwb3NpdGlvbiBhdCB3aGljaCB0byBpbnNlcnQgdGhlIGl0ZW0gb3RoZXJ3aXNlIHRoZSBpdGVtIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVuZC5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGNvbnRlbnQsIHBvc2l0aW9uKSB7XHJcblx0XHR2YXIgY3VycmVudCA9IHRoaXMucmVsYXRpdmUodGhpcy5fY3VycmVudCk7XHJcblxyXG5cdFx0cG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gdGhpcy5faXRlbXMubGVuZ3RoIDogdGhpcy5ub3JtYWxpemUocG9zaXRpb24sIHRydWUpO1xyXG5cdFx0Y29udGVudCA9IGNvbnRlbnQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZW50IDogJChjb250ZW50KTtcclxuXHJcblx0XHR0aGlzLnRyaWdnZXIoJ2FkZCcsIHsgY29udGVudDogY29udGVudCwgcG9zaXRpb246IHBvc2l0aW9uIH0pO1xyXG5cclxuXHRcdGNvbnRlbnQgPSB0aGlzLnByZXBhcmUoY29udGVudCk7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2l0ZW1zLmxlbmd0aCA9PT0gMCB8fCBwb3NpdGlvbiA9PT0gdGhpcy5faXRlbXMubGVuZ3RoKSB7XHJcblx0XHRcdHRoaXMuX2l0ZW1zLmxlbmd0aCA9PT0gMCAmJiB0aGlzLiRzdGFnZS5hcHBlbmQoY29udGVudCk7XHJcblx0XHRcdHRoaXMuX2l0ZW1zLmxlbmd0aCAhPT0gMCAmJiB0aGlzLl9pdGVtc1twb3NpdGlvbiAtIDFdLmFmdGVyKGNvbnRlbnQpO1xyXG5cdFx0XHR0aGlzLl9pdGVtcy5wdXNoKGNvbnRlbnQpO1xyXG5cdFx0XHR0aGlzLl9tZXJnZXJzLnB1c2goY29udGVudC5maW5kKCdbZGF0YS1tZXJnZV0nKS5hZGRCYWNrKCdbZGF0YS1tZXJnZV0nKS5hdHRyKCdkYXRhLW1lcmdlJykgKiAxIHx8IDEpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5faXRlbXNbcG9zaXRpb25dLmJlZm9yZShjb250ZW50KTtcclxuXHRcdFx0dGhpcy5faXRlbXMuc3BsaWNlKHBvc2l0aW9uLCAwLCBjb250ZW50KTtcclxuXHRcdFx0dGhpcy5fbWVyZ2Vycy5zcGxpY2UocG9zaXRpb24sIDAsIGNvbnRlbnQuZmluZCgnW2RhdGEtbWVyZ2VdJykuYWRkQmFjaygnW2RhdGEtbWVyZ2VdJykuYXR0cignZGF0YS1tZXJnZScpICogMSB8fCAxKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9pdGVtc1tjdXJyZW50XSAmJiB0aGlzLnJlc2V0KHRoaXMuX2l0ZW1zW2N1cnJlbnRdLmluZGV4KCkpO1xyXG5cclxuXHRcdHRoaXMuaW52YWxpZGF0ZSgnaXRlbXMnKTtcclxuXHJcblx0XHR0aGlzLnRyaWdnZXIoJ2FkZGVkJywgeyBjb250ZW50OiBjb250ZW50LCBwb3NpdGlvbjogcG9zaXRpb24gfSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogUmVtb3ZlcyBhbiBpdGVtIGJ5IGl0cyBwb3NpdGlvbi5cclxuXHQgKiBAdG9kbyBVc2UgYGl0ZW1gIGluc3RlYWQgb2YgYGNvbnRlbnRgIGZvciB0aGUgZXZlbnQgYXJndW1lbnRzLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gdG8gcmVtb3ZlLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcclxuXHRcdHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24sIHRydWUpO1xyXG5cclxuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnRyaWdnZXIoJ3JlbW92ZScsIHsgY29udGVudDogdGhpcy5faXRlbXNbcG9zaXRpb25dLCBwb3NpdGlvbjogcG9zaXRpb24gfSk7XHJcblxyXG5cdFx0dGhpcy5faXRlbXNbcG9zaXRpb25dLnJlbW92ZSgpO1xyXG5cdFx0dGhpcy5faXRlbXMuc3BsaWNlKHBvc2l0aW9uLCAxKTtcclxuXHRcdHRoaXMuX21lcmdlcnMuc3BsaWNlKHBvc2l0aW9uLCAxKTtcclxuXHJcblx0XHR0aGlzLmludmFsaWRhdGUoJ2l0ZW1zJyk7XHJcblxyXG5cdFx0dGhpcy50cmlnZ2VyKCdyZW1vdmVkJywgeyBjb250ZW50OiBudWxsLCBwb3NpdGlvbjogcG9zaXRpb24gfSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogUHJlbG9hZHMgaW1hZ2VzIHdpdGggYXV0byB3aWR0aC5cclxuXHQgKiBAdG9kbyBSZXBsYWNlIGJ5IGEgbW9yZSBnZW5lcmljIGFwcHJvYWNoXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUucHJlbG9hZEF1dG9XaWR0aEltYWdlcyA9IGZ1bmN0aW9uKGltYWdlcykge1xyXG5cdFx0aW1hZ2VzLmVhY2goJC5wcm94eShmdW5jdGlvbihpLCBlbGVtZW50KSB7XHJcblx0XHRcdHRoaXMuZW50ZXIoJ3ByZS1sb2FkaW5nJyk7XHJcblx0XHRcdGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xyXG5cdFx0XHQkKG5ldyBJbWFnZSgpKS5vbmUoJ2xvYWQnLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRlbGVtZW50LmF0dHIoJ3NyYycsIGUudGFyZ2V0LnNyYyk7XHJcblx0XHRcdFx0ZWxlbWVudC5jc3MoJ29wYWNpdHknLCAxKTtcclxuXHRcdFx0XHR0aGlzLmxlYXZlKCdwcmUtbG9hZGluZycpO1xyXG5cdFx0XHRcdCF0aGlzLmlzKCdwcmUtbG9hZGluZycpICYmICF0aGlzLmlzKCdpbml0aWFsaXppbmcnKSAmJiB0aGlzLnJlZnJlc2goKTtcclxuXHRcdFx0fSwgdGhpcykpLmF0dHIoJ3NyYycsIGVsZW1lbnQuYXR0cignc3JjJykgfHwgZWxlbWVudC5hdHRyKCdkYXRhLXNyYycpIHx8IGVsZW1lbnQuYXR0cignZGF0YS1zcmMtcmV0aW5hJykpO1xyXG5cdFx0fSwgdGhpcykpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlc3Ryb3lzIHRoZSBjYXJvdXNlbC5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0dGhpcy4kZWxlbWVudC5vZmYoJy5vd2wuY29yZScpO1xyXG5cdFx0dGhpcy4kc3RhZ2Uub2ZmKCcub3dsLmNvcmUnKTtcclxuXHRcdCQoZG9jdW1lbnQpLm9mZignLm93bC5jb3JlJyk7XHJcblxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MucmVzcG9uc2l2ZSAhPT0gZmFsc2UpIHtcclxuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRpbWVyKTtcclxuXHRcdFx0dGhpcy5vZmYod2luZG93LCAncmVzaXplJywgdGhpcy5faGFuZGxlcnMub25UaHJvdHRsZWRSZXNpemUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAodmFyIGkgaW4gdGhpcy5fcGx1Z2lucykge1xyXG5cdFx0XHR0aGlzLl9wbHVnaW5zW2ldLmRlc3Ryb3koKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbignLmNsb25lZCcpLnJlbW92ZSgpO1xyXG5cclxuXHRcdHRoaXMuJHN0YWdlLnVud3JhcCgpO1xyXG5cdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS5jb250ZW50cygpLnVud3JhcCgpO1xyXG5cdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS51bndyYXAoKTtcclxuXHJcblx0XHR0aGlzLiRlbGVtZW50XHJcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMucmVmcmVzaENsYXNzKVxyXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRpbmdDbGFzcylcclxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sb2FkZWRDbGFzcylcclxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ydGxDbGFzcylcclxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5kcmFnQ2xhc3MpXHJcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZ3JhYkNsYXNzKVxyXG5cdFx0XHQuYXR0cignY2xhc3MnLCB0aGlzLiRlbGVtZW50LmF0dHIoJ2NsYXNzJykucmVwbGFjZShuZXcgUmVnRXhwKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlQ2xhc3MgKyAnLVxcXFxTK1xcXFxzJywgJ2cnKSwgJycpKVxyXG5cdFx0XHQucmVtb3ZlRGF0YSgnb3dsLmNhcm91c2VsJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogT3BlcmF0b3JzIHRvIGNhbGN1bGF0ZSByaWdodC10by1sZWZ0IGFuZCBsZWZ0LXRvLXJpZ2h0LlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2FdIC0gVGhlIGxlZnQgc2lkZSBvcGVyYW5kLlxyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBbb10gLSBUaGUgb3BlcmF0b3IuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtiXSAtIFRoZSByaWdodCBzaWRlIG9wZXJhbmQuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5vcCA9IGZ1bmN0aW9uKGEsIG8sIGIpIHtcclxuXHRcdHZhciBydGwgPSB0aGlzLnNldHRpbmdzLnJ0bDtcclxuXHRcdHN3aXRjaCAobykge1xyXG5cdFx0XHRjYXNlICc8JzpcclxuXHRcdFx0XHRyZXR1cm4gcnRsID8gYSA+IGIgOiBhIDwgYjtcclxuXHRcdFx0Y2FzZSAnPic6XHJcblx0XHRcdFx0cmV0dXJuIHJ0bCA/IGEgPCBiIDogYSA+IGI7XHJcblx0XHRcdGNhc2UgJz49JzpcclxuXHRcdFx0XHRyZXR1cm4gcnRsID8gYSA8PSBiIDogYSA+PSBiO1xyXG5cdFx0XHRjYXNlICc8PSc6XHJcblx0XHRcdFx0cmV0dXJuIHJ0bCA/IGEgPj0gYiA6IGEgPD0gYjtcclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBBdHRhY2hlcyB0byBhbiBpbnRlcm5hbCBldmVudC5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBldmVudCBzb3VyY2UuXHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IC0gVGhlIGV2ZW50IG5hbWUuXHJcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgLSBUaGUgZXZlbnQgaGFuZGxlciB0byBhdHRhY2guXHJcblx0ICogQHBhcmFtIHtCb29sZWFufSBjYXB0dXJlIC0gV2V0aGVyIHRoZSBldmVudCBzaG91bGQgYmUgaGFuZGxlZCBhdCB0aGUgY2FwdHVyaW5nIHBoYXNlIG9yIG5vdC5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGxpc3RlbmVyLCBjYXB0dXJlKSB7XHJcblx0XHRpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XHJcblx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGNhcHR1cmUpO1xyXG5cdFx0fSBlbHNlIGlmIChlbGVtZW50LmF0dGFjaEV2ZW50KSB7XHJcblx0XHRcdGVsZW1lbnQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGV0YWNoZXMgZnJvbSBhbiBpbnRlcm5hbCBldmVudC5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBldmVudCBzb3VyY2UuXHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IC0gVGhlIGV2ZW50IG5hbWUuXHJcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgLSBUaGUgYXR0YWNoZWQgZXZlbnQgaGFuZGxlciB0byBkZXRhY2guXHJcblx0ICogQHBhcmFtIHtCb29sZWFufSBjYXB0dXJlIC0gV2V0aGVyIHRoZSBhdHRhY2hlZCBldmVudCBoYW5kbGVyIHdhcyByZWdpc3RlcmVkIGFzIGEgY2FwdHVyaW5nIGxpc3RlbmVyIG9yIG5vdC5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBsaXN0ZW5lciwgY2FwdHVyZSkge1xyXG5cdFx0aWYgKGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xyXG5cdFx0XHRlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBjYXB0dXJlKTtcclxuXHRcdH0gZWxzZSBpZiAoZWxlbWVudC5kZXRhY2hFdmVudCkge1xyXG5cdFx0XHRlbGVtZW50LmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRyaWdnZXJzIGEgcHVibGljIGV2ZW50LlxyXG5cdCAqIEB0b2RvIFJlbW92ZSBgc3RhdHVzYCwgYHJlbGF0ZWRUYXJnZXRgIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gVGhlIGV2ZW50IG5hbWUuXHJcblx0ICogQHBhcmFtIHsqfSBbZGF0YT1udWxsXSAtIFRoZSBldmVudCBkYXRhLlxyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlPWNhcm91c2VsXSAtIFRoZSBldmVudCBuYW1lc3BhY2UuXHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IFtzdGF0ZV0gLSBUaGUgc3RhdGUgd2hpY2ggaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBldmVudC5cclxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtlbnRlcj1mYWxzZV0gLSBJbmRpY2F0ZXMgaWYgdGhlIGNhbGwgZW50ZXJzIHRoZSBzcGVjaWZpZWQgc3RhdGUgb3Igbm90LlxyXG5cdCAqIEByZXR1cm5zIHtFdmVudH0gLSBUaGUgZXZlbnQgYXJndW1lbnRzLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uKG5hbWUsIGRhdGEsIG5hbWVzcGFjZSwgc3RhdGUsIGVudGVyKSB7XHJcblx0XHR2YXIgc3RhdHVzID0ge1xyXG5cdFx0XHRpdGVtOiB7IGNvdW50OiB0aGlzLl9pdGVtcy5sZW5ndGgsIGluZGV4OiB0aGlzLmN1cnJlbnQoKSB9XHJcblx0XHR9LCBoYW5kbGVyID0gJC5jYW1lbENhc2UoXHJcblx0XHRcdCQuZ3JlcChbICdvbicsIG5hbWUsIG5hbWVzcGFjZSBdLCBmdW5jdGlvbih2KSB7IHJldHVybiB2IH0pXHJcblx0XHRcdFx0LmpvaW4oJy0nKS50b0xvd2VyQ2FzZSgpXHJcblx0XHQpLCBldmVudCA9ICQuRXZlbnQoXHJcblx0XHRcdFsgbmFtZSwgJ293bCcsIG5hbWVzcGFjZSB8fCAnY2Fyb3VzZWwnIF0uam9pbignLicpLnRvTG93ZXJDYXNlKCksXHJcblx0XHRcdCQuZXh0ZW5kKHsgcmVsYXRlZFRhcmdldDogdGhpcyB9LCBzdGF0dXMsIGRhdGEpXHJcblx0XHQpO1xyXG5cclxuXHRcdGlmICghdGhpcy5fc3VwcmVzc1tuYW1lXSkge1xyXG5cdFx0XHQkLmVhY2godGhpcy5fcGx1Z2lucywgZnVuY3Rpb24obmFtZSwgcGx1Z2luKSB7XHJcblx0XHRcdFx0aWYgKHBsdWdpbi5vblRyaWdnZXIpIHtcclxuXHRcdFx0XHRcdHBsdWdpbi5vblRyaWdnZXIoZXZlbnQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHR0aGlzLnJlZ2lzdGVyKHsgdHlwZTogT3dsLlR5cGUuRXZlbnQsIG5hbWU6IG5hbWUgfSk7XHJcblx0XHRcdHRoaXMuJGVsZW1lbnQudHJpZ2dlcihldmVudCk7XHJcblxyXG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncyAmJiB0eXBlb2YgdGhpcy5zZXR0aW5nc1toYW5kbGVyXSA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdHRoaXMuc2V0dGluZ3NbaGFuZGxlcl0uY2FsbCh0aGlzLCBldmVudCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZXZlbnQ7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRW50ZXJzIGEgc3RhdGUuXHJcblx0ICogQHBhcmFtIG5hbWUgLSBUaGUgc3RhdGUgbmFtZS5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmVudGVyID0gZnVuY3Rpb24obmFtZSkge1xyXG5cdFx0JC5lYWNoKFsgbmFtZSBdLmNvbmNhdCh0aGlzLl9zdGF0ZXMudGFnc1tuYW1lXSB8fCBbXSksICQucHJveHkoZnVuY3Rpb24oaSwgbmFtZSkge1xyXG5cdFx0XHRpZiAodGhpcy5fc3RhdGVzLmN1cnJlbnRbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdHRoaXMuX3N0YXRlcy5jdXJyZW50W25hbWVdID0gMDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fc3RhdGVzLmN1cnJlbnRbbmFtZV0rKztcclxuXHRcdH0sIHRoaXMpKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBMZWF2ZXMgYSBzdGF0ZS5cclxuXHQgKiBAcGFyYW0gbmFtZSAtIFRoZSBzdGF0ZSBuYW1lLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUubGVhdmUgPSBmdW5jdGlvbihuYW1lKSB7XHJcblx0XHQkLmVhY2goWyBuYW1lIF0uY29uY2F0KHRoaXMuX3N0YXRlcy50YWdzW25hbWVdIHx8IFtdKSwgJC5wcm94eShmdW5jdGlvbihpLCBuYW1lKSB7XHJcblx0XHRcdHRoaXMuX3N0YXRlcy5jdXJyZW50W25hbWVdLS07XHJcblx0XHR9LCB0aGlzKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogUmVnaXN0ZXJzIGFuIGV2ZW50IG9yIHN0YXRlLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IC0gVGhlIGV2ZW50IG9yIHN0YXRlIHRvIHJlZ2lzdGVyLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbihvYmplY3QpIHtcclxuXHRcdGlmIChvYmplY3QudHlwZSA9PT0gT3dsLlR5cGUuRXZlbnQpIHtcclxuXHRcdFx0aWYgKCEkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdKSB7XHJcblx0XHRcdFx0JC5ldmVudC5zcGVjaWFsW29iamVjdC5uYW1lXSA9IHt9O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoISQuZXZlbnQuc3BlY2lhbFtvYmplY3QubmFtZV0ub3dsKSB7XHJcblx0XHRcdFx0dmFyIF9kZWZhdWx0ID0gJC5ldmVudC5zcGVjaWFsW29iamVjdC5uYW1lXS5fZGVmYXVsdDtcclxuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdLl9kZWZhdWx0ID0gZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdFx0aWYgKF9kZWZhdWx0ICYmIF9kZWZhdWx0LmFwcGx5ICYmICghZS5uYW1lc3BhY2UgfHwgZS5uYW1lc3BhY2UuaW5kZXhPZignb3dsJykgPT09IC0xKSkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gX2RlZmF1bHQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiBlLm5hbWVzcGFjZSAmJiBlLm5hbWVzcGFjZS5pbmRleE9mKCdvd2wnKSA+IC0xO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0JC5ldmVudC5zcGVjaWFsW29iamVjdC5uYW1lXS5vd2wgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKG9iamVjdC50eXBlID09PSBPd2wuVHlwZS5TdGF0ZSkge1xyXG5cdFx0XHRpZiAoIXRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSkge1xyXG5cdFx0XHRcdHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSA9IG9iamVjdC50YWdzO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSA9IHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXS5jb25jYXQob2JqZWN0LnRhZ3MpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLl9zdGF0ZXMudGFnc1tvYmplY3QubmFtZV0gPSAkLmdyZXAodGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdLCAkLnByb3h5KGZ1bmN0aW9uKHRhZywgaSkge1xyXG5cdFx0XHRcdHJldHVybiAkLmluQXJyYXkodGFnLCB0aGlzLl9zdGF0ZXMudGFnc1tvYmplY3QubmFtZV0pID09PSBpO1xyXG5cdFx0XHR9LCB0aGlzKSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU3VwcHJlc3NlcyBldmVudHMuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IGV2ZW50cyAtIFRoZSBldmVudHMgdG8gc3VwcHJlc3MuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5zdXBwcmVzcyA9IGZ1bmN0aW9uKGV2ZW50cykge1xyXG5cdFx0JC5lYWNoKGV2ZW50cywgJC5wcm94eShmdW5jdGlvbihpbmRleCwgZXZlbnQpIHtcclxuXHRcdFx0dGhpcy5fc3VwcmVzc1tldmVudF0gPSB0cnVlO1xyXG5cdFx0fSwgdGhpcykpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlbGVhc2VzIHN1cHByZXNzZWQgZXZlbnRzLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBldmVudHMgLSBUaGUgZXZlbnRzIHRvIHJlbGVhc2UuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5yZWxlYXNlID0gZnVuY3Rpb24oZXZlbnRzKSB7XHJcblx0XHQkLmVhY2goZXZlbnRzLCAkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBldmVudCkge1xyXG5cdFx0XHRkZWxldGUgdGhpcy5fc3VwcmVzc1tldmVudF07XHJcblx0XHR9LCB0aGlzKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB1bmlmaWVkIHBvaW50ZXIgY29vcmRpbmF0ZXMgZnJvbSBldmVudC5cclxuXHQgKiBAdG9kbyAjMjYxXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7RXZlbnR9IC0gVGhlIGBtb3VzZWRvd25gIG9yIGB0b3VjaHN0YXJ0YCBldmVudC5cclxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSAtIENvbnRhaW5zIGB4YCBhbmQgYHlgIGNvb3JkaW5hdGVzIG9mIGN1cnJlbnQgcG9pbnRlciBwb3NpdGlvbi5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnBvaW50ZXIgPSBmdW5jdGlvbihldmVudCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IHsgeDogbnVsbCwgeTogbnVsbCB9O1xyXG5cclxuXHRcdGV2ZW50ID0gZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XHJcblxyXG5cdFx0ZXZlbnQgPSBldmVudC50b3VjaGVzICYmIGV2ZW50LnRvdWNoZXMubGVuZ3RoID9cclxuXHRcdFx0ZXZlbnQudG91Y2hlc1swXSA6IGV2ZW50LmNoYW5nZWRUb3VjaGVzICYmIGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA/XHJcblx0XHRcdFx0ZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBldmVudDtcclxuXHJcblx0XHRpZiAoZXZlbnQucGFnZVgpIHtcclxuXHRcdFx0cmVzdWx0LnggPSBldmVudC5wYWdlWDtcclxuXHRcdFx0cmVzdWx0LnkgPSBldmVudC5wYWdlWTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJlc3VsdC54ID0gZXZlbnQuY2xpZW50WDtcclxuXHRcdFx0cmVzdWx0LnkgPSBldmVudC5jbGllbnRZO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGV0ZXJtaW5lcyBpZiB0aGUgaW5wdXQgaXMgYSBOdW1iZXIgb3Igc29tZXRoaW5nIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gYSBOdW1iZXJcclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfE9iamVjdHxBcnJheXxCb29sZWFufFJlZ0V4cHxGdW5jdGlvbnxTeW1ib2x9IC0gVGhlIGlucHV0IHRvIGJlIHRlc3RlZFxyXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSAtIEFuIGluZGljYXRpb24gaWYgdGhlIGlucHV0IGlzIGEgTnVtYmVyIG9yIGNhbiBiZSBjb2VyY2VkIHRvIGEgTnVtYmVyXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5pc051bWVyaWMgPSBmdW5jdGlvbihudW1iZXIpIHtcclxuXHRcdHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChudW1iZXIpKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSBkaWZmZXJlbmNlIG9mIHR3byB2ZWN0b3JzLlxyXG5cdCAqIEB0b2RvICMyNjFcclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtPYmplY3R9IC0gVGhlIGZpcnN0IHZlY3Rvci5cclxuXHQgKiBAcGFyYW0ge09iamVjdH0gLSBUaGUgc2Vjb25kIHZlY3Rvci5cclxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSAtIFRoZSBkaWZmZXJlbmNlLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuZGlmZmVyZW5jZSA9IGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHg6IGZpcnN0LnggLSBzZWNvbmQueCxcclxuXHRcdFx0eTogZmlyc3QueSAtIHNlY29uZC55XHJcblx0XHR9O1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBqUXVlcnkgUGx1Z2luIGZvciB0aGUgT3dsIENhcm91c2VsXHJcblx0ICogQHRvZG8gTmF2aWdhdGlvbiBwbHVnaW4gYG5leHRgIGFuZCBgcHJldmBcclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0JC5mbi5vd2xDYXJvdXNlbCA9IGZ1bmN0aW9uKG9wdGlvbikge1xyXG5cdFx0dmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciAkdGhpcyA9ICQodGhpcyksXHJcblx0XHRcdFx0ZGF0YSA9ICR0aGlzLmRhdGEoJ293bC5jYXJvdXNlbCcpO1xyXG5cclxuXHRcdFx0aWYgKCFkYXRhKSB7XHJcblx0XHRcdFx0ZGF0YSA9IG5ldyBPd2wodGhpcywgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pO1xyXG5cdFx0XHRcdCR0aGlzLmRhdGEoJ293bC5jYXJvdXNlbCcsIGRhdGEpO1xyXG5cclxuXHRcdFx0XHQkLmVhY2goW1xyXG5cdFx0XHRcdFx0J25leHQnLCAncHJldicsICd0bycsICdkZXN0cm95JywgJ3JlZnJlc2gnLCAncmVwbGFjZScsICdhZGQnLCAncmVtb3ZlJ1xyXG5cdFx0XHRcdF0sIGZ1bmN0aW9uKGksIGV2ZW50KSB7XHJcblx0XHRcdFx0XHRkYXRhLnJlZ2lzdGVyKHsgdHlwZTogT3dsLlR5cGUuRXZlbnQsIG5hbWU6IGV2ZW50IH0pO1xyXG5cdFx0XHRcdFx0ZGF0YS4kZWxlbWVudC5vbihldmVudCArICcub3dsLmNhcm91c2VsLmNvcmUnLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucmVsYXRlZFRhcmdldCAhPT0gdGhpcykge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuc3VwcHJlc3MoWyBldmVudCBdKTtcclxuXHRcdFx0XHRcdFx0XHRkYXRhW2V2ZW50XS5hcHBseSh0aGlzLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMucmVsZWFzZShbIGV2ZW50IF0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LCBkYXRhKSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnICYmIG9wdGlvbi5jaGFyQXQoMCkgIT09ICdfJykge1xyXG5cdFx0XHRcdGRhdGFbb3B0aW9uXS5hcHBseShkYXRhLCBhcmdzKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGNvbnN0cnVjdG9yIGZvciB0aGUgalF1ZXJ5IFBsdWdpblxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yID0gT3dsO1xyXG5cclxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xyXG5cclxuLyoqXHJcbiAqIEF1dG9SZWZyZXNoIFBsdWdpblxyXG4gKiBAdmVyc2lvbiAyLjEuMFxyXG4gKiBAYXV0aG9yIEFydHVzIEtvbGFub3dza2lcclxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXHJcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKi9cclxuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyB0aGUgYXV0byByZWZyZXNoIHBsdWdpbi5cclxuXHQgKiBAY2xhc3MgVGhlIEF1dG8gUmVmcmVzaCBQbHVnaW5cclxuXHQgKiBAcGFyYW0ge093bH0gY2Fyb3VzZWwgLSBUaGUgT3dsIENhcm91c2VsXHJcblx0ICovXHJcblx0dmFyIEF1dG9SZWZyZXNoID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcclxuXHRcdC8qKlxyXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBjb3JlLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge093bH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fY29yZSA9IGNhcm91c2VsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUmVmcmVzaCBpbnRlcnZhbC5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2ludGVydmFsID0gbnVsbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgY3VycmVudGx5IHZpc2libGUgb3Igbm90LlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge0Jvb2xlYW59XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3Zpc2libGUgPSBudWxsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQWxsIGV2ZW50IGhhbmRsZXJzLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XHJcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvUmVmcmVzaCkge1xyXG5cdFx0XHRcdFx0dGhpcy53YXRjaCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcylcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gc2V0IGRlZmF1bHQgb3B0aW9uc1xyXG5cdFx0dGhpcy5fY29yZS5vcHRpb25zID0gJC5leHRlbmQoe30sIEF1dG9SZWZyZXNoLkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xyXG5cclxuXHRcdC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXHJcblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdEF1dG9SZWZyZXNoLkRlZmF1bHRzID0ge1xyXG5cdFx0YXV0b1JlZnJlc2g6IHRydWUsXHJcblx0XHRhdXRvUmVmcmVzaEludGVydmFsOiA1MDBcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBXYXRjaGVzIHRoZSBlbGVtZW50LlxyXG5cdCAqL1xyXG5cdEF1dG9SZWZyZXNoLnByb3RvdHlwZS53YXRjaCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKHRoaXMuX2ludGVydmFsKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl92aXNpYmxlID0gdGhpcy5fY29yZS4kZWxlbWVudC5pcygnOnZpc2libGUnKTtcclxuXHRcdHRoaXMuX2ludGVydmFsID0gd2luZG93LnNldEludGVydmFsKCQucHJveHkodGhpcy5yZWZyZXNoLCB0aGlzKSwgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvUmVmcmVzaEludGVydmFsKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBSZWZyZXNoZXMgdGhlIGVsZW1lbnQuXHJcblx0ICovXHJcblx0QXV0b1JlZnJlc2gucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmICh0aGlzLl9jb3JlLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpID09PSB0aGlzLl92aXNpYmxlKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl92aXNpYmxlID0gIXRoaXMuX3Zpc2libGU7XHJcblxyXG5cdFx0dGhpcy5fY29yZS4kZWxlbWVudC50b2dnbGVDbGFzcygnb3dsLWhpZGRlbicsICF0aGlzLl92aXNpYmxlKTtcclxuXHJcblx0XHR0aGlzLl92aXNpYmxlICYmICh0aGlzLl9jb3JlLmludmFsaWRhdGUoJ3dpZHRoJykgJiYgdGhpcy5fY29yZS5yZWZyZXNoKCkpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXHJcblx0ICovXHJcblx0QXV0b1JlZnJlc2gucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcclxuXHJcblx0XHR3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XHJcblxyXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XHJcblx0XHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcclxuXHRcdH1cclxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcclxuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkF1dG9SZWZyZXNoID0gQXV0b1JlZnJlc2g7XHJcblxyXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcblxyXG4vKipcclxuICogTGF6eSBQbHVnaW5cclxuICogQHZlcnNpb24gMi4xLjBcclxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcclxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXHJcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKi9cclxuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyB0aGUgbGF6eSBwbHVnaW4uXHJcblx0ICogQGNsYXNzIFRoZSBMYXp5IFBsdWdpblxyXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcclxuXHQgKi9cclxuXHR2YXIgTGF6eSA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T3dsfVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbHJlYWR5IGxvYWRlZCBpdGVtcy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtBcnJheS48alF1ZXJ5Pn1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fbG9hZGVkID0gW107XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBFdmVudCBoYW5kbGVycy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xyXG5cdFx0XHQnaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsIGNoYW5nZS5vd2wuY2Fyb3VzZWwgcmVzaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoIWUubmFtZXNwYWNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoIXRoaXMuX2NvcmUuc2V0dGluZ3MgfHwgIXRoaXMuX2NvcmUuc2V0dGluZ3MubGF6eUxvYWQpIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICgoZS5wcm9wZXJ0eSAmJiBlLnByb3BlcnR5Lm5hbWUgPT0gJ3Bvc2l0aW9uJykgfHwgZS50eXBlID09ICdpbml0aWFsaXplZCcpIHtcclxuXHRcdFx0XHRcdHZhciBzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3MsXHJcblx0XHRcdFx0XHRcdG4gPSAoc2V0dGluZ3MuY2VudGVyICYmIE1hdGguY2VpbChzZXR0aW5ncy5pdGVtcyAvIDIpIHx8IHNldHRpbmdzLml0ZW1zKSxcclxuXHRcdFx0XHRcdFx0aSA9ICgoc2V0dGluZ3MuY2VudGVyICYmIG4gKiAtMSkgfHwgMCksXHJcblx0XHRcdFx0XHRcdHBvc2l0aW9uID0gKGUucHJvcGVydHkgJiYgZS5wcm9wZXJ0eS52YWx1ZSAhPT0gdW5kZWZpbmVkID8gZS5wcm9wZXJ0eS52YWx1ZSA6IHRoaXMuX2NvcmUuY3VycmVudCgpKSArIGksXHJcblx0XHRcdFx0XHRcdGNsb25lcyA9IHRoaXMuX2NvcmUuY2xvbmVzKCkubGVuZ3RoLFxyXG5cdFx0XHRcdFx0XHRsb2FkID0gJC5wcm94eShmdW5jdGlvbihpLCB2KSB7IHRoaXMubG9hZCh2KSB9LCB0aGlzKTtcclxuXHJcblx0XHRcdFx0XHR3aGlsZSAoaSsrIDwgbikge1xyXG5cdFx0XHRcdFx0XHR0aGlzLmxvYWQoY2xvbmVzIC8gMiArIHRoaXMuX2NvcmUucmVsYXRpdmUocG9zaXRpb24pKTtcclxuXHRcdFx0XHRcdFx0Y2xvbmVzICYmICQuZWFjaCh0aGlzLl9jb3JlLmNsb25lcyh0aGlzLl9jb3JlLnJlbGF0aXZlKHBvc2l0aW9uKSksIGxvYWQpO1xyXG5cdFx0XHRcdFx0XHRwb3NpdGlvbisrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcylcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gc2V0IHRoZSBkZWZhdWx0IG9wdGlvbnNcclxuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBMYXp5LkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xyXG5cclxuXHRcdC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJcclxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0TGF6eS5EZWZhdWx0cyA9IHtcclxuXHRcdGxhenlMb2FkOiBmYWxzZVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIExvYWRzIGFsbCByZXNvdXJjZXMgb2YgYW4gaXRlbSBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgaXRlbS5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICovXHJcblx0TGF6eS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XHJcblx0XHR2YXIgJGl0ZW0gPSB0aGlzLl9jb3JlLiRzdGFnZS5jaGlsZHJlbigpLmVxKHBvc2l0aW9uKSxcclxuXHRcdFx0JGVsZW1lbnRzID0gJGl0ZW0gJiYgJGl0ZW0uZmluZCgnLm93bC1sYXp5Jyk7XHJcblxyXG5cdFx0aWYgKCEkZWxlbWVudHMgfHwgJC5pbkFycmF5KCRpdGVtLmdldCgwKSwgdGhpcy5fbG9hZGVkKSA+IC0xKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQkZWxlbWVudHMuZWFjaCgkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XHJcblx0XHRcdHZhciAkZWxlbWVudCA9ICQoZWxlbWVudCksIGltYWdlLFxyXG5cdFx0XHRcdHVybCA9ICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDEgJiYgJGVsZW1lbnQuYXR0cignZGF0YS1zcmMtcmV0aW5hJykpIHx8ICRlbGVtZW50LmF0dHIoJ2RhdGEtc3JjJyk7XHJcblxyXG5cdFx0XHR0aGlzLl9jb3JlLnRyaWdnZXIoJ2xvYWQnLCB7IGVsZW1lbnQ6ICRlbGVtZW50LCB1cmw6IHVybCB9LCAnbGF6eScpO1xyXG5cclxuXHRcdFx0aWYgKCRlbGVtZW50LmlzKCdpbWcnKSkge1xyXG5cdFx0XHRcdCRlbGVtZW50Lm9uZSgnbG9hZC5vd2wubGF6eScsICQucHJveHkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHQkZWxlbWVudC5jc3MoJ29wYWNpdHknLCAxKTtcclxuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcignbG9hZGVkJywgeyBlbGVtZW50OiAkZWxlbWVudCwgdXJsOiB1cmwgfSwgJ2xhenknKTtcclxuXHRcdFx0XHR9LCB0aGlzKSkuYXR0cignc3JjJywgdXJsKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRpbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG5cdFx0XHRcdGltYWdlLm9ubG9hZCA9ICQucHJveHkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHQkZWxlbWVudC5jc3Moe1xyXG5cdFx0XHRcdFx0XHQnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoXCInICsgdXJsICsgJ1wiKScsXHJcblx0XHRcdFx0XHRcdCdvcGFjaXR5JzogJzEnXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcignbG9hZGVkJywgeyBlbGVtZW50OiAkZWxlbWVudCwgdXJsOiB1cmwgfSwgJ2xhenknKTtcclxuXHRcdFx0XHR9LCB0aGlzKTtcclxuXHRcdFx0XHRpbWFnZS5zcmMgPSB1cmw7XHJcblx0XHRcdH1cclxuXHRcdH0sIHRoaXMpKTtcclxuXHJcblx0XHR0aGlzLl9sb2FkZWQucHVzaCgkaXRlbS5nZXQoMCkpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdExhenkucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcclxuXHJcblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5oYW5kbGVycykge1xyXG5cdFx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLmhhbmRsZXJzW2hhbmRsZXJdKTtcclxuXHRcdH1cclxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcclxuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkxhenkgPSBMYXp5O1xyXG5cclxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xyXG5cclxuLyoqXHJcbiAqIEF1dG9IZWlnaHQgUGx1Z2luXHJcbiAqIEB2ZXJzaW9uIDIuMS4wXHJcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXHJcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxyXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICovXHJcbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgdGhlIGF1dG8gaGVpZ2h0IHBsdWdpbi5cclxuXHQgKiBAY2xhc3MgVGhlIEF1dG8gSGVpZ2h0IFBsdWdpblxyXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcclxuXHQgKi9cclxuXHR2YXIgQXV0b0hlaWdodCA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XHJcblx0XHQvKipcclxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPd2x9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFsbCBldmVudCBoYW5kbGVycy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xyXG5cdFx0XHQnaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsIHJlZnJlc2hlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0KSB7XHJcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHQgJiYgZS5wcm9wZXJ0eS5uYW1lID09ICdwb3NpdGlvbicpe1xyXG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQnbG9hZGVkLm93bC5sYXp5JzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodFxyXG5cdFx0XHRcdFx0JiYgZS5lbGVtZW50LmNsb3Nlc3QoJy4nICsgdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtQ2xhc3MpLmluZGV4KCkgPT09IHRoaXMuX2NvcmUuY3VycmVudCgpKSB7XHJcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcylcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gc2V0IGRlZmF1bHQgb3B0aW9uc1xyXG5cdFx0dGhpcy5fY29yZS5vcHRpb25zID0gJC5leHRlbmQoe30sIEF1dG9IZWlnaHQuRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XHJcblxyXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcclxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0QXV0b0hlaWdodC5EZWZhdWx0cyA9IHtcclxuXHRcdGF1dG9IZWlnaHQ6IGZhbHNlLFxyXG5cdFx0YXV0b0hlaWdodENsYXNzOiAnb3dsLWhlaWdodCdcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBVcGRhdGVzIHRoZSB2aWV3LlxyXG5cdCAqL1xyXG5cdEF1dG9IZWlnaHQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIHN0YXJ0ID0gdGhpcy5fY29yZS5fY3VycmVudCxcclxuXHRcdFx0ZW5kID0gc3RhcnQgKyB0aGlzLl9jb3JlLnNldHRpbmdzLml0ZW1zLFxyXG5cdFx0XHR2aXNpYmxlID0gdGhpcy5fY29yZS4kc3RhZ2UuY2hpbGRyZW4oKS50b0FycmF5KCkuc2xpY2Uoc3RhcnQsIGVuZCksXHJcblx0XHRcdGhlaWdodHMgPSBbXSxcclxuXHRcdFx0bWF4aGVpZ2h0ID0gMDtcclxuXHJcblx0XHQkLmVhY2godmlzaWJsZSwgZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcclxuXHRcdFx0aGVpZ2h0cy5wdXNoKCQoaXRlbSkuaGVpZ2h0KCkpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0bWF4aGVpZ2h0ID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cyk7XHJcblxyXG5cdFx0dGhpcy5fY29yZS4kc3RhZ2UucGFyZW50KClcclxuXHRcdFx0LmhlaWdodChtYXhoZWlnaHQpXHJcblx0XHRcdC5hZGRDbGFzcyh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHRDbGFzcyk7XHJcblx0fTtcclxuXHJcblx0QXV0b0hlaWdodC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xyXG5cclxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xyXG5cdFx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XHJcblx0XHR9XHJcblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XHJcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5BdXRvSGVpZ2h0ID0gQXV0b0hlaWdodDtcclxuXHJcbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcclxuXHJcbi8qKlxyXG4gKiBWaWRlbyBQbHVnaW5cclxuICogQHZlcnNpb24gMi4xLjBcclxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcclxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXHJcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKi9cclxuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyB0aGUgdmlkZW8gcGx1Z2luLlxyXG5cdCAqIEBjbGFzcyBUaGUgVmlkZW8gUGx1Z2luXHJcblx0ICogQHBhcmFtIHtPd2x9IGNhcm91c2VsIC0gVGhlIE93bCBDYXJvdXNlbFxyXG5cdCAqL1xyXG5cdHZhciBWaWRlbyA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XHJcblx0XHQvKipcclxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPd2x9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIENhY2hlIGFsbCB2aWRlbyBVUkxzLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fdmlkZW9zID0ge307XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDdXJyZW50IHBsYXlpbmcgaXRlbS5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtqUXVlcnl9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3BsYXlpbmcgPSBudWxsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQWxsIGV2ZW50IGhhbmRsZXJzLlxyXG5cdFx0ICogQHRvZG8gVGhlIGNsb25lZCBjb250ZW50IHJlbW92YWxlIGlzIHRvbyBsYXRlXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcclxuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSkge1xyXG5cdFx0XHRcdFx0dGhpcy5fY29yZS5yZWdpc3Rlcih7IHR5cGU6ICdzdGF0ZScsIG5hbWU6ICdwbGF5aW5nJywgdGFnczogWyAnaW50ZXJhY3RpbmcnIF0gfSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J3Jlc2l6ZS5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy52aWRlbyAmJiB0aGlzLmlzSW5GdWxsU2NyZWVuKCkpIHtcclxuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQncmVmcmVzaGVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLmlzKCdyZXNpemluZycpKSB7XHJcblx0XHRcdFx0XHR0aGlzLl9jb3JlLiRzdGFnZS5maW5kKCcuY2xvbmVkIC5vd2wtdmlkZW8tZnJhbWUnKS5yZW1vdmUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQnY2hhbmdlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgZS5wcm9wZXJ0eS5uYW1lID09PSAncG9zaXRpb24nICYmIHRoaXMuX3BsYXlpbmcpIHtcclxuXHRcdFx0XHRcdHRoaXMuc3RvcCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdwcmVwYXJlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoIWUubmFtZXNwYWNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgJGVsZW1lbnQgPSAkKGUuY29udGVudCkuZmluZCgnLm93bC12aWRlbycpO1xyXG5cclxuXHRcdFx0XHRpZiAoJGVsZW1lbnQubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHQkZWxlbWVudC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG5cdFx0XHRcdFx0dGhpcy5mZXRjaCgkZWxlbWVudCwgJChlLmNvbnRlbnQpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpXHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcclxuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBWaWRlby5EZWZhdWx0cywgdGhpcy5fY29yZS5vcHRpb25zKTtcclxuXHJcblx0XHQvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xyXG5cdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XHJcblxyXG5cdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vbignY2xpY2sub3dsLnZpZGVvJywgJy5vd2wtdmlkZW8tcGxheS1pY29uJywgJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdHRoaXMucGxheShlKTtcclxuXHRcdH0sIHRoaXMpKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdFZpZGVvLkRlZmF1bHRzID0ge1xyXG5cdFx0dmlkZW86IGZhbHNlLFxyXG5cdFx0dmlkZW9IZWlnaHQ6IGZhbHNlLFxyXG5cdFx0dmlkZW9XaWR0aDogZmFsc2VcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSB2aWRlbyBJRCBhbmQgdGhlIHR5cGUgKFlvdVR1YmUvVmltZW8vdnphYXIgb25seSkuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7alF1ZXJ5fSB0YXJnZXQgLSBUaGUgdGFyZ2V0IGNvbnRhaW5pbmcgdGhlIHZpZGVvIGRhdGEuXHJcblx0ICogQHBhcmFtIHtqUXVlcnl9IGl0ZW0gLSBUaGUgaXRlbSBjb250YWluaW5nIHRoZSB2aWRlby5cclxuXHQgKi9cclxuXHRWaWRlby5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbih0YXJnZXQsIGl0ZW0pIHtcclxuXHRcdFx0dmFyIHR5cGUgPSAoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRpZiAodGFyZ2V0LmF0dHIoJ2RhdGEtdmltZW8taWQnKSkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gJ3ZpbWVvJztcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAodGFyZ2V0LmF0dHIoJ2RhdGEtdnphYXItaWQnKSkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gJ3Z6YWFyJ1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuICd5b3V0dWJlJztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KSgpLFxyXG5cdFx0XHRcdGlkID0gdGFyZ2V0LmF0dHIoJ2RhdGEtdmltZW8taWQnKSB8fCB0YXJnZXQuYXR0cignZGF0YS15b3V0dWJlLWlkJykgfHwgdGFyZ2V0LmF0dHIoJ2RhdGEtdnphYXItaWQnKSxcclxuXHRcdFx0XHR3aWR0aCA9IHRhcmdldC5hdHRyKCdkYXRhLXdpZHRoJykgfHwgdGhpcy5fY29yZS5zZXR0aW5ncy52aWRlb1dpZHRoLFxyXG5cdFx0XHRcdGhlaWdodCA9IHRhcmdldC5hdHRyKCdkYXRhLWhlaWdodCcpIHx8IHRoaXMuX2NvcmUuc2V0dGluZ3MudmlkZW9IZWlnaHQsXHJcblx0XHRcdFx0dXJsID0gdGFyZ2V0LmF0dHIoJ2hyZWYnKTtcclxuXHJcblx0XHRpZiAodXJsKSB7XHJcblxyXG5cdFx0XHQvKlxyXG5cdFx0XHRcdFx0UGFyc2VzIHRoZSBpZCdzIG91dCBvZiB0aGUgZm9sbG93aW5nIHVybHMgKGFuZCBwcm9iYWJseSBtb3JlKTpcclxuXHRcdFx0XHRcdGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9OmlkXHJcblx0XHRcdFx0XHRodHRwczovL3lvdXR1LmJlLzppZFxyXG5cdFx0XHRcdFx0aHR0cHM6Ly92aW1lby5jb20vOmlkXHJcblx0XHRcdFx0XHRodHRwczovL3ZpbWVvLmNvbS9jaGFubmVscy86Y2hhbm5lbC86aWRcclxuXHRcdFx0XHRcdGh0dHBzOi8vdmltZW8uY29tL2dyb3Vwcy86Z3JvdXAvdmlkZW9zLzppZFxyXG5cdFx0XHRcdFx0aHR0cHM6Ly9hcHAudnphYXIuY29tL3ZpZGVvcy86aWRcclxuXHJcblx0XHRcdFx0XHRWaXN1YWwgZXhhbXBsZTogaHR0cHM6Ly9yZWdleHBlci5jb20vIyhodHRwJTNBJTdDaHR0cHMlM0ElN0MpJTVDJTJGJTVDJTJGKHBsYXllci4lN0N3d3cuJTdDYXBwLiklM0YodmltZW8lNUMuY29tJTdDeW91dHUoYmUlNUMuY29tJTdDJTVDLmJlJTdDYmUlNUMuZ29vZ2xlYXBpcyU1Qy5jb20pJTdDdnphYXIlNUMuY29tKSU1QyUyRih2aWRlbyU1QyUyRiU3Q3ZpZGVvcyU1QyUyRiU3Q2VtYmVkJTVDJTJGJTdDY2hhbm5lbHMlNUMlMkYuJTJCJTVDJTJGJTdDZ3JvdXBzJTVDJTJGLiUyQiU1QyUyRiU3Q3dhdGNoJTVDJTNGdiUzRCU3Q3YlNUMlMkYpJTNGKCU1QkEtWmEtejAtOS5fJTI1LSU1RCopKCU1QyUyNiU1Q1MlMkIpJTNGXHJcblx0XHRcdCovXHJcblxyXG5cdFx0XHRpZCA9IHVybC5tYXRjaCgvKGh0dHA6fGh0dHBzOnwpXFwvXFwvKHBsYXllci58d3d3LnxhcHAuKT8odmltZW9cXC5jb218eW91dHUoYmVcXC5jb218XFwuYmV8YmVcXC5nb29nbGVhcGlzXFwuY29tKXx2emFhclxcLmNvbSlcXC8odmlkZW9cXC98dmlkZW9zXFwvfGVtYmVkXFwvfGNoYW5uZWxzXFwvLitcXC98Z3JvdXBzXFwvLitcXC98d2F0Y2hcXD92PXx2XFwvKT8oW0EtWmEtejAtOS5fJS1dKikoXFwmXFxTKyk/Lyk7XHJcblxyXG5cdFx0XHRpZiAoaWRbM10uaW5kZXhPZigneW91dHUnKSA+IC0xKSB7XHJcblx0XHRcdFx0dHlwZSA9ICd5b3V0dWJlJztcclxuXHRcdFx0fSBlbHNlIGlmIChpZFszXS5pbmRleE9mKCd2aW1lbycpID4gLTEpIHtcclxuXHRcdFx0XHR0eXBlID0gJ3ZpbWVvJztcclxuXHRcdFx0fSBlbHNlIGlmIChpZFszXS5pbmRleE9mKCd2emFhcicpID4gLTEpIHtcclxuXHRcdFx0XHR0eXBlID0gJ3Z6YWFyJztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1ZpZGVvIFVSTCBub3Qgc3VwcG9ydGVkLicpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlkID0gaWRbNl07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgdmlkZW8gVVJMLicpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3ZpZGVvc1t1cmxdID0ge1xyXG5cdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRpZDogaWQsXHJcblx0XHRcdHdpZHRoOiB3aWR0aCxcclxuXHRcdFx0aGVpZ2h0OiBoZWlnaHRcclxuXHRcdH07XHJcblxyXG5cdFx0aXRlbS5hdHRyKCdkYXRhLXZpZGVvJywgdXJsKTtcclxuXHJcblx0XHR0aGlzLnRodW1ibmFpbCh0YXJnZXQsIHRoaXMuX3ZpZGVvc1t1cmxdKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIHZpZGVvIHRodW1ibmFpbC5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtqUXVlcnl9IHRhcmdldCAtIFRoZSB0YXJnZXQgY29udGFpbmluZyB0aGUgdmlkZW8gZGF0YS5cclxuXHQgKiBAcGFyYW0ge09iamVjdH0gaW5mbyAtIFRoZSB2aWRlbyBpbmZvIG9iamVjdC5cclxuXHQgKiBAc2VlIGBmZXRjaGBcclxuXHQgKi9cclxuXHRWaWRlby5wcm90b3R5cGUudGh1bWJuYWlsID0gZnVuY3Rpb24odGFyZ2V0LCB2aWRlbykge1xyXG5cdFx0dmFyIHRuTGluayxcclxuXHRcdFx0aWNvbixcclxuXHRcdFx0cGF0aCxcclxuXHRcdFx0ZGltZW5zaW9ucyA9IHZpZGVvLndpZHRoICYmIHZpZGVvLmhlaWdodCA/ICdzdHlsZT1cIndpZHRoOicgKyB2aWRlby53aWR0aCArICdweDtoZWlnaHQ6JyArIHZpZGVvLmhlaWdodCArICdweDtcIicgOiAnJyxcclxuXHRcdFx0Y3VzdG9tVG4gPSB0YXJnZXQuZmluZCgnaW1nJyksXHJcblx0XHRcdHNyY1R5cGUgPSAnc3JjJyxcclxuXHRcdFx0bGF6eUNsYXNzID0gJycsXHJcblx0XHRcdHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncyxcclxuXHRcdFx0Y3JlYXRlID0gZnVuY3Rpb24ocGF0aCkge1xyXG5cdFx0XHRcdGljb24gPSAnPGRpdiBjbGFzcz1cIm93bC12aWRlby1wbGF5LWljb25cIj48L2Rpdj4nO1xyXG5cclxuXHRcdFx0XHRpZiAoc2V0dGluZ3MubGF6eUxvYWQpIHtcclxuXHRcdFx0XHRcdHRuTGluayA9ICc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXRuICcgKyBsYXp5Q2xhc3MgKyAnXCIgJyArIHNyY1R5cGUgKyAnPVwiJyArIHBhdGggKyAnXCI+PC9kaXY+JztcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dG5MaW5rID0gJzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tdG5cIiBzdHlsZT1cIm9wYWNpdHk6MTtiYWNrZ3JvdW5kLWltYWdlOnVybCgnICsgcGF0aCArICcpXCI+PC9kaXY+JztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dGFyZ2V0LmFmdGVyKHRuTGluayk7XHJcblx0XHRcdFx0dGFyZ2V0LmFmdGVyKGljb24pO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdC8vIHdyYXAgdmlkZW8gY29udGVudCBpbnRvIG93bC12aWRlby13cmFwcGVyIGRpdlxyXG5cdFx0dGFyZ2V0LndyYXAoJzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8td3JhcHBlclwiJyArIGRpbWVuc2lvbnMgKyAnPjwvZGl2PicpO1xyXG5cclxuXHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmxhenlMb2FkKSB7XHJcblx0XHRcdHNyY1R5cGUgPSAnZGF0YS1zcmMnO1xyXG5cdFx0XHRsYXp5Q2xhc3MgPSAnb3dsLWxhenknO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGN1c3RvbSB0aHVtYm5haWxcclxuXHRcdGlmIChjdXN0b21Ubi5sZW5ndGgpIHtcclxuXHRcdFx0Y3JlYXRlKGN1c3RvbVRuLmF0dHIoc3JjVHlwZSkpO1xyXG5cdFx0XHRjdXN0b21Ubi5yZW1vdmUoKTtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh2aWRlby50eXBlID09PSAneW91dHViZScpIHtcclxuXHRcdFx0cGF0aCA9IFwiLy9pbWcueW91dHViZS5jb20vdmkvXCIgKyB2aWRlby5pZCArIFwiL2hxZGVmYXVsdC5qcGdcIjtcclxuXHRcdFx0Y3JlYXRlKHBhdGgpO1xyXG5cdFx0fSBlbHNlIGlmICh2aWRlby50eXBlID09PSAndmltZW8nKSB7XHJcblx0XHRcdCQuYWpheCh7XHJcblx0XHRcdFx0dHlwZTogJ0dFVCcsXHJcblx0XHRcdFx0dXJsOiAnLy92aW1lby5jb20vYXBpL3YyL3ZpZGVvLycgKyB2aWRlby5pZCArICcuanNvbicsXHJcblx0XHRcdFx0anNvbnA6ICdjYWxsYmFjaycsXHJcblx0XHRcdFx0ZGF0YVR5cGU6ICdqc29ucCcsXHJcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xyXG5cdFx0XHRcdFx0cGF0aCA9IGRhdGFbMF0udGh1bWJuYWlsX2xhcmdlO1xyXG5cdFx0XHRcdFx0Y3JlYXRlKHBhdGgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9IGVsc2UgaWYgKHZpZGVvLnR5cGUgPT09ICd2emFhcicpIHtcclxuXHRcdFx0JC5hamF4KHtcclxuXHRcdFx0XHR0eXBlOiAnR0VUJyxcclxuXHRcdFx0XHR1cmw6ICcvL3Z6YWFyLmNvbS9hcGkvdmlkZW9zLycgKyB2aWRlby5pZCArICcuanNvbicsXHJcblx0XHRcdFx0anNvbnA6ICdjYWxsYmFjaycsXHJcblx0XHRcdFx0ZGF0YVR5cGU6ICdqc29ucCcsXHJcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xyXG5cdFx0XHRcdFx0cGF0aCA9IGRhdGEuZnJhbWVncmFiX3VybDtcclxuXHRcdFx0XHRcdGNyZWF0ZShwYXRoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0b3BzIHRoZSBjdXJyZW50IHZpZGVvLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRWaWRlby5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdzdG9wJywgbnVsbCwgJ3ZpZGVvJyk7XHJcblx0XHR0aGlzLl9wbGF5aW5nLmZpbmQoJy5vd2wtdmlkZW8tZnJhbWUnKS5yZW1vdmUoKTtcclxuXHRcdHRoaXMuX3BsYXlpbmcucmVtb3ZlQ2xhc3MoJ293bC12aWRlby1wbGF5aW5nJyk7XHJcblx0XHR0aGlzLl9wbGF5aW5nID0gbnVsbDtcclxuXHRcdHRoaXMuX2NvcmUubGVhdmUoJ3BsYXlpbmcnKTtcclxuXHRcdHRoaXMuX2NvcmUudHJpZ2dlcignc3RvcHBlZCcsIG51bGwsICd2aWRlbycpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0YXJ0cyB0aGUgY3VycmVudCB2aWRlby5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgYXJndW1lbnRzLlxyXG5cdCAqL1xyXG5cdFZpZGVvLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHRcdHZhciB0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCksXHJcblx0XHRcdGl0ZW0gPSB0YXJnZXQuY2xvc2VzdCgnLicgKyB0aGlzLl9jb3JlLnNldHRpbmdzLml0ZW1DbGFzcyksXHJcblx0XHRcdHZpZGVvID0gdGhpcy5fdmlkZW9zW2l0ZW0uYXR0cignZGF0YS12aWRlbycpXSxcclxuXHRcdFx0d2lkdGggPSB2aWRlby53aWR0aCB8fCAnMTAwJScsXHJcblx0XHRcdGhlaWdodCA9IHZpZGVvLmhlaWdodCB8fCB0aGlzLl9jb3JlLiRzdGFnZS5oZWlnaHQoKSxcclxuXHRcdFx0aHRtbDtcclxuXHJcblx0XHRpZiAodGhpcy5fcGxheWluZykge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fY29yZS5lbnRlcigncGxheWluZycpO1xyXG5cdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdwbGF5JywgbnVsbCwgJ3ZpZGVvJyk7XHJcblxyXG5cdFx0aXRlbSA9IHRoaXMuX2NvcmUuaXRlbXModGhpcy5fY29yZS5yZWxhdGl2ZShpdGVtLmluZGV4KCkpKTtcclxuXHJcblx0XHR0aGlzLl9jb3JlLnJlc2V0KGl0ZW0uaW5kZXgoKSk7XHJcblxyXG5cdFx0aWYgKHZpZGVvLnR5cGUgPT09ICd5b3V0dWJlJykge1xyXG5cdFx0XHRodG1sID0gJzxpZnJhbWUgd2lkdGg9XCInICsgd2lkdGggKyAnXCIgaGVpZ2h0PVwiJyArIGhlaWdodCArICdcIiBzcmM9XCIvL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8nICtcclxuXHRcdFx0XHR2aWRlby5pZCArICc/YXV0b3BsYXk9MSZyZWw9MCZ2PScgKyB2aWRlby5pZCArICdcIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+JztcclxuXHRcdH0gZWxzZSBpZiAodmlkZW8udHlwZSA9PT0gJ3ZpbWVvJykge1xyXG5cdFx0XHRodG1sID0gJzxpZnJhbWUgc3JjPVwiLy9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLycgKyB2aWRlby5pZCArXHJcblx0XHRcdFx0Jz9hdXRvcGxheT0xXCIgd2lkdGg9XCInICsgd2lkdGggKyAnXCIgaGVpZ2h0PVwiJyArIGhlaWdodCArXHJcblx0XHRcdFx0J1wiIGZyYW1lYm9yZGVyPVwiMFwiIHdlYmtpdGFsbG93ZnVsbHNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPic7XHJcblx0XHR9IGVsc2UgaWYgKHZpZGVvLnR5cGUgPT09ICd2emFhcicpIHtcclxuXHRcdFx0aHRtbCA9ICc8aWZyYW1lIGZyYW1lYm9yZGVyPVwiMFwiJyArICdoZWlnaHQ9XCInICsgaGVpZ2h0ICsgJ1wiJyArICd3aWR0aD1cIicgKyB3aWR0aCArXHJcblx0XHRcdFx0J1wiIGFsbG93ZnVsbHNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gd2Via2l0QWxsb3dGdWxsU2NyZWVuICcgK1xyXG5cdFx0XHRcdCdzcmM9XCIvL3ZpZXcudnphYXIuY29tLycgKyB2aWRlby5pZCArICcvcGxheWVyP2F1dG9wbGF5PXRydWVcIj48L2lmcmFtZT4nO1xyXG5cdFx0fVxyXG5cclxuXHRcdCQoJzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tZnJhbWVcIj4nICsgaHRtbCArICc8L2Rpdj4nKS5pbnNlcnRBZnRlcihpdGVtLmZpbmQoJy5vd2wtdmlkZW8nKSk7XHJcblxyXG5cdFx0dGhpcy5fcGxheWluZyA9IGl0ZW0uYWRkQ2xhc3MoJ293bC12aWRlby1wbGF5aW5nJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogQ2hlY2tzIHdoZXRoZXIgYW4gdmlkZW8gaXMgY3VycmVudGx5IGluIGZ1bGwgc2NyZWVuIG1vZGUgb3Igbm90LlxyXG5cdCAqIEB0b2RvIEJhZCBzdHlsZSBiZWNhdXNlIGxvb2tzIGxpa2UgYSByZWFkb25seSBtZXRob2QgYnV0IGNoYW5nZXMgbWVtYmVycy5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHJldHVybnMge0Jvb2xlYW59XHJcblx0ICovXHJcblx0VmlkZW8ucHJvdG90eXBlLmlzSW5GdWxsU2NyZWVuID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgZWxlbWVudCA9IGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IHx8IGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50IHx8XHJcblx0XHRcdFx0ZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQ7XHJcblxyXG5cdFx0cmV0dXJuIGVsZW1lbnQgJiYgJChlbGVtZW50KS5wYXJlbnQoKS5oYXNDbGFzcygnb3dsLXZpZGVvLWZyYW1lJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVzdHJveXMgdGhlIHBsdWdpbi5cclxuXHQgKi9cclxuXHRWaWRlby5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xyXG5cclxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKCdjbGljay5vd2wudmlkZW8nKTtcclxuXHJcblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5faGFuZGxlcnMpIHtcclxuXHRcdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5faGFuZGxlcnNbaGFuZGxlcl0pO1xyXG5cdFx0fVxyXG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xyXG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuVmlkZW8gPSBWaWRlbztcclxuXHJcbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcclxuXHJcbi8qKlxyXG4gKiBBbmltYXRlIFBsdWdpblxyXG4gKiBAdmVyc2lvbiAyLjEuMFxyXG4gKiBAYXV0aG9yIEJhcnRvc3ogV29qY2llY2hvd3NraVxyXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcclxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqL1xyXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIHRoZSBhbmltYXRlIHBsdWdpbi5cclxuXHQgKiBAY2xhc3MgVGhlIE5hdmlnYXRpb24gUGx1Z2luXHJcblx0ICogQHBhcmFtIHtPd2x9IHNjb3BlIC0gVGhlIE93bCBDYXJvdXNlbFxyXG5cdCAqL1xyXG5cdHZhciBBbmltYXRlID0gZnVuY3Rpb24oc2NvcGUpIHtcclxuXHRcdHRoaXMuY29yZSA9IHNjb3BlO1xyXG5cdFx0dGhpcy5jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQW5pbWF0ZS5EZWZhdWx0cywgdGhpcy5jb3JlLm9wdGlvbnMpO1xyXG5cdFx0dGhpcy5zd2FwcGluZyA9IHRydWU7XHJcblx0XHR0aGlzLnByZXZpb3VzID0gdW5kZWZpbmVkO1xyXG5cdFx0dGhpcy5uZXh0ID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdHRoaXMuaGFuZGxlcnMgPSB7XHJcblx0XHRcdCdjaGFuZ2Uub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PSAncG9zaXRpb24nKSB7XHJcblx0XHRcdFx0XHR0aGlzLnByZXZpb3VzID0gdGhpcy5jb3JlLmN1cnJlbnQoKTtcclxuXHRcdFx0XHRcdHRoaXMubmV4dCA9IGUucHJvcGVydHkudmFsdWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J2RyYWcub3dsLmNhcm91c2VsIGRyYWdnZWQub3dsLmNhcm91c2VsIHRyYW5zbGF0ZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlKSB7XHJcblx0XHRcdFx0XHR0aGlzLnN3YXBwaW5nID0gZS50eXBlID09ICd0cmFuc2xhdGVkJztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQndHJhbnNsYXRlLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLnN3YXBwaW5nICYmICh0aGlzLmNvcmUub3B0aW9ucy5hbmltYXRlT3V0IHx8IHRoaXMuY29yZS5vcHRpb25zLmFuaW1hdGVJbikpIHtcclxuXHRcdFx0XHRcdHRoaXMuc3dhcCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcylcclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5jb3JlLiRlbGVtZW50Lm9uKHRoaXMuaGFuZGxlcnMpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0QW5pbWF0ZS5EZWZhdWx0cyA9IHtcclxuXHRcdGFuaW1hdGVPdXQ6IGZhbHNlLFxyXG5cdFx0YW5pbWF0ZUluOiBmYWxzZVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRvZ2dsZXMgdGhlIGFuaW1hdGlvbiBjbGFzc2VzIHdoZW5ldmVyIGFuIHRyYW5zbGF0aW9ucyBzdGFydHMuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufHVuZGVmaW5lZH1cclxuXHQgKi9cclxuXHRBbmltYXRlLnByb3RvdHlwZS5zd2FwID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0aWYgKHRoaXMuY29yZS5zZXR0aW5ncy5pdGVtcyAhPT0gMSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCEkLnN1cHBvcnQuYW5pbWF0aW9uIHx8ICEkLnN1cHBvcnQudHJhbnNpdGlvbikge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5jb3JlLnNwZWVkKDApO1xyXG5cclxuXHRcdHZhciBsZWZ0LFxyXG5cdFx0XHRjbGVhciA9ICQucHJveHkodGhpcy5jbGVhciwgdGhpcyksXHJcblx0XHRcdHByZXZpb3VzID0gdGhpcy5jb3JlLiRzdGFnZS5jaGlsZHJlbigpLmVxKHRoaXMucHJldmlvdXMpLFxyXG5cdFx0XHRuZXh0ID0gdGhpcy5jb3JlLiRzdGFnZS5jaGlsZHJlbigpLmVxKHRoaXMubmV4dCksXHJcblx0XHRcdGluY29taW5nID0gdGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVJbixcclxuXHRcdFx0b3V0Z29pbmcgPSB0aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZU91dDtcclxuXHJcblx0XHRpZiAodGhpcy5jb3JlLmN1cnJlbnQoKSA9PT0gdGhpcy5wcmV2aW91cykge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG91dGdvaW5nKSB7XHJcblx0XHRcdGxlZnQgPSB0aGlzLmNvcmUuY29vcmRpbmF0ZXModGhpcy5wcmV2aW91cykgLSB0aGlzLmNvcmUuY29vcmRpbmF0ZXModGhpcy5uZXh0KTtcclxuXHRcdFx0cHJldmlvdXMub25lKCQuc3VwcG9ydC5hbmltYXRpb24uZW5kLCBjbGVhcilcclxuXHRcdFx0XHQuY3NzKCB7ICdsZWZ0JzogbGVmdCArICdweCcgfSApXHJcblx0XHRcdFx0LmFkZENsYXNzKCdhbmltYXRlZCBvd2wtYW5pbWF0ZWQtb3V0JylcclxuXHRcdFx0XHQuYWRkQ2xhc3Mob3V0Z29pbmcpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChpbmNvbWluZykge1xyXG5cdFx0XHRuZXh0Lm9uZSgkLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCwgY2xlYXIpXHJcblx0XHRcdFx0LmFkZENsYXNzKCdhbmltYXRlZCBvd2wtYW5pbWF0ZWQtaW4nKVxyXG5cdFx0XHRcdC5hZGRDbGFzcyhpbmNvbWluZyk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0QW5pbWF0ZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbihlKSB7XHJcblx0XHQkKGUudGFyZ2V0KS5jc3MoIHsgJ2xlZnQnOiAnJyB9IClcclxuXHRcdFx0LnJlbW92ZUNsYXNzKCdhbmltYXRlZCBvd2wtYW5pbWF0ZWQtb3V0IG93bC1hbmltYXRlZC1pbicpXHJcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZUluKVxyXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVPdXQpO1xyXG5cdFx0dGhpcy5jb3JlLm9uVHJhbnNpdGlvbkVuZCgpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdEFuaW1hdGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcclxuXHJcblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5oYW5kbGVycykge1xyXG5cdFx0XHR0aGlzLmNvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuaGFuZGxlcnNbaGFuZGxlcl0pO1xyXG5cdFx0fVxyXG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xyXG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQW5pbWF0ZSA9IEFuaW1hdGU7XHJcblxyXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcblxyXG4vKipcclxuICogQXV0b3BsYXkgUGx1Z2luXHJcbiAqIEB2ZXJzaW9uIDIuMS4wXHJcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXHJcbiAqIEBhdXRob3IgQXJ0dXMgS29sYW5vd3NraVxyXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcclxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqL1xyXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIHRoZSBhdXRvcGxheSBwbHVnaW4uXHJcblx0ICogQGNsYXNzIFRoZSBBdXRvcGxheSBQbHVnaW5cclxuXHQgKiBAcGFyYW0ge093bH0gc2NvcGUgLSBUaGUgT3dsIENhcm91c2VsXHJcblx0ICovXHJcblx0dmFyIEF1dG9wbGF5ID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcclxuXHRcdC8qKlxyXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBjb3JlLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge093bH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fY29yZSA9IGNhcm91c2VsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVGhlIGF1dG9wbGF5IHRpbWVvdXQuXHJcblx0XHQgKiBAdHlwZSB7VGltZW91dH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fdGltZW91dCA9IG51bGw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBJbmRpY2F0ZXMgd2hlbmV2ZXIgdGhlIGF1dG9wbGF5IGlzIHBhdXNlZC5cclxuXHRcdCAqIEB0eXBlIHtCb29sZWFufVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9wYXVzZWQgPSBmYWxzZTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFsbCBldmVudCBoYW5kbGVycy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xyXG5cdFx0XHQnY2hhbmdlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgZS5wcm9wZXJ0eS5uYW1lID09PSAnc2V0dGluZ3MnKSB7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheSkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsYXkoKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuc3RvcCgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoZS5uYW1lc3BhY2UgJiYgZS5wcm9wZXJ0eS5uYW1lID09PSAncG9zaXRpb24nKSB7XHJcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdwbGF5PycsIGUpO1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXkpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5fc2V0QXV0b1BsYXlJbnRlcnZhbCgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheSkge1xyXG5cdFx0XHRcdFx0dGhpcy5wbGF5KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J3BsYXkub3dsLmF1dG9wbGF5JzogJC5wcm94eShmdW5jdGlvbihlLCB0LCBzKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlKSB7XHJcblx0XHRcdFx0XHR0aGlzLnBsYXkodCwgcyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J3N0b3Aub3dsLmF1dG9wbGF5JzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlKSB7XHJcblx0XHRcdFx0XHR0aGlzLnN0b3AoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQnbW91c2VvdmVyLm93bC5hdXRvcGxheSc6ICQucHJveHkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlICYmIHRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcclxuXHRcdFx0XHRcdHRoaXMucGF1c2UoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQnbW91c2VsZWF2ZS5vd2wuYXV0b3BsYXknOiAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSAmJiB0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XHJcblx0XHRcdFx0XHR0aGlzLnBsYXkoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQndG91Y2hzdGFydC5vd2wuY29yZSc6ICQucHJveHkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlICYmIHRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcclxuXHRcdFx0XHRcdHRoaXMucGF1c2UoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQndG91Y2hlbmQub3dsLmNvcmUnOiAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSkge1xyXG5cdFx0XHRcdFx0dGhpcy5wbGF5KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xyXG5cdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XHJcblxyXG5cdFx0Ly8gc2V0IGRlZmF1bHQgb3B0aW9uc1xyXG5cdFx0dGhpcy5fY29yZS5vcHRpb25zID0gJC5leHRlbmQoe30sIEF1dG9wbGF5LkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0QXV0b3BsYXkuRGVmYXVsdHMgPSB7XHJcblx0XHRhdXRvcGxheTogZmFsc2UsXHJcblx0XHRhdXRvcGxheVRpbWVvdXQ6IDUwMDAsXHJcblx0XHRhdXRvcGxheUhvdmVyUGF1c2U6IGZhbHNlLFxyXG5cdFx0YXV0b3BsYXlTcGVlZDogZmFsc2VcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTdGFydHMgdGhlIGF1dG9wbGF5LlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3RpbWVvdXRdIC0gVGhlIGludGVydmFsIGJlZm9yZSB0aGUgbmV4dCBhbmltYXRpb24gc3RhcnRzLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWRdIC0gVGhlIGFuaW1hdGlvbiBzcGVlZCBmb3IgdGhlIGFuaW1hdGlvbnMuXHJcblx0ICovXHJcblx0QXV0b3BsYXkucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbih0aW1lb3V0LCBzcGVlZCkge1xyXG5cdFx0dGhpcy5fcGF1c2VkID0gZmFsc2U7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2NvcmUuZW50ZXIoJ3JvdGF0aW5nJyk7XHJcblxyXG5cdFx0dGhpcy5fc2V0QXV0b1BsYXlJbnRlcnZhbCgpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgYSBuZXcgdGltZW91dFxyXG5cdCAqIEBwcml2YXRlXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt0aW1lb3V0XSAtIFRoZSBpbnRlcnZhbCBiZWZvcmUgdGhlIG5leHQgYW5pbWF0aW9uIHN0YXJ0cy5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSBhbmltYXRpb24gc3BlZWQgZm9yIHRoZSBhbmltYXRpb25zLlxyXG5cdCAqIEByZXR1cm4ge1RpbWVvdXR9XHJcblx0ICovXHJcblx0QXV0b3BsYXkucHJvdG90eXBlLl9nZXROZXh0VGltZW91dCA9IGZ1bmN0aW9uKHRpbWVvdXQsIHNwZWVkKSB7XHJcblx0XHRpZiAoIHRoaXMuX3RpbWVvdXQgKSB7XHJcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gd2luZG93LnNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKHRoaXMuX3BhdXNlZCB8fCB0aGlzLl9jb3JlLmlzKCdidXN5JykgfHwgdGhpcy5fY29yZS5pcygnaW50ZXJhY3RpbmcnKSB8fCBkb2N1bWVudC5oaWRkZW4pIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5fY29yZS5uZXh0KHNwZWVkIHx8IHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlTcGVlZCk7XHJcblx0XHR9LCB0aGlzKSwgdGltZW91dCB8fCB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5VGltZW91dCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU2V0cyBhdXRvcGxheSBpbiBtb3Rpb24uXHJcblx0ICogQHByaXZhdGVcclxuXHQgKi9cclxuXHRBdXRvcGxheS5wcm90b3R5cGUuX3NldEF1dG9QbGF5SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuX3RpbWVvdXQgPSB0aGlzLl9nZXROZXh0VGltZW91dCgpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0b3BzIHRoZSBhdXRvcGxheS5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0QXV0b3BsYXkucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmICghdGhpcy5fY29yZS5pcygncm90YXRpbmcnKSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0d2luZG93LmNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcclxuXHRcdHRoaXMuX2NvcmUubGVhdmUoJ3JvdGF0aW5nJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU3RvcHMgdGhlIGF1dG9wbGF5LlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRBdXRvcGxheS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcclxuXHRcdGlmICghdGhpcy5fY29yZS5pcygncm90YXRpbmcnKSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fcGF1c2VkID0gdHJ1ZTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxyXG5cdCAqL1xyXG5cdEF1dG9wbGF5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaGFuZGxlciwgcHJvcGVydHk7XHJcblxyXG5cdFx0dGhpcy5zdG9wKCk7XHJcblxyXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XHJcblx0XHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcclxuXHRcdH1cclxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcclxuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLmF1dG9wbGF5ID0gQXV0b3BsYXk7XHJcblxyXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcblxyXG4vKipcclxuICogTmF2aWdhdGlvbiBQbHVnaW5cclxuICogQHZlcnNpb24gMi4xLjBcclxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXHJcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxyXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICovXHJcbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIHRoZSBuYXZpZ2F0aW9uIHBsdWdpbi5cclxuXHQgKiBAY2xhc3MgVGhlIE5hdmlnYXRpb24gUGx1Z2luXHJcblx0ICogQHBhcmFtIHtPd2x9IGNhcm91c2VsIC0gVGhlIE93bCBDYXJvdXNlbC5cclxuXHQgKi9cclxuXHR2YXIgTmF2aWdhdGlvbiA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XHJcblx0XHQvKipcclxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPd2x9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBwbHVnaW4gaXMgaW5pdGlhbGl6ZWQgb3Igbm90LlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge0Jvb2xlYW59XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGUgY3VycmVudCBwYWdpbmcgaW5kZXhlcy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtBcnJheX1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fcGFnZXMgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFsbCBET00gZWxlbWVudHMgb2YgdGhlIHVzZXIgaW50ZXJmYWNlLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fY29udHJvbHMgPSB7fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIE1hcmt1cCBmb3IgYW4gaW5kaWNhdG9yLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge0FycmF5LjxTdHJpbmc+fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl90ZW1wbGF0ZXMgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFRoZSBjYXJvdXNlbCBlbGVtZW50LlxyXG5cdFx0ICogQHR5cGUge2pRdWVyeX1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy4kZWxlbWVudCA9IHRoaXMuX2NvcmUuJGVsZW1lbnQ7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBPdmVycmlkZGVuIG1ldGhvZHMgb2YgdGhlIGNhcm91c2VsLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fb3ZlcnJpZGVzID0ge1xyXG5cdFx0XHRuZXh0OiB0aGlzLl9jb3JlLm5leHQsXHJcblx0XHRcdHByZXY6IHRoaXMuX2NvcmUucHJldixcclxuXHRcdFx0dG86IHRoaXMuX2NvcmUudG9cclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcclxuXHRcdFx0J3ByZXBhcmVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmRvdHNEYXRhKSB7XHJcblx0XHRcdFx0XHR0aGlzLl90ZW1wbGF0ZXMucHVzaCgnPGRpdiBjbGFzcz1cIicgKyB0aGlzLl9jb3JlLnNldHRpbmdzLmRvdENsYXNzICsgJ1wiPicgK1xyXG5cdFx0XHRcdFx0XHQkKGUuY29udGVudCkuZmluZCgnW2RhdGEtZG90XScpLmFkZEJhY2soJ1tkYXRhLWRvdF0nKS5hdHRyKCdkYXRhLWRvdCcpICsgJzwvZGl2PicpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdhZGRlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RzRGF0YSkge1xyXG5cdFx0XHRcdFx0dGhpcy5fdGVtcGxhdGVzLnNwbGljZShlLnBvc2l0aW9uLCAwLCB0aGlzLl90ZW1wbGF0ZXMucG9wKCkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdyZW1vdmUub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuZG90c0RhdGEpIHtcclxuXHRcdFx0XHRcdHRoaXMuX3RlbXBsYXRlcy5zcGxpY2UoZS5wb3NpdGlvbiwgMSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J2NoYW5nZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PSAncG9zaXRpb24nKSB7XHJcblx0XHRcdFx0XHR0aGlzLmRyYXcoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQnaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xyXG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdpbml0aWFsaXplJywgbnVsbCwgJ25hdmlnYXRpb24nKTtcclxuXHRcdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcclxuXHRcdFx0XHRcdHRoaXMuZHJhdygpO1xyXG5cdFx0XHRcdFx0dGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdpbml0aWFsaXplZCcsIG51bGwsICduYXZpZ2F0aW9uJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J3JlZnJlc2hlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5faW5pdGlhbGl6ZWQpIHtcclxuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcigncmVmcmVzaCcsIG51bGwsICduYXZpZ2F0aW9uJyk7XHJcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0XHRcdFx0dGhpcy5kcmF3KCk7XHJcblx0XHRcdFx0XHR0aGlzLl9jb3JlLnRyaWdnZXIoJ3JlZnJlc2hlZCcsIG51bGwsICduYXZpZ2F0aW9uJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBzZXQgZGVmYXVsdCBvcHRpb25zXHJcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgTmF2aWdhdGlvbi5EZWZhdWx0cywgdGhpcy5fY29yZS5vcHRpb25zKTtcclxuXHJcblx0XHQvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xyXG5cdFx0dGhpcy4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVmYXVsdCBvcHRpb25zLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAdG9kbyBSZW5hbWUgYHNsaWRlQnlgIHRvIGBuYXZCeWBcclxuXHQgKi9cclxuXHROYXZpZ2F0aW9uLkRlZmF1bHRzID0ge1xyXG5cdFx0bmF2OiBmYWxzZSxcclxuXHRcdG5hdlRleHQ6IFsgJ3ByZXYnLCAnbmV4dCcgXSxcclxuXHRcdG5hdlNwZWVkOiBmYWxzZSxcclxuXHRcdG5hdkVsZW1lbnQ6ICdkaXYnLFxyXG5cdFx0bmF2Q29udGFpbmVyOiBmYWxzZSxcclxuXHRcdG5hdkNvbnRhaW5lckNsYXNzOiAnb3dsLW5hdicsXHJcblx0XHRuYXZDbGFzczogWyAnb3dsLXByZXYnLCAnb3dsLW5leHQnIF0sXHJcblx0XHRzbGlkZUJ5OiAxLFxyXG5cdFx0ZG90Q2xhc3M6ICdvd2wtZG90JyxcclxuXHRcdGRvdHNDbGFzczogJ293bC1kb3RzJyxcclxuXHRcdGRvdHM6IHRydWUsXHJcblx0XHRkb3RzRWFjaDogZmFsc2UsXHJcblx0XHRkb3RzRGF0YTogZmFsc2UsXHJcblx0XHRkb3RzU3BlZWQ6IGZhbHNlLFxyXG5cdFx0ZG90c0NvbnRhaW5lcjogZmFsc2VcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgbGF5b3V0IG9mIHRoZSBwbHVnaW4gYW5kIGV4dGVuZHMgdGhlIGNhcm91c2VsLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKi9cclxuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgb3ZlcnJpZGUsXHJcblx0XHRcdHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncztcclxuXHJcblx0XHQvLyBjcmVhdGUgRE9NIHN0cnVjdHVyZSBmb3IgcmVsYXRpdmUgbmF2aWdhdGlvblxyXG5cdFx0dGhpcy5fY29udHJvbHMuJHJlbGF0aXZlID0gKHNldHRpbmdzLm5hdkNvbnRhaW5lciA/ICQoc2V0dGluZ3MubmF2Q29udGFpbmVyKVxyXG5cdFx0XHQ6ICQoJzxkaXY+JykuYWRkQ2xhc3Moc2V0dGluZ3MubmF2Q29udGFpbmVyQ2xhc3MpLmFwcGVuZFRvKHRoaXMuJGVsZW1lbnQpKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcclxuXHJcblx0XHR0aGlzLl9jb250cm9scy4kcHJldmlvdXMgPSAkKCc8JyArIHNldHRpbmdzLm5hdkVsZW1lbnQgKyAnPicpXHJcblx0XHRcdC5hZGRDbGFzcyhzZXR0aW5ncy5uYXZDbGFzc1swXSlcclxuXHRcdFx0Lmh0bWwoc2V0dGluZ3MubmF2VGV4dFswXSlcclxuXHRcdFx0LnByZXBlbmRUbyh0aGlzLl9jb250cm9scy4kcmVsYXRpdmUpXHJcblx0XHRcdC5vbignY2xpY2snLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHR0aGlzLnByZXYoc2V0dGluZ3MubmF2U3BlZWQpO1xyXG5cdFx0XHR9LCB0aGlzKSk7XHJcblx0XHR0aGlzLl9jb250cm9scy4kbmV4dCA9ICQoJzwnICsgc2V0dGluZ3MubmF2RWxlbWVudCArICc+JylcclxuXHRcdFx0LmFkZENsYXNzKHNldHRpbmdzLm5hdkNsYXNzWzFdKVxyXG5cdFx0XHQuaHRtbChzZXR0aW5ncy5uYXZUZXh0WzFdKVxyXG5cdFx0XHQuYXBwZW5kVG8odGhpcy5fY29udHJvbHMuJHJlbGF0aXZlKVxyXG5cdFx0XHQub24oJ2NsaWNrJywgJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0dGhpcy5uZXh0KHNldHRpbmdzLm5hdlNwZWVkKTtcclxuXHRcdFx0fSwgdGhpcykpO1xyXG5cclxuXHRcdC8vIGNyZWF0ZSBET00gc3RydWN0dXJlIGZvciBhYnNvbHV0ZSBuYXZpZ2F0aW9uXHJcblx0XHRpZiAoIXNldHRpbmdzLmRvdHNEYXRhKSB7XHJcblx0XHRcdHRoaXMuX3RlbXBsYXRlcyA9IFsgJCgnPGRpdj4nKVxyXG5cdFx0XHRcdC5hZGRDbGFzcyhzZXR0aW5ncy5kb3RDbGFzcylcclxuXHRcdFx0XHQuYXBwZW5kKCQoJzxzcGFuPicpKVxyXG5cdFx0XHRcdC5wcm9wKCdvdXRlckhUTUwnKSBdO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZSA9IChzZXR0aW5ncy5kb3RzQ29udGFpbmVyID8gJChzZXR0aW5ncy5kb3RzQ29udGFpbmVyKVxyXG5cdFx0XHQ6ICQoJzxkaXY+JykuYWRkQ2xhc3Moc2V0dGluZ3MuZG90c0NsYXNzKS5hcHBlbmRUbyh0aGlzLiRlbGVtZW50KSkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblxyXG5cdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLm9uKCdjbGljaycsICdkaXYnLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0dmFyIGluZGV4ID0gJChlLnRhcmdldCkucGFyZW50KCkuaXModGhpcy5fY29udHJvbHMuJGFic29sdXRlKVxyXG5cdFx0XHRcdD8gJChlLnRhcmdldCkuaW5kZXgoKSA6ICQoZS50YXJnZXQpLnBhcmVudCgpLmluZGV4KCk7XHJcblxyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHR0aGlzLnRvKGluZGV4LCBzZXR0aW5ncy5kb3RzU3BlZWQpO1xyXG5cdFx0fSwgdGhpcykpO1xyXG5cclxuXHRcdC8vIG92ZXJyaWRlIHB1YmxpYyBtZXRob2RzIG9mIHRoZSBjYXJvdXNlbFxyXG5cdFx0Zm9yIChvdmVycmlkZSBpbiB0aGlzLl9vdmVycmlkZXMpIHtcclxuXHRcdFx0dGhpcy5fY29yZVtvdmVycmlkZV0gPSAkLnByb3h5KHRoaXNbb3ZlcnJpZGVdLCB0aGlzKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKi9cclxuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaGFuZGxlciwgY29udHJvbCwgcHJvcGVydHksIG92ZXJyaWRlO1xyXG5cclxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xyXG5cdFx0XHR0aGlzLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XHJcblx0XHR9XHJcblx0XHRmb3IgKGNvbnRyb2wgaW4gdGhpcy5fY29udHJvbHMpIHtcclxuXHRcdFx0dGhpcy5fY29udHJvbHNbY29udHJvbF0ucmVtb3ZlKCk7XHJcblx0XHR9XHJcblx0XHRmb3IgKG92ZXJyaWRlIGluIHRoaXMub3ZlcmlkZXMpIHtcclxuXHRcdFx0dGhpcy5fY29yZVtvdmVycmlkZV0gPSB0aGlzLl9vdmVycmlkZXNbb3ZlcnJpZGVdO1xyXG5cdFx0fVxyXG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xyXG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBVcGRhdGVzIHRoZSBpbnRlcm5hbCBzdGF0ZS5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICovXHJcblx0TmF2aWdhdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaSwgaiwgayxcclxuXHRcdFx0bG93ZXIgPSB0aGlzLl9jb3JlLmNsb25lcygpLmxlbmd0aCAvIDIsXHJcblx0XHRcdHVwcGVyID0gbG93ZXIgKyB0aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoLFxyXG5cdFx0XHRtYXhpbXVtID0gdGhpcy5fY29yZS5tYXhpbXVtKHRydWUpLFxyXG5cdFx0XHRzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3MsXHJcblx0XHRcdHNpemUgPSBzZXR0aW5ncy5jZW50ZXIgfHwgc2V0dGluZ3MuYXV0b1dpZHRoIHx8IHNldHRpbmdzLmRvdHNEYXRhXHJcblx0XHRcdFx0PyAxIDogc2V0dGluZ3MuZG90c0VhY2ggfHwgc2V0dGluZ3MuaXRlbXM7XHJcblxyXG5cdFx0aWYgKHNldHRpbmdzLnNsaWRlQnkgIT09ICdwYWdlJykge1xyXG5cdFx0XHRzZXR0aW5ncy5zbGlkZUJ5ID0gTWF0aC5taW4oc2V0dGluZ3Muc2xpZGVCeSwgc2V0dGluZ3MuaXRlbXMpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChzZXR0aW5ncy5kb3RzIHx8IHNldHRpbmdzLnNsaWRlQnkgPT0gJ3BhZ2UnKSB7XHJcblx0XHRcdHRoaXMuX3BhZ2VzID0gW107XHJcblxyXG5cdFx0XHRmb3IgKGkgPSBsb3dlciwgaiA9IDAsIGsgPSAwOyBpIDwgdXBwZXI7IGkrKykge1xyXG5cdFx0XHRcdGlmIChqID49IHNpemUgfHwgaiA9PT0gMCkge1xyXG5cdFx0XHRcdFx0dGhpcy5fcGFnZXMucHVzaCh7XHJcblx0XHRcdFx0XHRcdHN0YXJ0OiBNYXRoLm1pbihtYXhpbXVtLCBpIC0gbG93ZXIpLFxyXG5cdFx0XHRcdFx0XHRlbmQ6IGkgLSBsb3dlciArIHNpemUgLSAxXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdGlmIChNYXRoLm1pbihtYXhpbXVtLCBpIC0gbG93ZXIpID09PSBtYXhpbXVtKSB7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aiA9IDAsICsraztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aiArPSB0aGlzLl9jb3JlLm1lcmdlcnModGhpcy5fY29yZS5yZWxhdGl2ZShpKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEcmF3cyB0aGUgdXNlciBpbnRlcmZhY2UuXHJcblx0ICogQHRvZG8gVGhlIG9wdGlvbiBgZG90c0RhdGFgIHdvbnQgd29yay5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICovXHJcblx0TmF2aWdhdGlvbi5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGRpZmZlcmVuY2UsXHJcblx0XHRcdHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncyxcclxuXHRcdFx0ZGlzYWJsZWQgPSB0aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoIDw9IHNldHRpbmdzLml0ZW1zLFxyXG5cdFx0XHRpbmRleCA9IHRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpLFxyXG5cdFx0XHRsb29wID0gc2V0dGluZ3MubG9vcCB8fCBzZXR0aW5ncy5yZXdpbmQ7XHJcblxyXG5cdFx0dGhpcy5fY29udHJvbHMuJHJlbGF0aXZlLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFzZXR0aW5ncy5uYXYgfHwgZGlzYWJsZWQpO1xyXG5cclxuXHRcdGlmIChzZXR0aW5ncy5uYXYpIHtcclxuXHRcdFx0dGhpcy5fY29udHJvbHMuJHByZXZpb3VzLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFsb29wICYmIGluZGV4IDw9IHRoaXMuX2NvcmUubWluaW11bSh0cnVlKSk7XHJcblx0XHRcdHRoaXMuX2NvbnRyb2xzLiRuZXh0LnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFsb29wICYmIGluZGV4ID49IHRoaXMuX2NvcmUubWF4aW11bSh0cnVlKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFzZXR0aW5ncy5kb3RzIHx8IGRpc2FibGVkKTtcclxuXHJcblx0XHRpZiAoc2V0dGluZ3MuZG90cykge1xyXG5cdFx0XHRkaWZmZXJlbmNlID0gdGhpcy5fcGFnZXMubGVuZ3RoIC0gdGhpcy5fY29udHJvbHMuJGFic29sdXRlLmNoaWxkcmVuKCkubGVuZ3RoO1xyXG5cclxuXHRcdFx0aWYgKHNldHRpbmdzLmRvdHNEYXRhICYmIGRpZmZlcmVuY2UgIT09IDApIHtcclxuXHRcdFx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuaHRtbCh0aGlzLl90ZW1wbGF0ZXMuam9pbignJykpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGRpZmZlcmVuY2UgPiAwKSB7XHJcblx0XHRcdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLmFwcGVuZChuZXcgQXJyYXkoZGlmZmVyZW5jZSArIDEpLmpvaW4odGhpcy5fdGVtcGxhdGVzWzBdKSk7XHJcblx0XHRcdH0gZWxzZSBpZiAoZGlmZmVyZW5jZSA8IDApIHtcclxuXHRcdFx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuY2hpbGRyZW4oKS5zbGljZShkaWZmZXJlbmNlKS5yZW1vdmUoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcblx0XHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLmVxKCQuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSwgdGhpcy5fcGFnZXMpKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRXh0ZW5kcyBldmVudCBkYXRhLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBvYmplY3Qgd2hpY2ggZ2V0cyB0aHJvd24uXHJcblx0ICovXHJcblx0TmF2aWdhdGlvbi5wcm90b3R5cGUub25UcmlnZ2VyID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHRcdHZhciBzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3M7XHJcblxyXG5cdFx0ZXZlbnQucGFnZSA9IHtcclxuXHRcdFx0aW5kZXg6ICQuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSwgdGhpcy5fcGFnZXMpLFxyXG5cdFx0XHRjb3VudDogdGhpcy5fcGFnZXMubGVuZ3RoLFxyXG5cdFx0XHRzaXplOiBzZXR0aW5ncyAmJiAoc2V0dGluZ3MuY2VudGVyIHx8IHNldHRpbmdzLmF1dG9XaWR0aCB8fCBzZXR0aW5ncy5kb3RzRGF0YVxyXG5cdFx0XHRcdD8gMSA6IHNldHRpbmdzLmRvdHNFYWNoIHx8IHNldHRpbmdzLml0ZW1zKVxyXG5cdFx0fTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSBjdXJyZW50IHBhZ2UgcG9zaXRpb24gb2YgdGhlIGNhcm91c2VsLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG5cdCAqL1xyXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLmN1cnJlbnQgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBjdXJyZW50ID0gdGhpcy5fY29yZS5yZWxhdGl2ZSh0aGlzLl9jb3JlLmN1cnJlbnQoKSk7XHJcblx0XHRyZXR1cm4gJC5ncmVwKHRoaXMuX3BhZ2VzLCAkLnByb3h5KGZ1bmN0aW9uKHBhZ2UsIGluZGV4KSB7XHJcblx0XHRcdHJldHVybiBwYWdlLnN0YXJ0IDw9IGN1cnJlbnQgJiYgcGFnZS5lbmQgPj0gY3VycmVudDtcclxuXHRcdH0sIHRoaXMpKS5wb3AoKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSBjdXJyZW50IHN1Y2Nlc29yL3ByZWRlY2Vzc29yIHBvc2l0aW9uLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG5cdCAqL1xyXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLmdldFBvc2l0aW9uID0gZnVuY3Rpb24oc3VjY2Vzc29yKSB7XHJcblx0XHR2YXIgcG9zaXRpb24sIGxlbmd0aCxcclxuXHRcdFx0c2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzO1xyXG5cclxuXHRcdGlmIChzZXR0aW5ncy5zbGlkZUJ5ID09ICdwYWdlJykge1xyXG5cdFx0XHRwb3NpdGlvbiA9ICQuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSwgdGhpcy5fcGFnZXMpO1xyXG5cdFx0XHRsZW5ndGggPSB0aGlzLl9wYWdlcy5sZW5ndGg7XHJcblx0XHRcdHN1Y2Nlc3NvciA/ICsrcG9zaXRpb24gOiAtLXBvc2l0aW9uO1xyXG5cdFx0XHRwb3NpdGlvbiA9IHRoaXMuX3BhZ2VzWygocG9zaXRpb24gJSBsZW5ndGgpICsgbGVuZ3RoKSAlIGxlbmd0aF0uc3RhcnQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRwb3NpdGlvbiA9IHRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpO1xyXG5cdFx0XHRsZW5ndGggPSB0aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoO1xyXG5cdFx0XHRzdWNjZXNzb3IgPyBwb3NpdGlvbiArPSBzZXR0aW5ncy5zbGlkZUJ5IDogcG9zaXRpb24gLT0gc2V0dGluZ3Muc2xpZGVCeTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcG9zaXRpb247XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU2xpZGVzIHRvIHRoZSBuZXh0IGl0ZW0gb3IgcGFnZS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZD1mYWxzZV0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxyXG5cdCAqL1xyXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbihzcGVlZCkge1xyXG5cdFx0JC5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sIHRoaXMuX2NvcmUpKHRoaXMuZ2V0UG9zaXRpb24odHJ1ZSksIHNwZWVkKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTbGlkZXMgdG8gdGhlIHByZXZpb3VzIGl0ZW0gb3IgcGFnZS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZD1mYWxzZV0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxyXG5cdCAqL1xyXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbihzcGVlZCkge1xyXG5cdFx0JC5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sIHRoaXMuX2NvcmUpKHRoaXMuZ2V0UG9zaXRpb24oZmFsc2UpLCBzcGVlZCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU2xpZGVzIHRvIHRoZSBzcGVjaWZpZWQgaXRlbSBvciBwYWdlLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gb3IgcGFnZS5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXHJcblx0ICogQHBhcmFtIHtCb29sZWFufSBbc3RhbmRhcmQ9ZmFsc2VdIC0gV2hldGhlciB0byB1c2UgdGhlIHN0YW5kYXJkIGJlaGF2aW91ciBvciBub3QuXHJcblx0ICovXHJcblx0TmF2aWdhdGlvbi5wcm90b3R5cGUudG8gPSBmdW5jdGlvbihwb3NpdGlvbiwgc3BlZWQsIHN0YW5kYXJkKSB7XHJcblx0XHR2YXIgbGVuZ3RoO1xyXG5cclxuXHRcdGlmICghc3RhbmRhcmQgJiYgdGhpcy5fcGFnZXMubGVuZ3RoKSB7XHJcblx0XHRcdGxlbmd0aCA9IHRoaXMuX3BhZ2VzLmxlbmd0aDtcclxuXHRcdFx0JC5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sIHRoaXMuX2NvcmUpKHRoaXMuX3BhZ2VzWygocG9zaXRpb24gJSBsZW5ndGgpICsgbGVuZ3RoKSAlIGxlbmd0aF0uc3RhcnQsIHNwZWVkKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdCQucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLCB0aGlzLl9jb3JlKShwb3NpdGlvbiwgc3BlZWQpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5OYXZpZ2F0aW9uID0gTmF2aWdhdGlvbjtcclxuXHJcbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcclxuXHJcbi8qKlxyXG4gKiBIYXNoIFBsdWdpblxyXG4gKiBAdmVyc2lvbiAyLjEuMFxyXG4gKiBAYXV0aG9yIEFydHVzIEtvbGFub3dza2lcclxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXHJcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKi9cclxuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgdGhlIGhhc2ggcGx1Z2luLlxyXG5cdCAqIEBjbGFzcyBUaGUgSGFzaCBQbHVnaW5cclxuXHQgKiBAcGFyYW0ge093bH0gY2Fyb3VzZWwgLSBUaGUgT3dsIENhcm91c2VsXHJcblx0ICovXHJcblx0dmFyIEhhc2ggPSBmdW5jdGlvbihjYXJvdXNlbCkge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T3dsfVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBIYXNoIGluZGV4IGZvciB0aGUgaXRlbXMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9oYXNoZXMgPSB7fTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFRoZSBjYXJvdXNlbCBlbGVtZW50LlxyXG5cdFx0ICogQHR5cGUge2pRdWVyeX1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy4kZWxlbWVudCA9IHRoaXMuX2NvcmUuJGVsZW1lbnQ7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcclxuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLnN0YXJ0UG9zaXRpb24gPT09ICdVUkxIYXNoJykge1xyXG5cdFx0XHRcdFx0JCh3aW5kb3cpLnRyaWdnZXIoJ2hhc2hjaGFuZ2Uub3dsLm5hdmlnYXRpb24nKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQncHJlcGFyZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlKSB7XHJcblx0XHRcdFx0XHR2YXIgaGFzaCA9ICQoZS5jb250ZW50KS5maW5kKCdbZGF0YS1oYXNoXScpLmFkZEJhY2soJ1tkYXRhLWhhc2hdJykuYXR0cignZGF0YS1oYXNoJyk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCFoYXNoKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR0aGlzLl9oYXNoZXNbaGFzaF0gPSBlLmNvbnRlbnQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J2NoYW5nZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PT0gJ3Bvc2l0aW9uJykge1xyXG5cdFx0XHRcdFx0dmFyIGN1cnJlbnQgPSB0aGlzLl9jb3JlLml0ZW1zKHRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpKSxcclxuXHRcdFx0XHRcdFx0aGFzaCA9ICQubWFwKHRoaXMuX2hhc2hlcywgZnVuY3Rpb24oaXRlbSwgaGFzaCkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBpdGVtID09PSBjdXJyZW50ID8gaGFzaCA6IG51bGw7XHJcblx0XHRcdFx0XHRcdH0pLmpvaW4oKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIWhhc2ggfHwgd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoMSkgPT09IGhhc2gpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpXHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcclxuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBIYXNoLkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xyXG5cclxuXHRcdC8vIHJlZ2lzdGVyIHRoZSBldmVudCBoYW5kbGVyc1xyXG5cdFx0dGhpcy4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XHJcblxyXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXIgZm9yIGhhc2ggbmF2aWdhdGlvblxyXG5cdFx0JCh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlLm93bC5uYXZpZ2F0aW9uJywgJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpLFxyXG5cdFx0XHRcdGl0ZW1zID0gdGhpcy5fY29yZS4kc3RhZ2UuY2hpbGRyZW4oKSxcclxuXHRcdFx0XHRwb3NpdGlvbiA9IHRoaXMuX2hhc2hlc1toYXNoXSAmJiBpdGVtcy5pbmRleCh0aGlzLl9oYXNoZXNbaGFzaF0pO1xyXG5cclxuXHRcdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPT09IHRoaXMuX2NvcmUuY3VycmVudCgpKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLl9jb3JlLnRvKHRoaXMuX2NvcmUucmVsYXRpdmUocG9zaXRpb24pLCBmYWxzZSwgdHJ1ZSk7XHJcblx0XHR9LCB0aGlzKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVmYXVsdCBvcHRpb25zLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRIYXNoLkRlZmF1bHRzID0ge1xyXG5cdFx0VVJMaGFzaExpc3RlbmVyOiBmYWxzZVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdEhhc2gucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcclxuXHJcblx0XHQkKHdpbmRvdykub2ZmKCdoYXNoY2hhbmdlLm93bC5uYXZpZ2F0aW9uJyk7XHJcblxyXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XHJcblx0XHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcclxuXHRcdH1cclxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcclxuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkhhc2ggPSBIYXNoO1xyXG5cclxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xyXG5cclxuLyoqXHJcbiAqIFN1cHBvcnQgUGx1Z2luXHJcbiAqXHJcbiAqIEB2ZXJzaW9uIDIuMS4wXHJcbiAqIEBhdXRob3IgVml2aWQgUGxhbmV0IFNvZnR3YXJlIEdtYkhcclxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXHJcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxyXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICovXHJcbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblxyXG5cdHZhciBzdHlsZSA9ICQoJzxzdXBwb3J0PicpLmdldCgwKS5zdHlsZSxcclxuXHRcdHByZWZpeGVzID0gJ1dlYmtpdCBNb3ogTyBtcycuc3BsaXQoJyAnKSxcclxuXHRcdGV2ZW50cyA9IHtcclxuXHRcdFx0dHJhbnNpdGlvbjoge1xyXG5cdFx0XHRcdGVuZDoge1xyXG5cdFx0XHRcdFx0V2Via2l0VHJhbnNpdGlvbjogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxyXG5cdFx0XHRcdFx0TW96VHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxyXG5cdFx0XHRcdFx0T1RyYW5zaXRpb246ICdvVHJhbnNpdGlvbkVuZCcsXHJcblx0XHRcdFx0XHR0cmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCdcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGFuaW1hdGlvbjoge1xyXG5cdFx0XHRcdGVuZDoge1xyXG5cdFx0XHRcdFx0V2Via2l0QW5pbWF0aW9uOiAnd2Via2l0QW5pbWF0aW9uRW5kJyxcclxuXHRcdFx0XHRcdE1vekFuaW1hdGlvbjogJ2FuaW1hdGlvbmVuZCcsXHJcblx0XHRcdFx0XHRPQW5pbWF0aW9uOiAnb0FuaW1hdGlvbkVuZCcsXHJcblx0XHRcdFx0XHRhbmltYXRpb246ICdhbmltYXRpb25lbmQnXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0dGVzdHMgPSB7XHJcblx0XHRcdGNzc3RyYW5zZm9ybXM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhIXRlc3QoJ3RyYW5zZm9ybScpO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRjc3N0cmFuc2Zvcm1zM2Q6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhIXRlc3QoJ3BlcnNwZWN0aXZlJyk7XHJcblx0XHRcdH0sXHJcblx0XHRcdGNzc3RyYW5zaXRpb25zOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gISF0ZXN0KCd0cmFuc2l0aW9uJyk7XHJcblx0XHRcdH0sXHJcblx0XHRcdGNzc2FuaW1hdGlvbnM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAhIXRlc3QoJ2FuaW1hdGlvbicpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRmdW5jdGlvbiB0ZXN0KHByb3BlcnR5LCBwcmVmaXhlZCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IGZhbHNlLFxyXG5cdFx0XHR1cHBlciA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XHJcblxyXG5cdFx0JC5lYWNoKChwcm9wZXJ0eSArICcgJyArIHByZWZpeGVzLmpvaW4odXBwZXIgKyAnICcpICsgdXBwZXIpLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGksIHByb3BlcnR5KSB7XHJcblx0XHRcdGlmIChzdHlsZVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdHJlc3VsdCA9IHByZWZpeGVkID8gcHJvcGVydHkgOiB0cnVlO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHByZWZpeGVkKHByb3BlcnR5KSB7XHJcblx0XHRyZXR1cm4gdGVzdChwcm9wZXJ0eSwgdHJ1ZSk7XHJcblx0fVxyXG5cclxuXHRpZiAodGVzdHMuY3NzdHJhbnNpdGlvbnMoKSkge1xyXG5cdFx0LyoganNoaW50IC1XMDUzICovXHJcblx0XHQkLnN1cHBvcnQudHJhbnNpdGlvbiA9IG5ldyBTdHJpbmcocHJlZml4ZWQoJ3RyYW5zaXRpb24nKSlcclxuXHRcdCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCA9IGV2ZW50cy50cmFuc2l0aW9uLmVuZFsgJC5zdXBwb3J0LnRyYW5zaXRpb24gXTtcclxuXHR9XHJcblxyXG5cdGlmICh0ZXN0cy5jc3NhbmltYXRpb25zKCkpIHtcclxuXHRcdC8qIGpzaGludCAtVzA1MyAqL1xyXG5cdFx0JC5zdXBwb3J0LmFuaW1hdGlvbiA9IG5ldyBTdHJpbmcocHJlZml4ZWQoJ2FuaW1hdGlvbicpKVxyXG5cdFx0JC5zdXBwb3J0LmFuaW1hdGlvbi5lbmQgPSBldmVudHMuYW5pbWF0aW9uLmVuZFsgJC5zdXBwb3J0LmFuaW1hdGlvbiBdO1xyXG5cdH1cclxuXHJcblx0aWYgKHRlc3RzLmNzc3RyYW5zZm9ybXMoKSkge1xyXG5cdFx0LyoganNoaW50IC1XMDUzICovXHJcblx0XHQkLnN1cHBvcnQudHJhbnNmb3JtID0gbmV3IFN0cmluZyhwcmVmaXhlZCgndHJhbnNmb3JtJykpO1xyXG5cdFx0JC5zdXBwb3J0LnRyYW5zZm9ybTNkID0gdGVzdHMuY3NzdHJhbnNmb3JtczNkKCk7XHJcblx0fVxyXG5cclxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xyXG5mdW5jdGlvbiBDb3VudGRvd25UaW1lcihlbG0sIHRsLCBtZXMpIHtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcbkNvdW50ZG93blRpbWVyLnByb3RvdHlwZSA9IHtcclxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIChlbG0sIHRsLCBtZXMpIHtcclxuICAgICAgICB0aGlzLmVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbG0pO1xyXG4gICAgICAgIHRoaXMudGwgPSB0bDtcclxuICAgICAgICB0aGlzLm1lcyA9IG1lcztcclxuICAgIH0sIGNvdW50RG93bjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0aW1lciA9ICcnO1xyXG4gICAgICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgdmFyIGRheSA9IE1hdGguZmxvb3IoKHRoaXMudGwgLSB0b2RheSkgLyAoMjQgKiA2MCAqIDYwICogMTAwMCkpO1xyXG4gICAgICAgIHZhciBob3VyID0gTWF0aC5mbG9vcigoKHRoaXMudGwgLSB0b2RheSkgJSAoMjQgKiA2MCAqIDYwICogMTAwMCkpIC8gKDYwICogNjAgKiAxMDAwKSk7XHJcbiAgICAgICAgdmFyIG1pbiA9IE1hdGguZmxvb3IoKCh0aGlzLnRsIC0gdG9kYXkpICUgKDI0ICogNjAgKiA2MCAqIDEwMDApKSAvICg2MCAqIDEwMDApKSAlIDYwO1xyXG4gICAgICAgIHZhciBzZWMgPSBNYXRoLmZsb29yKCgodGhpcy50bCAtIHRvZGF5KSAlICgyNCAqIDYwICogNjAgKiAxMDAwKSkgLyAxMDAwKSAlIDYwICUgNjA7XHJcbiAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKCggdGhpcy50bCAtIHRvZGF5ICkgPiAwKSB7XHJcbiAgICAgICAgICAgIHRpbWVyICs9ICc8c3BhbiBjbGFzcz1cImNvdW50ZG93bl9faXRlbVwiPjxzcGFuIGNsYXNzPVwiY291bnRkb3duX19udW1iZXJcIj4nICsgZGF5ICsgJzwvc3Bhbj48ZGl2IGNsYXNzPVwiY291bnRkb3duX19jYXB0aW9uXCI+0LTQvdC10Lk8L2Rpdj48L3NwYW4+JztcclxuICAgICAgICAgICAgdGltZXIgKz0gJzxzcGFuIGNsYXNzPVwiY291bnRkb3duX19pdGVtXCI+PHNwYW4gY2xhc3M9XCJjb3VudGRvd25fX251bWJlclwiPjogJyArIGhvdXIgKyAnPC9zcGFuPjxkaXYgY2xhc3M9XCJjb3VudGRvd25fX2NhcHRpb25cIj7Rh9Cw0YHQvtCyPC9kaXY+PC9zcGFuPic7XHJcbiAgICAgICAgICAgIHRpbWVyICs9ICc8c3BhbiBjbGFzcz1cImNvdW50ZG93bl9faXRlbVwiPjxzcGFuIGNsYXNzPVwiY291bnRkb3duX19udW1iZXJcIj46ICcgKyB0aGlzLmFkZFplcm8obWluKSArICc8L3NwYW4+PGRpdiBjbGFzcz1cImNvdW50ZG93bl9fY2FwdGlvblwiPtC80LjQvdGD0YI8L2Rpdj48L3NwYW4+JztcclxuICAgICAgICAgICAgdGhpcy5lbGVtLmlubmVySFRNTCA9IHRpbWVyO1xyXG4gICAgICAgICAgICB0aWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIG1lLmNvdW50RG93bigpO1xyXG4gICAgICAgICAgICB9LCAxMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtLmlubmVySFRNTCA9IHRoaXMubWVzO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfSwgYWRkWmVybzogZnVuY3Rpb24gKG51bSkge1xyXG4gICAgICAgIHJldHVybiAoJzAnICsgbnVtKS5zbGljZSgtMik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY291bnRkb3duKCkge1xyXG5cclxuICAgIC8vIFNldCBjb3VudGRvd24gbGltaXRcclxuICAgIHZhciB0bCA9IG5ldyBEYXRlKCcyMDE3LzEwLzE1IDAwOjAwOjAwJyk7XHJcblxyXG4gICAgLy8gWW91IGNhbiBhZGQgdGltZSdzIHVwIG1lc3NhZ2UgaGVyZVxyXG4gICAgdmFyIHRpbWVyID0gbmV3IENvdW50ZG93blRpbWVyKCdjb3VudGRvd24nLCB0bCwgJzxzcGFuIGNsYXNzPVwibnVtYmVyLXdyYXBwZXJcIj48c3BhbiBjbGFzcz1cIm51bWJlciBlbmRcIj7QkNC60YbQuNGPINC30LDQutC+0L3Rh9C40LvQsNGB0Yw8L3NwYW4+PC9zcGFuPicpO1xyXG4gICAgdGltZXIuY291bnREb3duKCk7XHJcbn1cclxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGNvdW50ZG93bigpO1xyXG59XHJcbid1c2Ugc3RyaWN0JztcclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgJChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJChcIiNyYW5nZVNsaWRlclwiKS5pb25SYW5nZVNsaWRlcih7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic2luZ2xlXCIsXHJcbiAgICAgICAgICAgIGdyaWQ6IHRydWUsXHJcbiAgICAgICAgICAgIG1pbjogMSxcclxuICAgICAgICAgICAgbWF4OiAxMCxcclxuICAgICAgICAgICAgZnJvbTogNS41LFxyXG4gICAgICAgICAgICBncmlkX251bTogOSxcclxuICAgICAgICAgICAgc3RlcDogMC41LFxyXG4gICAgICAgICAgICBoaWRlX21pbl9tYXg6IHRydWUsXHJcbiAgICAgICAgICAgIHBvc3RmaXg6IFwiINC8PHN1cD4yPC9zdXA+XCJcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgJChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJCgnLnRhYnNfX2l0ZW1zJykub24oJ2NsaWNrJywgJ2xpOm5vdCguYWN0aXZlKScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCh0aGlzKVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCd0YWJzX19pdGVtX2FjdGl2ZScpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ3RhYnNfX2l0ZW1fYWN0aXZlJylcclxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcudGFicycpLmZpbmQoJy50YWJzX19jb250ZW50JykucmVtb3ZlQ2xhc3MoJ3RhYnNfX2NvbnRlbnRfYWN0aXZlJykuZXEoJCh0aGlzKS5pbmRleCgpKS5hZGRDbGFzcygndGFic19fY29udGVudF9hY3RpdmUnKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgJChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJChcIi5zbGlkZXItanMtMVwiKS5vd2xDYXJvdXNlbCh7XHJcbiAgICAgICAgICAgIGl0ZW1zOiAxXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIG93bCA9ICQoJy5zbGlkZXItanMtMScpO1xyXG4gICAgICAgIG93bC5vd2xDYXJvdXNlbCgpO1xyXG4gICAgICAgICQoJy5jdXN0b21OZXh0QnRuJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBvd2wudHJpZ2dlcignbmV4dC5vd2wuY2Fyb3VzZWwnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAkKCcuY3VzdG9tUHJldkJ0bicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgb3dsLnRyaWdnZXIoJ3ByZXYub3dsLmNhcm91c2VsJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgICQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoXCIuc2xpZGVyLWpzLTJcIikub3dsQ2Fyb3VzZWwoe1xyXG4gICAgICAgICBpdGVtczogMVxyXG4gICAgICAgICB9KTtcclxuICAgICAgICAgdmFyIG93bCA9ICQoJy5zbGlkZXItanMtMicpO1xyXG4gICAgICAgICBvd2wub3dsQ2Fyb3VzZWwoKTtcclxuICAgICAgICAgJCgnLmN1c3RvbU5leHRCdG4yJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICBvd2wudHJpZ2dlcignbmV4dC5vd2wuY2Fyb3VzZWwnKTtcclxuICAgICAgICAgfSk7XHJcbiAgICAgICAgICQoJy5jdXN0b21QcmV2QnRuMicpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgb3dsLnRyaWdnZXIoJ3ByZXYub3dsLmNhcm91c2VsJyk7XHJcbiAgICAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG4gICAgJChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJChcIi5oZWFkZXItbmF2LW1vYlwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICQoXCIuaWNvbl9fbWVudVwiKS50b2dnbGVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgaWYgKCQoXCIuaGVhZGVyLW5hdlwiKS5pcyhcIjp2aXNpYmxlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiLmhlYWRlci1uYXZcIikuZmFkZU91dCgwKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoXCIuaGVhZGVyLW5hdlwiKS5mYWRlSW4oMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJChcIi5oZWFkZXItbmF2X19saW5rXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCQoXCIuaGVhZGVyLW5hdi1tb2JcIikuaXMoXCI6dmlzaWJsZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgJChcIi5oZWFkZXItbmF2XCIpLmZhZGVPdXQoMCk7XHJcbiAgICAgICAgICAgICAgICAkKFwiLmljb25fX21lbnVcIikudG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfSk7XHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKFwiLnRhYnNfX2l0ZW1cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkKFwiLnRhYnNfX2l0ZW1zXCIpLnRvZ2dsZUNsYXNzKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgICQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoXCIubGlzdFwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICQoXCIubGlzdFwiKS5ub3QodGhpcykucmVtb3ZlQ2xhc3MoXCJvblwiKTtcclxuICAgICAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcIm9uXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKFwiLmxpc3RfX2FsbC1idG5cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoJChcIi50YWJzLWJsb2NrX3ByaW1hcnkgLmxpc3RcIikuaGFzQ2xhc3MoXCJjbG9zZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5odG1sKCfQodC60YDRi9GC0Ywg0L/QvtC70L3Ri9C5INC/0LXRgNC10YfQtdC90YwnKTtcclxuICAgICAgICAgICAgICAgICQoXCIuY2xvc2VcIikuYWRkQ2xhc3MoXCJvcGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgJChcIi5jbG9zZVwiKS5yZW1vdmVDbGFzcyhcImNsb3NlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCQoXCIubGlzdFwiKS5oYXNDbGFzcyhcIm9wZW5cIikpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykuaHRtbCgn0KHQvNC+0YLRgNC10YLRjCDQv9C+0LvQvdGL0Lkg0L/QtdGA0LXRh9C10L3RjCcpO1xyXG4gICAgICAgICAgICAgICAgJChcIi5vcGVuXCIpLmFkZENsYXNzKFwiY2xvc2VcIik7XHJcbiAgICAgICAgICAgICAgICAkKFwiLm9wZW5cIikucmVtb3ZlQ2xhc3MoXCJvcGVuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgICQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBzbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA8PSA3NjcpIHtcclxuICAgICAgICAgICAgICAgICQoXCIuc2xpZGVyLWpzLTNcIikub3dsQ2Fyb3VzZWwoe1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiAxXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoXCIuc2xpZGVyLWpzLTNcIikub3dsQ2Fyb3VzZWwoJ2Rlc3Ryb3knKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2xkKCk7XHJcbiAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShzbGQpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuLy8vLy8vXHJcblxyXG5mdW5jdGlvbiBnZXRfbmFtZV9icm93c2VyKCkge1xyXG4gICAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcclxuICAgIGlmICh1YS5zZWFyY2goLy5ORVQvKSA+IDApIHtcclxuICAgICAgICAkKCcucmFuZ2Utc2xpZGVyX19zY2FsZScpLmFkZENsYXNzKCdpZV9yYW5nZScpO1xyXG4gICAgICAgICQoJy5pbnBfcmFuZ2VfMicpLmFkZENsYXNzKCdpZV9yYW5nZScpO1xyXG4gICAgICAgICQoJy5wYWdlX2dsb2JhbCcpLmNzcygnZm9udC1mYW1pbHknLCAnT3BlbiBTYW5zJyk7XHJcbiAgICAgICAgJCgnLnBhZ2Vfc3VjY2VzcycpLmNzcygnZm9udC1mYW1pbHknLCAnT3BlbiBTYW5zJyk7XHJcbiAgICB9XHJcbiAgICAvL0NVU1RPTSBJTlBVVCAoUkFOR0UpXHJcbiAgICAkKCdkb2N1bWVudCcpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBpbnBfMSgpIHtcclxuICAgICAgICAgICAgdmFyIGlucF92YWwgPSAkKCcucmFuZ2Utc2xpZGVyX19zY2FsZScpLnZhbCgpO1xyXG4gICAgICAgICAgICB2YXIgaW5wX21pbiA9ICQoJy5yYW5nZS1zbGlkZXJfX3NjYWxlJykuYXR0cignbWluJyk7XHJcbiAgICAgICAgICAgIHZhciBpbnBfbWF4ID0gJCgnLnJhbmdlLXNsaWRlcl9fc2NhbGUnKS5hdHRyKCdtYXgnKTtcclxuICAgICAgICAgICAgdmFyIGlucF93aWR0aCA9ICQoJy5yYW5nZS1zbGlkZXJfX3NjYWxlJykud2lkdGgoKTtcclxuICAgICAgICAgICAgdmFyIGNvdW50ID0gKCgoaW5wX3dpZHRoIC8gKGlucF9tYXggLSBpbnBfbWluKSkgKiBpbnBfdmFsKSAvIGlucF93aWR0aCkgKiAxMDAgLSAoKDEwMCAvIChpbnBfbWF4IC0gaW5wX21pbikpICogaW5wX21pbik7XHJcbiAgICAgICAgICAgIGlmICh1YS5zZWFyY2goLy5ORVQvKSA8IDAgJiYgJCgnLnJhbmdlLXNsaWRlcl9fc2NhbGUnKS5oYXNDbGFzcygndGVzdF9pbnB1dCcpID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcucmFuZ2Utc2xpZGVyX19zY2FsZScpLmNzcygnYmFja2dyb3VuZCcsICdsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICMwODRiOTMgMCUsICMwODRiOTMgJyArIGNvdW50ICsgJyUsICM3MDcwNzAgJyArIGNvdW50ICsgJyUsICM3MDcwNzAgMTAwJSknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodWEuc2VhcmNoKC8uTkVULykgPCAwICYmICQoJy5yYW5nZS1zbGlkZXJfX3NjYWxlJykuaGFzQ2xhc3MoJ3Rlc3RfaW5wdXQnKSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcucmFuZ2Utc2xpZGVyX19zY2FsZScpLmNzcygnYmFja2dyb3VuZCcsICdsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmZmYgMCUsICNmZmYgJyArIGNvdW50ICsgJyUsICNjY2MgJyArIGNvdW50ICsgJyUsICNjY2MgMTAwJSknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkKCcuYmNfMScpLnZhbChpbnBfdmFsKTtcclxuICAgICAgICAgICAgJCgnLmJjXzEnKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJCgnLnJhbmdlLXNsaWRlcl9fc2NhbGUnKS52YWwoJCgnLmJjXzEnKS52YWwoKSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpbnBfMigpIHtcclxuICAgICAgICAgICAgdmFyIGlucF92YWwgPSAkKCcuaW5wX3JhbmdlXzInKS52YWwoKTtcclxuICAgICAgICAgICAgdmFyIGlucF9taW4gPSAkKCcuaW5wX3JhbmdlXzInKS5hdHRyKCdtaW4nKTtcclxuICAgICAgICAgICAgdmFyIGlucF9tYXggPSAkKCcuaW5wX3JhbmdlXzInKS5hdHRyKCdtYXgnKTtcclxuICAgICAgICAgICAgdmFyIGlucF93aWR0aCA9ICQoJy5pbnBfcmFuZ2VfMicpLndpZHRoKCk7XHJcbiAgICAgICAgICAgIHZhciBjb3VudCA9ICgoKGlucF93aWR0aCAvIChpbnBfbWF4IC0gaW5wX21pbikpICogaW5wX3ZhbCkgLyBpbnBfd2lkdGgpICogMTAwIC0gKCgxMDAgLyAoaW5wX21heCAtIGlucF9taW4pKSAqIGlucF9taW4pO1xyXG4gICAgICAgICAgICBpZiAodWEuc2VhcmNoKC8uTkVULykgPCAwICYmICQoJy5pbnBfcmFuZ2VfMicpLmhhc0NsYXNzKCd0ZXN0X2lucHV0JykgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICQoJy5pbnBfcmFuZ2VfMicpLmNzcygnYmFja2dyb3VuZCcsICdsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICMwMDIzNTcgMCUsICMwMDIzNTcgJyArIGNvdW50ICsgJyUsICNjY2MgJyArIGNvdW50ICsgJyUsICNjY2MgMTAwJSknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodWEuc2VhcmNoKC8uTkVULykgPCAwICYmICQoJy5pbnBfcmFuZ2VfMicpLmhhc0NsYXNzKCd0ZXN0X2lucHV0JykgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgJCgnLmlucF9yYW5nZV8yJykuY3NzKCdiYWNrZ3JvdW5kJywgJ2xpbmVhci1ncmFkaWVudCh0byByaWdodCwgI2ZmZiAwJSwgI2ZmZiAnICsgY291bnQgKyAnJSwgI2NjYyAnICsgY291bnQgKyAnJSwgI2NjYyAxMDAlKScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICQoJy5iY18yJykudmFsKGlucF92YWwpO1xyXG4gICAgICAgICAgICAkKCcuYmNfMicpLmNoYW5nZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuaW5wX3JhbmdlXzInKS52YWwoJCgnLmJjXzInKS52YWwoKSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkKCcuYmNfMScpLmJpbmQoJ2NsaWNrIHRvdWNoJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkKCcuYmNfMScpLnZhbCgnJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJCgnLmJjXzInKS5iaW5kKCdjbGljayB0b3VjaCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCgnLmJjXzInKS52YWwoJycpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQoZG9jdW1lbnQpLmNsaWNrKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoXCIuYmNfMVwiKS5sZW5ndGgpIHJldHVybjtcclxuICAgICAgICAgICAgaW5wXzEoKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJChkb2N1bWVudCkuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChcIi5iY18yXCIpLmxlbmd0aCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpbnBfMigpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpbnBfMSgpO1xyXG4gICAgICAgIGlucF8yKCk7XHJcbiAgICAgICAgJCgnLmJjXzEnKS5jaGFuZ2UoaW5wXzEpO1xyXG4gICAgICAgICQoJy5iY18yJykuY2hhbmdlKGlucF8yKTtcclxuICAgICAgICAkKCcucmFuZ2Utc2xpZGVyX19zY2FsZScpLmJpbmQoJ21vdXNlbW92ZSBjbGljayB0b3VjaG1vdmUgdG91Y2hlbmQnLCBpbnBfMSk7XHJcbiAgICAgICAgJCgnLmlucF9yYW5nZV8yJykuYmluZCgnbW91c2Vtb3ZlIGNsaWNrIHRvdWNobW92ZSB0b3VjaGVuZCcsIGlucF8yKTtcclxuICAgIH0pXHJcbn1cclxuZ2V0X25hbWVfYnJvd3NlcigpO1xyXG5mdW5jdGlvbiB2YWxpZGF0ZShpbnApIHtcclxuICAgIGlucC52YWx1ZSA9IGlucC52YWx1ZS5yZXBsYWNlKC9bXlxcZCwuXSohL2csICcnKS5yZXBsYWNlKC8oWywuXSlbLC5dKy9nLCAnJDEnKS5yZXBsYWNlKC9eW15cXGRdKihcXGQrKFsuLF1cXGR7MCw1fSk/KS4qJC9nLCAnJDEnKTtcclxufTtcclxuXHJcbi8vTUVOVVxyXG52YXIgd19kID0gJCh3aW5kb3cpLndpZHRoKCk7XHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7XHJcbiAgICB2YXIgJG1lbnUgPSAkKFwiLmhlYWRlci10b3BcIik7XHJcbiAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgaWYgKCAkKHRoaXMpLnNjcm9sbFRvcCgpID4gMTAwICYmICRtZW51Lmhhc0NsYXNzKFwiZGVmYXVsdFwiKSApe1xyXG4gICAgICAgICAgICAkbWVudS5yZW1vdmVDbGFzcyhcImRlZmF1bHRcIikuYWRkQ2xhc3MoXCJuYXZiYXItZml4ZWQtdG9wXCIpO1xyXG4gICAgICAgICAgICB2YXIgaGVhZF9oZWlnaHQgPSBTdHJpbmcoTnVtYmVyKCQoJy5oZWFkZXItdG9wJykuY3NzKCdoZWlnaHQnKS5zdWJzdHJpbmcoMCwgJCgnLmhlYWRlci10b3AnKS5jc3MoJ2hlaWdodCcpLmxlbmd0aCAtMikpKSsgJ3B4JztcclxuICAgICAgICAgICAgJCgnLmhlYWRlci1tYWluJykuY3NzKCdtYXJnaW4tdG9wJywgaGVhZF9oZWlnaHQpO1xyXG4gICAgICAgICAgICBpZiAod19kIDwgNTgzKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcuaGVhZGVyLW1haW4nKS5jc3MoJ21hcmdpbi10b3AnLCAnMTgwcHgnKTtcclxuICAgICAgICAgICAgICAgICQoJy5uYXZiYXJfeHMnKS5jc3MoJ21hcmdpbi10b3AnLCBTdHJpbmcoTnVtYmVyKCQoJy5oZWFkZXItdG9wJykuY3NzKCdoZWlnaHQnKS5zdWJzdHJpbmcoMCwgJCgnLmhlYWRlci10b3AnKS5jc3MoJ2hlaWdodCcpLmxlbmd0aCAtMikpKSsgJ3B4Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZigkKHRoaXMpLnNjcm9sbFRvcCgpIDw9IDEwMCAmJiAkbWVudS5oYXNDbGFzcyhcIm5hdmJhci1maXhlZC10b3BcIikpIHtcclxuICAgICAgICAgICAgJG1lbnUucmVtb3ZlQ2xhc3MoXCJuYXZiYXItZml4ZWQtdG9wXCIpLmFkZENsYXNzKFwiZGVmYXVsdFwiKTtcclxuICAgICAgICAgICAgJCgnLmhlYWRlci1tYWluJykuY3NzKCdtYXJnaW4tdG9wJywgJzBweCcpO1xyXG4gICAgICAgICAgICBpZiAod19kIDwgNTgzKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcubmF2YmFyX3hzJykuY3NzKCdtYXJnaW4tdG9wJywgJzBweCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pO1xyXG4vL2FsZXJ0KHdfZClcclxuJCgnZG9jdW1lbnQnKS5yZWFkeShmdW5jdGlvbiAoKXtcclxuICAgICQoXCIuc2Nyb2xsXCIpLm9uKFwiY2xpY2sgdG91Y2hcIixcImFcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgLy/QvtGC0LzQtdC90Y/QtdC8INGB0YLQsNC90LTQsNGA0YLQvdGD0Y4g0L7QsdGA0LDQsdC+0YLQutGDINC90LDQttCw0YLQuNGPINC/0L4g0YHRgdGL0LvQutC1XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAvL9C30LDQsdC40YDQsNC10Lwg0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0LHQvtC60LAg0YEg0LDRgtGA0LjQsdGD0YLQsCBocmVmXHJcbiAgICAgICAgdmFyIGlkICA9ICQodGhpcykuYXR0cignaHJlZicpLFxyXG4gICAgICAgICAgICAvL9GD0LfQvdCw0LXQvCDQstGL0YHQvtGC0YMg0L7RgiDQvdCw0YfQsNC70LAg0YHRgtGA0LDQvdC40YbRiyDQtNC+INCx0LvQvtC60LAg0L3QsCDQutC+0YLQvtGA0YvQuSDRgdGB0YvQu9Cw0LXRgtGB0Y8g0Y/QutC+0YDRjFxyXG4gICAgICAgICAgICB0b3AgPSAkKGlkKS5vZmZzZXQoKS50b3AgLSA4MDtcclxuICAgICAgICAvL2FsZXJ0KHRvcClcclxuICAgICAgICBpZiAod19kIDwgNTgzKSB7XHJcbiAgICAgICAgICAgIHRvcCA9ICQoaWQpLm9mZnNldCgpLnRvcCAtIDQwO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL9Cw0L3QuNC80LjRgNGD0LXQvCDQv9C10YDQtdGF0L7QtCDQvdCwINGA0LDRgdGB0YLQvtGP0L3QuNC1IC0gdG9wINC30LAgMTUwMCDQvNGBXHJcbiAgICAgICAgJCgnYm9keSxodG1sJykuYW5pbWF0ZSh7c2Nyb2xsVG9wOiB0b3B9LCAxMDAwKTtcclxuICAgIH0pO1xyXG59KTtcclxuJCgnLnNjcm9sbCA+IGEnKS5vbignY2xpY2sgdG91Y2gnLCBmdW5jdGlvbigpe1xyXG4gICAgaWYodGhpcy5oYXNoKSAkKGRvY3VtZW50KS5kYXRhKCdoJywxKTtcclxufSk7XHJcbiQoZG9jdW1lbnQpLnNjcm9sbChmdW5jdGlvbigpe1xyXG4gICAgaWYoJCh0aGlzKS5kYXRhKCdoJykpICQodGhpcykuZGF0YSgnaCcsMCkuc2Nyb2xsVG9wKCQodGhpcykuc2Nyb2xsVG9wKCktMjAwKTtcclxufSk7Il19
